import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends7;
    var __assign10;
    var __rest4;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter13;
    var __generator13;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread9;
    var __spreadArrays;
    var __await5;
    var __asyncGenerator5;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends7 = function(d, b) {
        extendStatics6(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest4 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter13 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator13 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f2, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f2 = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values6 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read14(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await5 = function(v) {
        return this instanceof __await5 ? (this.v = v, this) : new __await5(v);
      };
      __asyncGenerator5 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await5 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v) {
          if (f2(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f2) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await5(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
          } : f2;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends7);
      exporter("__assign", __assign10);
      exporter("__rest", __rest4);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter13);
      exporter("__generator", __generator13);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await5);
      exporter("__asyncGenerator", __asyncGenerator5);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 255;
          out[i * 4 + 1] = this.state[i] >>> 16 & 255;
          out[i * 4 + 2] = this.state[i] >>> 8 & 255;
          out[i * 4 + 3] = this.state[i] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf8, toUtf8;
var init_pureJs = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js"() {
    fromUtf8 = function(input) {
      var bytes = [];
      for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf8 = function(input) {
      var decoded = "";
      for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i], input[++i], input[++i]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf82(input) {
  return new TextEncoder().encode(input);
}
function toUtf82(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var es_exports = {};
__export(es_exports, {
  fromUtf8: () => fromUtf83,
  toUtf8: () => toUtf83
});
var fromUtf83, toUtf83;
var init_es = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js"() {
    init_pureJs();
    init_whatwgEncodingApi();
    fromUtf83 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf82(input) : fromUtf8(input);
    };
    toUtf83 = function(input) {
      return typeof TextDecoder === "function" ? toUtf82(input) : toUtf8(input);
    };
  }
});

// node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var constants_1 = require_constants();
    var RawSha256_1 = require_RawSha256();
    var util_utf8_browser_1 = (init_es(), __toCommonJS(es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 54;
            outer[i] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      }
      Sha2565.prototype.update = function(toHash) {
        if (isEmptyData(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update(convertToBuffer(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      Sha2565.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2565.prototype.digest = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          return tslib_1.__generator(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
    function bufferFromSecret(secret) {
      var input = convertToBuffer(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    function convertToBuffer(data) {
      if (typeof data === "string") {
        return util_utf8_browser_1.fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/sha256-js/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_jsSha256(), exports);
  }
});

// node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
      function error(type) {
        throw RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      }
      punycode = {
        "version": "1.3.2",
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/url/util.js
var require_util = __commonJS({
  "node_modules/url/util.js"(exports, module) {
    "use strict";
    module.exports = {
      isString: function(arg) {
        return typeof arg === "string";
      },
      isObject: function(arg) {
        return typeof arg === "object" && arg !== null;
      },
      isNull: function(arg) {
        return arg === null;
      },
      isNullOrUndefined: function(arg) {
        return arg == null;
      }
    };
  }
});

// node_modules/querystring/decode.js
var require_decode = __commonJS({
  "node_modules/querystring/decode.js"(exports, module) {
    "use strict";
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = function(qs, sep, eq, options) {
      sep = sep || "&";
      eq = eq || "=";
      var obj = {};
      if (typeof qs !== "string" || qs.length === 0) {
        return obj;
      }
      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1e3;
      if (options && typeof options.maxKeys === "number") {
        maxKeys = options.maxKeys;
      }
      var len = qs.length;
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (Array.isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }
      return obj;
    };
  }
});

// node_modules/querystring/encode.js
var require_encode = __commonJS({
  "node_modules/querystring/encode.js"(exports, module) {
    "use strict";
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
        case "string":
          return v;
        case "boolean":
          return v ? "true" : "false";
        case "number":
          return isFinite(v) ? v : "";
        default:
          return "";
      }
    };
    module.exports = function(obj, sep, eq, name) {
      sep = sep || "&";
      eq = eq || "=";
      if (obj === null) {
        obj = void 0;
      }
      if (typeof obj === "object") {
        return Object.keys(obj).map(function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (Array.isArray(obj[k])) {
            return obj[k].map(function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }
      if (!name)
        return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };
  }
});

// node_modules/querystring/index.js
var require_querystring = __commonJS({
  "node_modules/querystring/index.js"(exports) {
    "use strict";
    exports.decode = exports.parse = require_decode();
    exports.encode = exports.stringify = require_encode();
  }
});

// node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    var util = require_util();
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    var hostEndingChars = ["/", "?", "#"];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_querystring();
    function urlParse(url, parseQueryString3, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url)
        return url;
      var u = new Url();
      u.parse(url, parseQueryString3, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString3, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
      var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url = uSplit.join(splitter);
      var rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString3) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString3) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        if (hostEnd === -1)
          hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part)
              continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash2 = rest.indexOf("#");
      if (hash2 !== -1) {
        this.hash = rest.substr(hash2);
        rest = rest.slice(0, hash2);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString3) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString3) {
        this.search = "";
        this.query = {};
      }
      if (rest)
        this.pathname = rest;
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (util.isString(obj))
        obj = urlParse(obj);
      if (!(obj instanceof Url))
        return Url.prototype.format.call(obj);
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash2 = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":")
        protocol += ":";
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/")
          pathname = "/" + pathname;
      } else if (!host) {
        host = "";
      }
      if (hash2 && hash2.charAt(0) !== "#")
        hash2 = "#" + hash2;
      if (search && search.charAt(0) !== "?")
        search = "?" + search;
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash2;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source)
        return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol")
            result[rkey] = relative[rkey];
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = "/";
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift()))
            ;
          if (!relative.host)
            relative.host = "";
          if (!relative.hostname)
            relative.hostname = "";
          if (relPath[0] !== "")
            relPath.unshift("");
          if (relPath.length < 2)
            relPath.unshift("");
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "")
            srcPath[0] = result.host;
          else
            srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "")
              relPath[0] = relative.host;
            else
              relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath)
          srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join("/");
      }
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host)
        this.hostname = host;
    };
  }
});

// node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf84, toUtf84;
var init_pureJs2 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js"() {
    fromUtf84 = function(input) {
      var bytes = [];
      for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf84 = function(input) {
      var decoded = "";
      for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i], input[++i], input[++i]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf85(input) {
  return new TextEncoder().encode(input);
}
function toUtf85(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi2 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var es_exports2 = {};
__export(es_exports2, {
  fromUtf8: () => fromUtf86,
  toUtf8: () => toUtf86
});
var fromUtf86, toUtf86;
var init_es2 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js"() {
    init_pureJs2();
    init_whatwgEncodingApi2();
    fromUtf86 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf85(input) : fromUtf84(input);
    };
    toUtf86 = function(input) {
      return typeof TextDecoder === "function" ? toUtf85(input) : toUtf84(input);
    };
  }
});

// node_modules/@aws-sdk/util-locate-window/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  locateWindow: () => locateWindow
});
function locateWindow() {
  if (typeof window !== "undefined") {
    return window;
  } else if (typeof self !== "undefined") {
    return self;
  }
  return fallbackWindow;
}
var fallbackWindow;
var init_dist_es = __esm({
  "node_modules/@aws-sdk/util-locate-window/dist-es/index.js"() {
    fallbackWindow = {};
  }
});

// node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData();
    var constants_1 = require_constants2();
    var util_utf8_browser_1 = (init_es2(), __toCommonJS(es_exports2));
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        if (secret) {
          this.operation = getKeyPromise(secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      }
      Sha2565.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2565.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_es2(), __toCommonJS(es_exports2));
    var fromUtf810 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf810(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData2 = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData2();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build2();
    var constants_1 = require_constants2();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      }
      Sha2565.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2565.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha2562 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants3();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 255;
          out[i * 4 + 1] = this.state[i] >>> 16 & 255;
          out[i * 4 + 2] = this.state[i] >>> 8 & 255;
          out[i * 4 + 3] = this.state[i] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha2562 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib();
    var constants_1 = require_constants3();
    var RawSha256_1 = require_RawSha2562();
    var util_1 = require_build2();
    var Sha2564 = function() {
      function Sha2565(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 54;
            outer[i] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      }
      Sha2565.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      Sha2565.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2565.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
          return (0, tslib_1.__generator)(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_jsSha2562(), exports);
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues2 = window2.crypto.getRandomValues;
        return typeof getRandomValues2 === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build4 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_supportsWebCrypto(), exports);
  }
});

// node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues2 = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues2).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build5 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CryptoOperation(), exports);
    tslib_1.__exportStar(require_Key(), exports);
    tslib_1.__exportStar(require_KeyOperation(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto(), exports);
    tslib_1.__exportStar(require_MsWindow(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha256();
    var webCryptoSha256_1 = require_webCryptoSha256();
    var sha256_js_1 = require_build3();
    var supports_web_crypto_1 = require_build4();
    var ie11_detection_1 = require_build5();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2565.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
      };
      Sha2565.prototype.digest = function() {
        return this.hash.digest();
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build6 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_crossPlatformSha256(), exports);
    var ie11Sha256_1 = require_ie11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues2 = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues2) {
      rnds82 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues2(rnds82);
        return rnds82;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds82;
    var rnds;
  }
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex2 = [];
    for (i = 0; i < 256; ++i) {
      byteToHex2[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex2;
      return [
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/v1.js"(exports, module) {
    var rng2 = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        var seedBytes = rng2();
        if (node == null) {
          node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf ? buf : bytesToUuid(b);
    }
    module.exports = v1;
  }
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/v4.js"(exports, module) {
    var rng2 = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v43(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng2)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v43;
  }
});

// node_modules/uuid/index.js
var require_uuid = __commonJS({
  "node_modules/uuid/index.js"(exports, module) {
    var v1 = require_v1();
    var v43 = require_v4();
    var uuid = v43;
    uuid.v1 = v1;
    uuid.v4 = v43;
    module.exports = uuid;
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse5;
    exports.serialize = serialize2;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse5(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var pairs = str.split(";");
      var dec = opt.decode || decode;
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var index = pair.indexOf("=");
        if (index < 0) {
          continue;
        }
        var key = pair.substring(0, index).trim();
        if (void 0 == obj[key]) {
          var val = pair.substring(index + 1, pair.length).trim();
          if (val[0] === '"') {
            val = val.slice(1, -1);
          }
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol2 = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol2(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol2("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable2;
    }
    function isObservable(x) {
      return x instanceof Observable2;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m)
              m.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m)
              m.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m)
              m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable2 = function() {
      function Observable3(subscriber) {
        _classCallCheck(this, Observable3);
        if (!(this instanceof Observable3))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass(Observable3, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v) {
                  observer.next(v);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }
                var inner = C.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0)
                      subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x) {
          var C = typeof this === "function" ? this : Observable3;
          if (x == null)
            throw new TypeError(x + " is not an object");
          var method = getMethod(x, SymbolObservable);
          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C)
              return observable;
            return new C(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol2("iterator")) {
            method = getMethod(x, SymbolIterator);
            if (method) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x)) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C = typeof this === "function" ? this : Observable3;
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable3;
    }();
    exports.Observable = Observable2;
    if (hasSymbols()) {
      Object.defineProperty(Observable2, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "node_modules/zen-observable/index.js"(exports, module) {
    module.exports = require_Observable().Observable;
  }
});

// node_modules/map-obj/index.js
var require_map_obj = __commonJS({
  "node_modules/map-obj/index.js"(exports, module) {
    "use strict";
    var isObject = (value) => typeof value === "object" && value !== null;
    var mapObjectSkip = Symbol("skip");
    var isObjectCustom = (value) => isObject(value) && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);
    var mapObject = (object, mapper, options, isSeen = /* @__PURE__ */ new WeakMap()) => {
      options = {
        deep: false,
        target: {},
        ...options
      };
      if (isSeen.has(object)) {
        return isSeen.get(object);
      }
      isSeen.set(object, options.target);
      const { target } = options;
      delete options.target;
      const mapArray = (array) => array.map((element) => isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element);
      if (Array.isArray(object)) {
        return mapArray(object);
      }
      for (const [key, value] of Object.entries(object)) {
        const mapResult = mapper(key, value, object);
        if (mapResult === mapObjectSkip) {
          continue;
        }
        let [newKey, newValue, { shouldRecurse = true } = {}] = mapResult;
        if (newKey === "__proto__") {
          continue;
        }
        if (options.deep && shouldRecurse && isObjectCustom(newValue)) {
          newValue = Array.isArray(newValue) ? mapArray(newValue) : mapObject(newValue, mapper, options, isSeen);
        }
        target[newKey] = newValue;
      }
      return target;
    };
    module.exports = (object, mapper, options) => {
      if (!isObject(object)) {
        throw new TypeError(`Expected an object, got \`${object}\` (${typeof object})`);
      }
      return mapObject(object, mapper, options);
    };
    module.exports.mapObjectSkip = mapObjectSkip;
  }
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports, module) {
    "use strict";
    var preserveCamelCase = (string) => {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < string.length; i++) {
        const character = string[i];
        if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
          string = string.slice(0, i) + "-" + string.slice(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
          string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
        }
      }
      return string;
    };
    var camelCase = (input, options) => {
      if (!(typeof input === "string" || Array.isArray(input))) {
        throw new TypeError("Expected the input to be `string | string[]`");
      }
      options = Object.assign({
        pascalCase: false
      }, options);
      const postProcess = (x) => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;
      if (Array.isArray(input)) {
        input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
      } else {
        input = input.trim();
      }
      if (input.length === 0) {
        return "";
      }
      if (input.length === 1) {
        return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
      }
      const hasUpperCase = input !== input.toLowerCase();
      if (hasUpperCase) {
        input = preserveCamelCase(input);
      }
      input = input.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\d+(\w|$)/g, (m) => m.toUpperCase());
      return postProcess(input);
    };
    module.exports = camelCase;
    module.exports.default = camelCase;
  }
});

// node_modules/quick-lru/index.js
var require_quick_lru = __commonJS({
  "node_modules/quick-lru/index.js"(exports, module) {
    "use strict";
    var QuickLRU = class {
      constructor(options = {}) {
        if (!(options.maxSize && options.maxSize > 0)) {
          throw new TypeError("`maxSize` must be a number greater than 0");
        }
        this.maxSize = options.maxSize;
        this.cache = /* @__PURE__ */ new Map();
        this.oldCache = /* @__PURE__ */ new Map();
        this._size = 0;
      }
      _set(key, value) {
        this.cache.set(key, value);
        this._size++;
        if (this._size >= this.maxSize) {
          this._size = 0;
          this.oldCache = this.cache;
          this.cache = /* @__PURE__ */ new Map();
        }
      }
      get(key) {
        if (this.cache.has(key)) {
          return this.cache.get(key);
        }
        if (this.oldCache.has(key)) {
          const value = this.oldCache.get(key);
          this.oldCache.delete(key);
          this._set(key, value);
          return value;
        }
      }
      set(key, value) {
        if (this.cache.has(key)) {
          this.cache.set(key, value);
        } else {
          this._set(key, value);
        }
        return this;
      }
      has(key) {
        return this.cache.has(key) || this.oldCache.has(key);
      }
      peek(key) {
        if (this.cache.has(key)) {
          return this.cache.get(key);
        }
        if (this.oldCache.has(key)) {
          return this.oldCache.get(key);
        }
      }
      delete(key) {
        const deleted = this.cache.delete(key);
        if (deleted) {
          this._size--;
        }
        return this.oldCache.delete(key) || deleted;
      }
      clear() {
        this.cache.clear();
        this.oldCache.clear();
        this._size = 0;
      }
      *keys() {
        for (const [key] of this) {
          yield key;
        }
      }
      *values() {
        for (const [, value] of this) {
          yield value;
        }
      }
      *[Symbol.iterator]() {
        for (const item of this.cache) {
          yield item;
        }
        for (const item of this.oldCache) {
          const [key] = item;
          if (!this.cache.has(key)) {
            yield item;
          }
        }
      }
      get size() {
        let oldCacheSize = 0;
        for (const key of this.oldCache.keys()) {
          if (!this.cache.has(key)) {
            oldCacheSize++;
          }
        }
        return this._size + oldCacheSize;
      }
    };
    module.exports = QuickLRU;
  }
});

// node_modules/camelcase-keys/index.js
var require_camelcase_keys = __commonJS({
  "node_modules/camelcase-keys/index.js"(exports, module) {
    "use strict";
    var mapObj = require_map_obj();
    var camelCase = require_camelcase();
    var QuickLru = require_quick_lru();
    var has = (array, key) => array.some((x) => {
      if (typeof x === "string") {
        return x === key;
      }
      x.lastIndex = 0;
      return x.test(key);
    });
    var cache = new QuickLru({ maxSize: 1e5 });
    var isObject = (value) => typeof value === "object" && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);
    var camelCaseConvert = (input, options) => {
      if (!isObject(input)) {
        return input;
      }
      options = {
        deep: false,
        pascalCase: false,
        ...options
      };
      const { exclude, pascalCase, stopPaths, deep } = options;
      const stopPathsSet = new Set(stopPaths);
      const makeMapper = (parentPath) => (key, value) => {
        if (deep && isObject(value)) {
          const path = parentPath === void 0 ? key : `${parentPath}.${key}`;
          if (!stopPathsSet.has(path)) {
            value = mapObj(value, makeMapper(path));
          }
        }
        if (!(exclude && has(exclude, key))) {
          const cacheKey = pascalCase ? `${key}_` : key;
          if (cache.has(cacheKey)) {
            key = cache.get(cacheKey);
          } else {
            const ret = camelCase(key, { pascalCase });
            if (key.length < 100) {
              cache.set(cacheKey, ret);
            }
            key = ret;
          }
        }
        return [key, value];
      };
      return mapObj(input, makeMapper(void 0));
    };
    module.exports = (input, options) => {
      if (Array.isArray(input)) {
        return Object.keys(input).map((key) => camelCaseConvert(input[key], options));
      }
      return camelCaseConvert(input, options);
    };
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js"(exports, module) {
    var __extends7;
    var __assign10;
    var __rest4;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter13;
    var __generator13;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread9;
    var __spreadArrays;
    var __await5;
    var __asyncGenerator5;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends7 = function(d, b) {
        extendStatics6(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest4 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter13 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator13 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f2, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f2 = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values6 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read14(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await5 = function(v) {
        return this instanceof __await5 ? (this.v = v, this) : new __await5(v);
      };
      __asyncGenerator5 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await5 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v) {
          if (f2(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f2) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await5(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
          } : f2;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends7);
      exporter("__assign", __assign10);
      exporter("__rest", __rest4);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter13);
      exporter("__generator", __generator13);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await5);
      exporter("__asyncGenerator", __asyncGenerator5);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData3 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js
var fromUtf87, toUtf87;
var init_pureJs3 = __esm({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js"() {
    fromUtf87 = function(input) {
      var bytes = [];
      for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf87 = function(input) {
      var decoded = "";
      for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i], input[++i], input[++i]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js
function fromUtf88(input) {
  return new TextEncoder().encode(input);
}
function toUtf88(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi3 = __esm({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  fromUtf8: () => fromUtf89,
  toUtf8: () => toUtf89
});
var fromUtf89, toUtf89;
var init_dist_es2 = __esm({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js"() {
    init_pureJs3();
    init_whatwgEncodingApi3();
    fromUtf89 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf88(input) : fromUtf87(input);
    };
    toUtf89 = function(input) {
      return typeof TextDecoder === "function" ? toUtf88(input) : toUtf87(input);
    };
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha2562 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData3();
    var constants_1 = require_constants4();
    var util_utf8_browser_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        if (secret) {
          this.operation = getKeyPromise(secret).then(function(keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function() {
          });
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      }
      Sha2565.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function(operation) {
          operation.onerror = function() {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function() {
        });
      };
      Sha2565.prototype.digest = function() {
        return this.operation.then(function(operation) {
          return new Promise(function(resolve, reject) {
            operation.onerror = function() {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function() {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var fromUtf810 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf810(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData4 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint82 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/index.js
var require_build7 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer2();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData4();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint82();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom2();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha2562 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build7();
    var constants_1 = require_constants4();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function(resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function() {
          });
        }
      }
      Sha2565.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha2565.prototype.digest = function() {
        var _this = this;
        if (this.key) {
          return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function() {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js"(exports, module) {
    var __extends7;
    var __assign10;
    var __rest4;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter13;
    var __generator13;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread9;
    var __spreadArrays;
    var __await5;
    var __asyncGenerator5;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends7 = function(d, b) {
        extendStatics6(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest4 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter13 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator13 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f2, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f2 = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values6 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read14(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await5 = function(v) {
        return this instanceof __await5 ? (this.v = v, this) : new __await5(v);
      };
      __asyncGenerator5 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await5 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v) {
          if (f2(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f2) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await5(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
          } : f2;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends7);
      exporter("__assign", __assign10);
      exporter("__rest", __rest4);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter13);
      exporter("__generator", __generator13);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await5);
      exporter("__asyncGenerator", __asyncGenerator5);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha2563 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants5();
    var RawSha256 = function() {
      function RawSha2562() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
      }
      RawSha2562.prototype.update = function(data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha2562.prototype.digest = function() {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 128);
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 255;
          out[i * 4 + 1] = this.state[i] >>> 16 & 255;
          out[i * 4 + 2] = this.state[i] >>> 8 & 255;
          out[i * 4 + 3] = this.state[i] >>> 0 & 255;
        }
        return out;
      };
      RawSha2562.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha2562;
    }();
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha2563 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib3();
    var constants_1 = require_constants5();
    var RawSha256_1 = require_RawSha2563();
    var util_1 = require_build7();
    var Sha2564 = function() {
      function Sha2565(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 54;
            outer[i] ^= 92;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      }
      Sha2565.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      Sha2565.prototype.digestSync = function() {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      Sha2565.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
          return (0, tslib_1.__generator)(this, function(_a) {
            return [2, this.digestSync()];
          });
        });
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/index.js
var require_build8 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib3();
    (0, tslib_1.__exportStar)(require_jsSha2563(), exports);
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js"(exports, module) {
    var __extends7;
    var __assign10;
    var __rest4;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter13;
    var __generator13;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread9;
    var __spreadArrays;
    var __await5;
    var __asyncGenerator5;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends7 = function(d, b) {
        extendStatics6(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest4 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter13 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator13 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f2, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f2 = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values6 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read14(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await5 = function(v) {
        return this instanceof __await5 ? (this.v = v, this) : new __await5(v);
      };
      __asyncGenerator5 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await5 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v) {
          if (f2(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f2) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await5(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
          } : f2;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends7);
      exporter("__assign", __assign10);
      exporter("__rest", __rest4);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter13);
      exporter("__generator", __generator13);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await5);
      exporter("__asyncGenerator", __asyncGenerator5);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib4();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues2 = window2.crypto.getRandomValues;
        return typeof getRandomValues2 === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return (0, tslib_1.__generator)(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [2];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build9 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib4();
    (0, tslib_1.__exportStar)(require_supportsWebCrypto2(), exports);
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js
var require_tslib5 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js"(exports, module) {
    var __extends7;
    var __assign10;
    var __rest4;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter13;
    var __generator13;
    var __exportStar;
    var __values6;
    var __read14;
    var __spread9;
    var __spreadArrays;
    var __await5;
    var __asyncGenerator5;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends7 = function(d, b) {
        extendStatics6(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest4 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter13 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator13 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f2, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f2 = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !exports2.hasOwnProperty(p))
            exports2[p] = m[p];
      };
      __values6 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read14 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read14(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await5 = function(v) {
        return this instanceof __await5 ? (this.v = v, this) : new __await5(v);
      };
      __asyncGenerator5 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await5 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v) {
          if (f2(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f2) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await5(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
          } : f2;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k))
              result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends7);
      exporter("__assign", __assign10);
      exporter("__rest", __rest4);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter13);
      exporter("__generator", __generator13);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values6);
      exporter("__read", __read14);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await5);
      exporter("__asyncGenerator", __asyncGenerator5);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow2 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues2 = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues2).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build10 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib5();
    (0, tslib_1.__exportStar)(require_CryptoOperation2(), exports);
    (0, tslib_1.__exportStar)(require_Key2(), exports);
    (0, tslib_1.__exportStar)(require_KeyOperation2(), exports);
    (0, tslib_1.__exportStar)(require_MsSubtleCrypto2(), exports);
    (0, tslib_1.__exportStar)(require_MsWindow2(), exports);
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha2562 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha2562();
    var webCryptoSha256_1 = require_webCryptoSha2562();
    var sha256_js_1 = require_build8();
    var supports_web_crypto_1 = require_build9();
    var ie11_detection_1 = require_build10();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2564 = function() {
      function Sha2565(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha2565.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
      };
      Sha2565.prototype.digest = function() {
        return this.hash.digest();
      };
      return Sha2565;
    }();
    exports.Sha256 = Sha2564;
  }
});

// node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build11 = __commonJS({
  "node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib2();
    (0, tslib_1.__exportStar)(require_crossPlatformSha2562(), exports);
    var ie11Sha256_1 = require_ie11Sha2562();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha2562();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/@aws-amplify/core/lib-esm/Util/Constants.js
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256e3;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
  "ResourceNotFoundException",
  "InvalidSequenceTokenException"
];

// node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
};
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE2) {
  LOG_TYPE2["DEBUG"] = "DEBUG";
  LOG_TYPE2["ERROR"] = "ERROR";
  LOG_TYPE2["INFO"] = "INFO";
  LOG_TYPE2["WARN"] = "WARN";
  LOG_TYPE2["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
var ConsoleLogger = function() {
  function ConsoleLogger2(name, level) {
    if (level === void 0) {
      level = LOG_TYPE.WARN;
    }
    this.name = name;
    this.level = level;
    this._pluggables = [];
  }
  ConsoleLogger2.prototype._padding = function(n) {
    return n < 10 ? "0" + n : "" + n;
  };
  ConsoleLogger2.prototype._ts = function() {
    var dt = new Date();
    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") + "." + dt.getMilliseconds();
  };
  ConsoleLogger2.prototype.configure = function(config) {
    if (!config)
      return this._config;
    this._config = config;
    return this._config;
  };
  ConsoleLogger2.prototype._log = function(type) {
    var e_1, _a;
    var msg = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      msg[_i - 1] = arguments[_i];
    }
    var logger_level_name = this.level;
    if (ConsoleLogger2.LOG_LEVEL) {
      logger_level_name = ConsoleLogger2.LOG_LEVEL;
    }
    if (typeof window !== "undefined" && window.LOG_LEVEL) {
      logger_level_name = window.LOG_LEVEL;
    }
    var logger_level = LOG_LEVELS[logger_level_name];
    var type_level = LOG_LEVELS[type];
    if (!(type_level >= logger_level)) {
      return;
    }
    var log = console.log.bind(console);
    if (type === LOG_TYPE.ERROR && console.error) {
      log = console.error.bind(console);
    }
    if (type === LOG_TYPE.WARN && console.warn) {
      log = console.warn.bind(console);
    }
    var prefix = "[" + type + "] " + this._ts() + " " + this.name;
    var message = "";
    if (msg.length === 1 && typeof msg[0] === "string") {
      message = prefix + " - " + msg[0];
      log(message);
    } else if (msg.length === 1) {
      message = prefix + " " + msg[0];
      log(prefix, msg[0]);
    } else if (typeof msg[0] === "string") {
      var obj = msg.slice(1);
      if (obj.length === 1) {
        obj = obj[0];
      }
      message = prefix + " - " + msg[0] + " " + obj;
      log(prefix + " - " + msg[0], obj);
    } else {
      message = prefix + " " + msg;
      log(prefix, msg);
    }
    try {
      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {
        var plugin = _c.value;
        var logEvent = { message, timestamp: Date.now() };
        plugin.pushLogs([logEvent]);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  ConsoleLogger2.prototype.log = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));
  };
  ConsoleLogger2.prototype.info = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));
  };
  ConsoleLogger2.prototype.warn = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.WARN], msg));
  };
  ConsoleLogger2.prototype.error = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));
  };
  ConsoleLogger2.prototype.debug = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));
  };
  ConsoleLogger2.prototype.verbose = function() {
    var msg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      msg[_i] = arguments[_i];
    }
    this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));
  };
  ConsoleLogger2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
      this._pluggables.push(pluggable);
      pluggable.configure(this._config);
    }
  };
  ConsoleLogger2.prototype.listPluggables = function() {
    return this._pluggables;
  };
  ConsoleLogger2.LOG_LEVEL = null;
  return ConsoleLogger2;
}();

// node_modules/@aws-amplify/core/lib-esm/Amplify.js
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var logger = new ConsoleLogger("Amplify");
var AmplifyClass = function() {
  function AmplifyClass2() {
    this._components = [];
    this._config = {};
    this._modules = {};
    this.Auth = null;
    this.Analytics = null;
    this.API = null;
    this.Credentials = null;
    this.Storage = null;
    this.I18n = null;
    this.Cache = null;
    this.PubSub = null;
    this.Interactions = null;
    this.Pushnotification = null;
    this.UI = null;
    this.XR = null;
    this.Predictions = null;
    this.DataStore = null;
    this.Geo = null;
    this.Logger = ConsoleLogger;
    this.ServiceWorker = null;
  }
  AmplifyClass2.prototype.register = function(comp) {
    logger.debug("component registered in amplify", comp);
    this._components.push(comp);
    if (typeof comp.getModuleName === "function") {
      this._modules[comp.getModuleName()] = comp;
      this[comp.getModuleName()] = comp;
    } else {
      logger.debug("no getModuleName method for component", comp);
    }
    comp.configure(this._config);
  };
  AmplifyClass2.prototype.configure = function(config) {
    var _this = this;
    if (!config)
      return this._config;
    this._config = Object.assign(this._config, config);
    logger.debug("amplify config", this._config);
    Object.entries(this._modules).forEach(function(_a) {
      var _b = __read2(_a, 2), Name = _b[0], comp = _b[1];
      Object.keys(comp).forEach(function(property) {
        if (_this._modules[property]) {
          comp[property] = _this._modules[property];
        }
      });
    });
    this._components.map(function(comp) {
      comp.configure(_this._config);
    });
    return this._config;
  };
  AmplifyClass2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") {
      this._components.map(function(comp) {
        if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") {
          comp.addPluggable(pluggable);
        }
      });
    }
  };
  return AmplifyClass2;
}();
var Amplify = new AmplifyClass();

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/browser.js
var logger2 = new ConsoleLogger("ClientDevice_Browser");
function clientInfo() {
  if (typeof window === "undefined") {
    return {};
  }
  return browserClientInfo();
}
function browserClientInfo() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return {};
  }
  var nav = window.navigator;
  if (!nav) {
    logger2.warn("No navigator object available to get browser client info");
    return {};
  }
  var platform = nav.platform, product = nav.product, vendor = nav.vendor, userAgent = nav.userAgent, language = nav.language;
  var type = browserType(userAgent);
  var timezone = browserTimezone();
  return {
    platform,
    make: product || vendor,
    model: type.type,
    version: type.version,
    appVersion: [type.type, type.version].join("/"),
    language,
    timezone
  };
}
function dimension() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return { width: 320, height: 320 };
  }
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
}
function browserTimezone() {
  var tzMatch = /\(([A-Za-z\s].*)\)/.exec(new Date().toString());
  return tzMatch ? tzMatch[1] || "" : "";
}
function browserType(userAgent) {
  var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent);
  if (operaMatch) {
    return { type: operaMatch[1], version: operaMatch[2] };
  }
  var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent);
  if (ieMatch) {
    return { type: ieMatch[1], version: ieMatch[2] };
  }
  var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent);
  if (cfMatch) {
    return { type: cfMatch[1], version: cfMatch[2] };
  }
  var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent);
  if (sMatch) {
    return { type: sMatch[1], version: sMatch[2] };
  }
  var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent);
  if (awkMatch) {
    return { type: awkMatch[1], version: awkMatch[2] };
  }
  var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent);
  if (anyMatch) {
    return { type: anyMatch[1], version: anyMatch[2] };
  }
  return { type: "", version: "" };
}

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/index.js
var ClientDevice = function() {
  function ClientDevice2() {
  }
  ClientDevice2.clientInfo = function() {
    return clientInfo();
  };
  ClientDevice2.dimension = function() {
    return dimension();
  };
  return ClientDevice2;
}();

// node_modules/@aws-amplify/core/lib-esm/Hub.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread2 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read3(arguments[i]));
  return ar;
};
var logger3 = new ConsoleLogger("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
  return callback.onHubCapsule !== void 0;
}
var HubClass = function() {
  function HubClass2(name) {
    this.listeners = [];
    this.patterns = [];
    this.protectedChannels = [
      "core",
      "auth",
      "api",
      "analytics",
      "interactions",
      "pubsub",
      "storage",
      "ui",
      "xr"
    ];
    this.name = name;
  }
  HubClass2.prototype.remove = function(channel, listener) {
    if (channel instanceof RegExp) {
      var pattern_1 = this.patterns.find(function(_a) {
        var pattern = _a.pattern;
        return pattern.source === channel.source;
      });
      if (!pattern_1) {
        logger3.warn("No listeners for " + channel);
        return;
      }
      this.patterns = __spread2(this.patterns.filter(function(x) {
        return x !== pattern_1;
      }));
    } else {
      var holder = this.listeners[channel];
      if (!holder) {
        logger3.warn("No listeners for " + channel);
        return;
      }
      this.listeners[channel] = __spread2(holder.filter(function(_a) {
        var callback = _a.callback;
        return callback !== listener;
      }));
    }
  };
  HubClass2.prototype.dispatch = function(channel, payload, source, ampSymbol) {
    if (source === void 0) {
      source = "";
    }
    if (this.protectedChannels.indexOf(channel) > -1) {
      var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
      if (!hasAccess) {
        logger3.warn("WARNING: " + channel + " is protected and dispatching on it can have unintended consequences");
      }
    }
    var capsule = {
      channel,
      payload: __assign({}, payload),
      source,
      patternInfo: []
    };
    try {
      this._toListeners(capsule);
    } catch (e) {
      logger3.error(e);
    }
  };
  HubClass2.prototype.listen = function(channel, callback, listenerName) {
    var _this = this;
    if (listenerName === void 0) {
      listenerName = "noname";
    }
    var cb;
    if (isLegacyCallback(callback)) {
      logger3.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
      cb = callback.onHubCapsule.bind(callback);
    } else if (typeof callback !== "function") {
      throw new Error("No callback supplied to Hub");
    } else {
      cb = callback;
    }
    if (channel instanceof RegExp) {
      this.patterns.push({
        pattern: channel,
        callback: cb
      });
    } else {
      var holder = this.listeners[channel];
      if (!holder) {
        holder = [];
        this.listeners[channel] = holder;
      }
      holder.push({
        name: listenerName,
        callback: cb
      });
    }
    return function() {
      _this.remove(channel, cb);
    };
  };
  HubClass2.prototype._toListeners = function(capsule) {
    var channel = capsule.channel, payload = capsule.payload;
    var holder = this.listeners[channel];
    if (holder) {
      holder.forEach(function(listener) {
        logger3.debug("Dispatching to " + channel + " with ", payload);
        try {
          listener.callback(capsule);
        } catch (e) {
          logger3.error(e);
        }
      });
    }
    if (this.patterns.length > 0) {
      if (!payload.message) {
        logger3.warn("Cannot perform pattern matching without a message key");
        return;
      }
      var payloadStr_1 = payload.message;
      this.patterns.forEach(function(pattern) {
        var match = payloadStr_1.match(pattern.pattern);
        if (match) {
          var _a = __read3(match), groups = _a.slice(1);
          var dispatchingCapsule = __assign(__assign({}, capsule), { patternInfo: groups });
          try {
            pattern.callback(dispatchingCapsule);
          } catch (e) {
            logger3.error(e);
          }
        }
      });
    }
  };
  return HubClass2;
}();
var Hub = new HubClass("__default__");

// node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
var logger4 = new ConsoleLogger("I18n");
var I18n = function() {
  function I18n3(options) {
    this._options = null;
    this._lang = null;
    this._dict = {};
    this._options = Object.assign({}, options);
    this._lang = this._options.language;
    if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
      this._lang = window.navigator.language;
    }
    logger4.debug(this._lang);
  }
  I18n3.prototype.setLanguage = function(lang) {
    this._lang = lang;
  };
  I18n3.prototype.get = function(key, defVal) {
    if (defVal === void 0) {
      defVal = void 0;
    }
    if (!this._lang) {
      return typeof defVal !== "undefined" ? defVal : key;
    }
    var lang = this._lang;
    var val = this.getByLanguage(key, lang);
    if (val) {
      return val;
    }
    if (lang.indexOf("-") > 0) {
      val = this.getByLanguage(key, lang.split("-")[0]);
    }
    if (val) {
      return val;
    }
    return typeof defVal !== "undefined" ? defVal : key;
  };
  I18n3.prototype.getByLanguage = function(key, language, defVal) {
    if (defVal === void 0) {
      defVal = null;
    }
    if (!language) {
      return defVal;
    }
    var lang_dict = this._dict[language];
    if (!lang_dict) {
      return defVal;
    }
    return lang_dict[key];
  };
  I18n3.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
    var lang_dict = this._dict[language];
    if (!lang_dict) {
      lang_dict = this._dict[language] = {};
    }
    Object.assign(lang_dict, vocabularies);
  };
  I18n3.prototype.putVocabularies = function(vocabularies) {
    var _this = this;
    Object.keys(vocabularies).map(function(key) {
      _this.putVocabulariesForLanguage(key, vocabularies[key]);
    });
  };
  return I18n3;
}();

// node_modules/@aws-amplify/core/lib-esm/I18n/index.js
var logger5 = new ConsoleLogger("I18n");
var _config = null;
var _i18n = null;
var I18n2 = function() {
  function I18n3() {
  }
  I18n3.configure = function(config) {
    logger5.debug("configure I18n");
    if (!config) {
      return _config;
    }
    _config = Object.assign({}, _config, config.I18n || config);
    I18n3.createInstance();
    return _config;
  };
  I18n3.getModuleName = function() {
    return "I18n";
  };
  I18n3.createInstance = function() {
    logger5.debug("create I18n instance");
    if (_i18n) {
      return;
    }
    _i18n = new I18n(_config);
  };
  I18n3.setLanguage = function(lang) {
    I18n3.checkConfig();
    return _i18n.setLanguage(lang);
  };
  I18n3.get = function(key, defVal) {
    if (!I18n3.checkConfig()) {
      return typeof defVal === "undefined" ? key : defVal;
    }
    return _i18n.get(key, defVal);
  };
  I18n3.putVocabulariesForLanguage = function(language, vocabularies) {
    I18n3.checkConfig();
    return _i18n.putVocabulariesForLanguage(language, vocabularies);
  };
  I18n3.putVocabularies = function(vocabularies) {
    I18n3.checkConfig();
    return _i18n.putVocabularies(vocabularies);
  };
  I18n3.checkConfig = function() {
    if (!_i18n) {
      _i18n = new I18n(_config);
    }
    return true;
  };
  return I18n3;
}();
Amplify.register(I18n2);

// node_modules/@aws-amplify/core/lib-esm/JS.js
var MIME_MAP = [
  { type: "text/plain", ext: "txt" },
  { type: "text/html", ext: "html" },
  { type: "text/javascript", ext: "js" },
  { type: "text/css", ext: "css" },
  { type: "text/csv", ext: "csv" },
  { type: "text/yaml", ext: "yml" },
  { type: "text/yaml", ext: "yaml" },
  { type: "text/calendar", ext: "ics" },
  { type: "text/calendar", ext: "ical" },
  { type: "image/apng", ext: "apng" },
  { type: "image/bmp", ext: "bmp" },
  { type: "image/gif", ext: "gif" },
  { type: "image/x-icon", ext: "ico" },
  { type: "image/x-icon", ext: "cur" },
  { type: "image/jpeg", ext: "jpg" },
  { type: "image/jpeg", ext: "jpeg" },
  { type: "image/jpeg", ext: "jfif" },
  { type: "image/jpeg", ext: "pjp" },
  { type: "image/jpeg", ext: "pjpeg" },
  { type: "image/png", ext: "png" },
  { type: "image/svg+xml", ext: "svg" },
  { type: "image/tiff", ext: "tif" },
  { type: "image/tiff", ext: "tiff" },
  { type: "image/webp", ext: "webp" },
  { type: "application/json", ext: "json" },
  { type: "application/xml", ext: "xml" },
  { type: "application/x-sh", ext: "sh" },
  { type: "application/zip", ext: "zip" },
  { type: "application/x-rar-compressed", ext: "rar" },
  { type: "application/x-tar", ext: "tar" },
  { type: "application/x-bzip", ext: "bz" },
  { type: "application/x-bzip2", ext: "bz2" },
  { type: "application/pdf", ext: "pdf" },
  { type: "application/java-archive", ext: "jar" },
  { type: "application/msword", ext: "doc" },
  { type: "application/vnd.ms-excel", ext: "xls" },
  { type: "application/vnd.ms-excel", ext: "xlsx" },
  { type: "message/rfc822", ext: "eml" }
];
var isEmpty = function(obj) {
  if (obj === void 0) {
    obj = {};
  }
  return Object.keys(obj).length === 0;
};
var sortByField = function(list, field, dir) {
  if (!list || !list.sort) {
    return false;
  }
  var dirX = dir && dir === "desc" ? -1 : 1;
  list.sort(function(a, b) {
    var a_val = a[field];
    var b_val = b[field];
    if (typeof b_val === "undefined") {
      return typeof a_val === "undefined" ? 0 : 1 * dirX;
    }
    if (typeof a_val === "undefined") {
      return -1 * dirX;
    }
    if (a_val < b_val) {
      return -1 * dirX;
    }
    if (a_val > b_val) {
      return 1 * dirX;
    }
    return 0;
  });
  return true;
};
var objectLessAttributes = function(obj, less) {
  var ret = Object.assign({}, obj);
  if (less) {
    if (typeof less === "string") {
      delete ret[less];
    } else {
      less.forEach(function(attr) {
        delete ret[attr];
      });
    }
  }
  return ret;
};
var filenameToContentType = function(filename, defVal) {
  if (defVal === void 0) {
    defVal = "application/octet-stream";
  }
  var name = filename.toLowerCase();
  var filtered = MIME_MAP.filter(function(mime) {
    return name.endsWith("." + mime.ext);
  });
  return filtered.length > 0 ? filtered[0].type : defVal;
};
var isTextFile = function(contentType) {
  var type = contentType.toLowerCase();
  if (type.startsWith("text/")) {
    return true;
  }
  return "application/json" === type || "application/xml" === type || "application/sh" === type;
};
var generateRandomString = function() {
  var result = "";
  var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (var i = 32; i > 0; i -= 1) {
    result += chars[Math.floor(Math.random() * chars.length)];
  }
  return result;
};
var makeQuerablePromise = function(promise) {
  if (promise.isResolved)
    return promise;
  var isPending = true;
  var isRejected = false;
  var isFullfilled = false;
  var result = promise.then(function(data) {
    isFullfilled = true;
    isPending = false;
    return data;
  }, function(e) {
    isRejected = true;
    isPending = false;
    throw e;
  });
  result.isFullfilled = function() {
    return isFullfilled;
  };
  result.isPending = function() {
    return isPending;
  };
  result.isRejected = function() {
    return isRejected;
  };
  return result;
};
var isWebWorker = function() {
  if (typeof self === "undefined") {
    return false;
  }
  var selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined";
  var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
  return {
    isBrowser: isBrowser2,
    isNode
  };
};
var transferKeyToLowerCase = function(obj, whiteListForItself, whiteListForChildren) {
  if (whiteListForItself === void 0) {
    whiteListForItself = [];
  }
  if (whiteListForChildren === void 0) {
    whiteListForChildren = [];
  }
  if (!isStrictObject(obj))
    return obj;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      var transferedKey = whiteListForItself.includes(key) ? key : key[0].toLowerCase() + key.slice(1);
      ret[transferedKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
    }
  }
  return ret;
};
var transferKeyToUpperCase = function(obj, whiteListForItself, whiteListForChildren) {
  if (whiteListForItself === void 0) {
    whiteListForItself = [];
  }
  if (whiteListForChildren === void 0) {
    whiteListForChildren = [];
  }
  if (!isStrictObject(obj))
    return obj;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      var transferredKey = whiteListForItself.includes(key) ? key : key[0].toUpperCase() + key.slice(1);
      ret[transferredKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
    }
  }
  return ret;
};
var isStrictObject = function(obj) {
  return obj instanceof Object && !(obj instanceof Array) && !(obj instanceof Function) && !(obj instanceof Number) && !(obj instanceof String) && !(obj instanceof Boolean);
};
var JS = function() {
  function JS2() {
  }
  JS2.isEmpty = isEmpty;
  JS2.sortByField = sortByField;
  JS2.objectLessAttributes = objectLessAttributes;
  JS2.filenameToContentType = filenameToContentType;
  JS2.isTextFile = isTextFile;
  JS2.generateRandomString = generateRandomString;
  JS2.makeQuerablePromise = makeQuerablePromise;
  JS2.isWebWorker = isWebWorker;
  JS2.browserOrNode = browserOrNode;
  JS2.transferKeyToLowerCase = transferKeyToLowerCase;
  JS2.transferKeyToUpperCase = transferKeyToUpperCase;
  JS2.isStrictObject = isStrictObject;
  return JS2;
}();

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var import_sha256_js = __toESM(require_build());

// node_modules/@aws-sdk/util-hex-encoding/dist/es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (i = 0; i < 256; i++) {
  encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX[i] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i;
}
var encodedByte;
var i;
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  var out = new Uint8Array(encoded.length / 2);
  for (var i = 0; i < encoded.length; i += 2) {
    var encodedByte = encoded.substr(i, 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
    }
  }
  return out;
}
function toHex(bytes) {
  var out = "";
  for (var i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX[bytes[i]];
  }
  return out;
}

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var import_url = __toESM(require_url());

// node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
var __extends = function() {
  var extendStatics6 = function(d, b) {
    extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics6(d, b);
  };
  return function(d, b) {
    extendStatics6(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread3 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read4(arguments[i]));
  return ar;
};
var logger6 = new ConsoleLogger("Util");
var NonRetryableError = function(_super) {
  __extends(NonRetryableError2, _super);
  function NonRetryableError2(message) {
    var _this = _super.call(this, message) || this;
    _this.nonRetryable = true;
    return _this;
  }
  return NonRetryableError2;
}(Error);
var isNonRetryableError = function(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, attempt) {
  if (attempt === void 0) {
    attempt = 1;
  }
  return __awaiter(this, void 0, void 0, function() {
    var err_1, retryIn_1;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (typeof functionToRetry !== "function") {
            throw Error("functionToRetry must be a function");
          }
          logger6.debug(functionToRetry.name + " attempt #" + attempt + " with this vars: " + JSON.stringify(args));
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, , 8]);
          return [4, functionToRetry.apply(void 0, __spread3(args))];
        case 2:
          return [2, _a.sent()];
        case 3:
          err_1 = _a.sent();
          logger6.debug("error on " + functionToRetry.name, err_1);
          if (isNonRetryableError(err_1)) {
            logger6.debug(functionToRetry.name + " non retryable error", err_1);
            throw err_1;
          }
          retryIn_1 = delayFn(attempt, args, err_1);
          logger6.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
          if (!(retryIn_1 !== false))
            return [3, 6];
          return [4, new Promise(function(res) {
            return setTimeout(res, retryIn_1);
          })];
        case 4:
          _a.sent();
          return [4, retry(functionToRetry, args, delayFn, attempt + 1)];
        case 5:
          return [2, _a.sent()];
        case 6:
          throw err_1;
        case 7:
          return [3, 8];
        case 8:
          return [2];
      }
    });
  });
}
var MAX_DELAY_MS = 5 * 60 * 1e3;
function jitteredBackoff(maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
};

// node_modules/@aws-amplify/core/lib-esm/Util/Mutex.js
var Mutex = function() {
  function Mutex2() {
    this._queue = [];
    this._pending = false;
  }
  Mutex2.prototype.isLocked = function() {
    return this._pending;
  };
  Mutex2.prototype.acquire = function() {
    var _this = this;
    var ticket = new Promise(function(resolve) {
      return _this._queue.push(resolve);
    });
    if (!this._pending) {
      this._dispatchNext();
    }
    return ticket;
  };
  Mutex2.prototype.runExclusive = function(callback) {
    return this.acquire().then(function(release) {
      var result;
      try {
        result = callback();
      } catch (e) {
        release();
        throw e;
      }
      return Promise.resolve(result).then(function(x) {
        return release(), x;
      }, function(e) {
        release();
        throw e;
      });
    });
  };
  Mutex2.prototype._dispatchNext = function() {
    if (this._queue.length > 0) {
      this._pending = true;
      this._queue.shift()(this._dispatchNext.bind(this));
    } else {
      this._pending = false;
    }
  };
  return Mutex2;
}();
var Mutex_default = Mutex;

// node_modules/@aws-amplify/core/lib-esm/Platform/version.js
var version = "4.7.5";

// node_modules/@aws-amplify/core/lib-esm/Platform/index.js
var BASE_USER_AGENT = "aws-amplify/" + version;
var Platform = {
  userAgent: BASE_USER_AGENT + " js",
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform.product = navigator.product || "";
  Platform.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform.userAgent = BASE_USER_AGENT + " react-native";
      Platform.isReactNative = true;
      break;
    default:
      Platform.userAgent = BASE_USER_AGENT + " js";
      Platform.isReactNative = false;
      break;
  }
}
var getAmplifyUserAgent = function(content) {
  return "" + Platform.userAgent + (content ? content : "");
};

// node_modules/@aws-amplify/core/lib-esm/Parser.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var logger7 = new ConsoleLogger("Parser");
var parseMobileHubConfig = function(config) {
  var amplifyConfig = {};
  if (config["aws_mobile_analytics_app_id"]) {
    var Analytics = {
      AWSPinpoint: {
        appId: config["aws_mobile_analytics_app_id"],
        region: config["aws_mobile_analytics_app_region"]
      }
    };
    amplifyConfig.Analytics = Analytics;
  }
  if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) {
    amplifyConfig.Auth = {
      userPoolId: config["aws_user_pools_id"],
      userPoolWebClientId: config["aws_user_pools_web_client_id"],
      region: config["aws_cognito_region"],
      identityPoolId: config["aws_cognito_identity_pool_id"],
      identityPoolRegion: config["aws_cognito_region"],
      mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
      signUpVerificationMethod: config["aws_cognito_sign_up_verification_method"] || "code"
    };
  }
  var storageConfig;
  if (config["aws_user_files_s3_bucket"]) {
    storageConfig = {
      AWSS3: {
        bucket: config["aws_user_files_s3_bucket"],
        region: config["aws_user_files_s3_bucket_region"],
        dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
      }
    };
  } else {
    storageConfig = config ? config.Storage || config : {};
  }
  if (config["Logging"]) {
    amplifyConfig.Logging = __assign2(__assign2({}, config["Logging"]), { region: config["aws_project_region"] });
  }
  if (config["geo"]) {
    amplifyConfig.Geo = Object.assign({}, config.geo);
    if (config.geo["amazon_location_service"]) {
      amplifyConfig.Geo = {
        AmazonLocationService: config.geo["amazon_location_service"]
      };
    }
  }
  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
  amplifyConfig.Storage = Object.assign({}, storageConfig);
  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
  logger7.debug("parse config", config, "to amplifyconfig", amplifyConfig);
  return amplifyConfig;
};
var Parser = function() {
  function Parser3() {
  }
  Parser3.parseMobilehubConfig = parseMobileHubConfig;
  return Parser3;
}();

// node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign3 = function() {
  __assign3 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read5(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/package.json
var package_default = {
  name: "@aws-sdk/client-cloudwatch-logs",
  description: "AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    test: "exit 0",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cloudwatch-logs"
  }
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build6());

// node_modules/tslib/tslib.es6.js
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends3(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign4 = function() {
  __assign4 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read6(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread4() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read6(arguments[i]));
  return ar;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpResponse.js
var HttpResponse = function() {
  function HttpResponse3(options) {
    this.statusCode = options.statusCode;
    this.headers = options.headers || {};
    this.body = options.body;
  }
  HttpResponse3.isInstance = function(response) {
    if (!response)
      return false;
    var resp = response;
    return typeof resp.statusCode === "number" && typeof resp.headers === "object";
  };
  return HttpResponse3;
}();

// node_modules/@aws-sdk/protocol-http/dist/es/httpRequest.js
var HttpRequest = function() {
  function HttpRequest3(options) {
    this.method = options.method || "GET";
    this.hostname = options.hostname || "localhost";
    this.port = options.port;
    this.query = options.query || {};
    this.headers = options.headers || {};
    this.body = options.body;
    this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
    this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
  }
  HttpRequest3.isInstance = function(request) {
    if (!request)
      return false;
    var req = request;
    return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
  };
  HttpRequest3.prototype.clone = function() {
    var cloned = new HttpRequest3(__assign4(__assign4({}, this), { headers: __assign4({}, this.headers) }));
    if (cloned.query)
      cloned.query = cloneQuery(cloned.query);
    return cloned;
  };
  return HttpRequest3;
}();
function cloneQuery(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign4(__assign4({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread4(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/util-uri-escape/dist/es/escape-uri.js
var escapeUri = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
  return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/querystring-builder/dist/es/index.js
function buildQueryString(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values2(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri(key);
      if (Array.isArray(value)) {
        for (var i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(key + "=" + escapeUri(value[i]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/request-timeout.js
function requestTimeout(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/fetch-http-handler.js
var FetchHttpHandler = function() {
  function FetchHttpHandler3(_a) {
    var _b = _a === void 0 ? {} : _a, requestTimeout3 = _b.requestTimeout;
    this.requestTimeout = requestTimeout3;
  }
  FetchHttpHandler3.prototype.destroy = function() {
  };
  FetchHttpHandler3.prototype.handle = function(request, _a) {
    var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
    var requestTimeoutInMs = this.requestTimeout;
    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
      var abortError = new Error("Request aborted");
      abortError.name = "AbortError";
      return Promise.reject(abortError);
    }
    var path = request.path;
    if (request.query) {
      var queryString = buildQueryString(request.query);
      if (queryString) {
        path += "?" + queryString;
      }
    }
    var port = request.port, method = request.method;
    var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
    var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
    var requestOptions = {
      body,
      headers: new Headers(request.headers),
      method
    };
    if (typeof AbortController !== "undefined") {
      requestOptions["signal"] = abortSignal;
    }
    var fetchRequest = new Request(url, requestOptions);
    var raceOfPromises = [
      fetch(fetchRequest).then(function(response) {
        var e_1, _a2;
        var fetchHeaders = response.headers;
        var transformedHeaders = {};
        try {
          for (var _b2 = __values2(fetchHeaders.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
            var pair = _c.value;
            transformedHeaders[pair[0]] = pair[1];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b2.return))
              _a2.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var hasReadableStream = response.body !== void 0;
        if (!hasReadableStream) {
          return response.blob().then(function(body2) {
            return {
              response: new HttpResponse({
                headers: transformedHeaders,
                statusCode: response.status,
                body: body2
              })
            };
          });
        }
        return {
          response: new HttpResponse({
            headers: transformedHeaders,
            statusCode: response.status,
            body: response.body
          })
        };
      }),
      requestTimeout(requestTimeoutInMs)
    ];
    if (abortSignal) {
      raceOfPromises.push(new Promise(function(resolve, reject) {
        abortSignal.onabort = function() {
          var abortError2 = new Error("Request aborted");
          abortError2.name = "AbortError";
          reject(abortError2);
        };
      }));
    }
    return Promise.race(raceOfPromises);
  };
  return FetchHttpHandler3;
}();

// node_modules/@aws-sdk/util-base64-browser/dist/es/index.js
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for (i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  alphabetByEncoding[char] = i;
  alphabetByValue[i] = char;
}
var char;
var i;
var start;
var limit;
for (i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  index = i + 26;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
var start;
var limit;
for (i = 0; i < 10; i++) {
  alphabetByEncoding[i.toString(10)] = i + 52;
  char = i.toString(10);
  index = i + 52;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i = 0; i < input.length; i += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = i + 3; j <= limit; j++) {
      if (input[j] !== "=") {
        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
        bitLength += bitsPerLetter;
      } else {
        bits >>= bitsPerLetter;
      }
    }
    var chunkOffset = i / 4 * 3;
    bits >>= bitLength % bitsPerByte;
    var byteLength = Math.floor(bitLength / bitsPerByte);
    for (var k = 0; k < byteLength; k++) {
      var offset = (byteLength - k - 1) * bitsPerByte;
      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase64(input) {
  var str = "";
  for (var i = 0; i < input.length; i += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
      bits |= input[j] << (limit - j - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (var k = 1; k <= bitClusterCount; k++) {
      var offset = (bitClusterCount - k) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/stream-collector.js
var streamCollector = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob(stream);
  }
  return collectStream(stream);
};
function collectBlob(blob) {
  return __awaiter3(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator3(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase64(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase64(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream(stream) {
  return __awaiter3(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator3(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase64(blob) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/invalid-dependency/dist/es/invalidProvider.js
var invalidProvider = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryMiddleware.js
var retryMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter3(void 0, void 0, void 0, function() {
        var _a;
        return __generator3(this, function(_b) {
          if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode)
            context.userAgent = __spread4(context.userAgent || [], [["cfg/retry-mode", options.retryStrategy.mode]]);
          return [2, options.retryStrategy.retry(next, args)];
        });
      });
    };
  };
};
var retryMiddlewareOptions = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/constants.js
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

// node_modules/@aws-sdk/service-error-classification/dist/es/constants.js
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

// node_modules/@aws-sdk/service-error-classification/dist/es/index.js
var isRetryableByTrait = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError = function(error) {
  return CLOCK_SKEW_ERROR_CODES.includes(error.name);
};
var isThrottlingError = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var import_uuid = __toESM(require_uuid());

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultRetryQuota.js
var getDefaultRetryQuota = function(initialRetryTokens) {
  var MAX_CAPACITY = initialRetryTokens;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/middleware-retry/dist/es/delayDecider.js
var defaultDelayDecider = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryDecider.js
var defaultRetryDecider = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = "standard";
var StandardRetryStrategy = function() {
  function StandardRetryStrategy3(maxAttemptsProvider, options) {
    var _a, _b, _c;
    this.maxAttemptsProvider = maxAttemptsProvider;
    this.mode = DEFAULT_RETRY_MODE;
    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
  }
  StandardRetryStrategy3.prototype.shouldRetry = function(error, attempts, maxAttempts) {
    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
  };
  StandardRetryStrategy3.prototype.getMaxAttempts = function() {
    return __awaiter3(this, void 0, void 0, function() {
      var maxAttempts, error_1;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, this.maxAttemptsProvider()];
          case 1:
            maxAttempts = _a.sent();
            return [3, 3];
          case 2:
            error_1 = _a.sent();
            maxAttempts = DEFAULT_MAX_ATTEMPTS;
            return [3, 3];
          case 3:
            return [2, maxAttempts];
        }
      });
    });
  };
  StandardRetryStrategy3.prototype.retry = function(next, args) {
    return __awaiter3(this, void 0, void 0, function() {
      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            attempts = 0;
            totalDelay = 0;
            return [4, this.getMaxAttempts()];
          case 1:
            maxAttempts = _a.sent();
            request = args.request;
            if (HttpRequest.isInstance(request)) {
              request.headers[INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
            }
            _loop_1 = function() {
              var _a2, response, output, err_1, delay_1;
              return __generator3(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    _b.trys.push([0, 2, , 5]);
                    if (HttpRequest.isInstance(request)) {
                      request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                    }
                    return [4, next(args)];
                  case 1:
                    _a2 = _b.sent(), response = _a2.response, output = _a2.output;
                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalDelay;
                    return [2, { value: { response, output } }];
                  case 2:
                    err_1 = _b.sent();
                    attempts++;
                    if (!this_1.shouldRetry(err_1, attempts, maxAttempts))
                      return [3, 4];
                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                    delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                    totalDelay += delay_1;
                    return [4, new Promise(function(resolve) {
                      return setTimeout(resolve, delay_1);
                    })];
                  case 3:
                    _b.sent();
                    return [2, "continue"];
                  case 4:
                    if (!err_1.$metadata) {
                      err_1.$metadata = {};
                    }
                    err_1.$metadata.attempts = attempts;
                    err_1.$metadata.totalRetryDelay = totalDelay;
                    throw err_1;
                  case 5:
                    return [2];
                }
              });
            };
            this_1 = this;
            _a.label = 2;
          case 2:
            if (false)
              return [3, 4];
            return [5, _loop_1()];
          case 3:
            state_1 = _a.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            return [3, 2];
          case 4:
            return [2];
        }
      });
    });
  };
  return StandardRetryStrategy3;
}();

// node_modules/@aws-sdk/middleware-retry/dist/es/configurations.js
var resolveRetryConfig = function(input) {
  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
  return __assign4(__assign4({}, input), { maxAttempts, retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts) });
};
var normalizeMaxAttempts = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/util-body-length-browser/dist/es/index.js
function calculateBodyLength(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i = len - 1; i >= 0; i--) {
      var code = body.charCodeAt(i);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/bowser/src/constants.js
var BROWSER_ALIASES_MAP = {
  "Amazon Silk": "amazon_silk",
  "Android Browser": "android",
  Bada: "bada",
  BlackBerry: "blackberry",
  Chrome: "chrome",
  Chromium: "chromium",
  Electron: "electron",
  Epiphany: "epiphany",
  Firefox: "firefox",
  Focus: "focus",
  Generic: "generic",
  "Google Search": "google_search",
  Googlebot: "googlebot",
  "Internet Explorer": "ie",
  "K-Meleon": "k_meleon",
  Maxthon: "maxthon",
  "Microsoft Edge": "edge",
  "MZ Browser": "mz",
  "NAVER Whale Browser": "naver",
  Opera: "opera",
  "Opera Coast": "opera_coast",
  PhantomJS: "phantomjs",
  Puffin: "puffin",
  QupZilla: "qupzilla",
  QQ: "qq",
  QQLite: "qqlite",
  Safari: "safari",
  Sailfish: "sailfish",
  "Samsung Internet for Android": "samsung_internet",
  SeaMonkey: "seamonkey",
  Sleipnir: "sleipnir",
  Swing: "swing",
  Tizen: "tizen",
  "UC Browser": "uc",
  Vivaldi: "vivaldi",
  "WebOS Browser": "webos",
  WeChat: "wechat",
  "Yandex Browser": "yandex",
  Roku: "roku"
};
var BROWSER_MAP = {
  amazon_silk: "Amazon Silk",
  android: "Android Browser",
  bada: "Bada",
  blackberry: "BlackBerry",
  chrome: "Chrome",
  chromium: "Chromium",
  electron: "Electron",
  epiphany: "Epiphany",
  firefox: "Firefox",
  focus: "Focus",
  generic: "Generic",
  googlebot: "Googlebot",
  google_search: "Google Search",
  ie: "Internet Explorer",
  k_meleon: "K-Meleon",
  maxthon: "Maxthon",
  edge: "Microsoft Edge",
  mz: "MZ Browser",
  naver: "NAVER Whale Browser",
  opera: "Opera",
  opera_coast: "Opera Coast",
  phantomjs: "PhantomJS",
  puffin: "Puffin",
  qupzilla: "QupZilla",
  qq: "QQ Browser",
  qqlite: "QQ Browser Lite",
  safari: "Safari",
  sailfish: "Sailfish",
  samsung_internet: "Samsung Internet for Android",
  seamonkey: "SeaMonkey",
  sleipnir: "Sleipnir",
  swing: "Swing",
  tizen: "Tizen",
  uc: "UC Browser",
  vivaldi: "Vivaldi",
  webos: "WebOS Browser",
  wechat: "WeChat",
  yandex: "Yandex Browser"
};
var PLATFORMS_MAP = {
  tablet: "tablet",
  mobile: "mobile",
  desktop: "desktop",
  tv: "tv"
};
var OS_MAP = {
  WindowsPhone: "Windows Phone",
  Windows: "Windows",
  MacOS: "macOS",
  iOS: "iOS",
  Android: "Android",
  WebOS: "WebOS",
  BlackBerry: "BlackBerry",
  Bada: "Bada",
  Tizen: "Tizen",
  Linux: "Linux",
  ChromeOS: "Chrome OS",
  PlayStation4: "PlayStation 4",
  Roku: "Roku"
};
var ENGINE_MAP = {
  EdgeHTML: "EdgeHTML",
  Blink: "Blink",
  Trident: "Trident",
  Presto: "Presto",
  Gecko: "Gecko",
  WebKit: "WebKit"
};

// node_modules/bowser/src/utils.js
var Utils = class {
  static getFirstMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 0 && match[1] || "";
  }
  static getSecondMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 1 && match[2] || "";
  }
  static matchAndReturnConst(regexp, ua, _const) {
    if (regexp.test(ua)) {
      return _const;
    }
    return void 0;
  }
  static getWindowsVersionName(version2) {
    switch (version2) {
      case "NT":
        return "NT";
      case "XP":
        return "XP";
      case "NT 5.0":
        return "2000";
      case "NT 5.1":
        return "XP";
      case "NT 5.2":
        return "2003";
      case "NT 6.0":
        return "Vista";
      case "NT 6.1":
        return "7";
      case "NT 6.2":
        return "8";
      case "NT 6.3":
        return "8.1";
      case "NT 10.0":
        return "10";
      default:
        return void 0;
    }
  }
  static getMacOSVersionName(version2) {
    const v = version2.split(".").splice(0, 2).map((s) => parseInt(s, 10) || 0);
    v.push(0);
    if (v[0] !== 10)
      return void 0;
    switch (v[1]) {
      case 5:
        return "Leopard";
      case 6:
        return "Snow Leopard";
      case 7:
        return "Lion";
      case 8:
        return "Mountain Lion";
      case 9:
        return "Mavericks";
      case 10:
        return "Yosemite";
      case 11:
        return "El Capitan";
      case 12:
        return "Sierra";
      case 13:
        return "High Sierra";
      case 14:
        return "Mojave";
      case 15:
        return "Catalina";
      default:
        return void 0;
    }
  }
  static getAndroidVersionName(version2) {
    const v = version2.split(".").splice(0, 2).map((s) => parseInt(s, 10) || 0);
    v.push(0);
    if (v[0] === 1 && v[1] < 5)
      return void 0;
    if (v[0] === 1 && v[1] < 6)
      return "Cupcake";
    if (v[0] === 1 && v[1] >= 6)
      return "Donut";
    if (v[0] === 2 && v[1] < 2)
      return "Eclair";
    if (v[0] === 2 && v[1] === 2)
      return "Froyo";
    if (v[0] === 2 && v[1] > 2)
      return "Gingerbread";
    if (v[0] === 3)
      return "Honeycomb";
    if (v[0] === 4 && v[1] < 1)
      return "Ice Cream Sandwich";
    if (v[0] === 4 && v[1] < 4)
      return "Jelly Bean";
    if (v[0] === 4 && v[1] >= 4)
      return "KitKat";
    if (v[0] === 5)
      return "Lollipop";
    if (v[0] === 6)
      return "Marshmallow";
    if (v[0] === 7)
      return "Nougat";
    if (v[0] === 8)
      return "Oreo";
    if (v[0] === 9)
      return "Pie";
    return void 0;
  }
  static getVersionPrecision(version2) {
    return version2.split(".").length;
  }
  static compareVersions(versionA, versionB, isLoose = false) {
    const versionAPrecision = Utils.getVersionPrecision(versionA);
    const versionBPrecision = Utils.getVersionPrecision(versionB);
    let precision = Math.max(versionAPrecision, versionBPrecision);
    let lastPrecision = 0;
    const chunks = Utils.map([versionA, versionB], (version2) => {
      const delta = precision - Utils.getVersionPrecision(version2);
      const _version = version2 + new Array(delta + 1).join(".0");
      return Utils.map(_version.split("."), (chunk) => new Array(20 - chunk.length).join("0") + chunk).reverse();
    });
    if (isLoose) {
      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
    }
    precision -= 1;
    while (precision >= lastPrecision) {
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }
      if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === lastPrecision) {
          return 0;
        }
        precision -= 1;
      } else if (chunks[0][precision] < chunks[1][precision]) {
        return -1;
      }
    }
    return void 0;
  }
  static map(arr, iterator) {
    const result = [];
    let i;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i = 0; i < arr.length; i += 1) {
      result.push(iterator(arr[i]));
    }
    return result;
  }
  static find(arr, predicate) {
    let i;
    let l;
    if (Array.prototype.find) {
      return Array.prototype.find.call(arr, predicate);
    }
    for (i = 0, l = arr.length; i < l; i += 1) {
      const value = arr[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  static assign(obj, ...assigners) {
    const result = obj;
    let i;
    let l;
    if (Object.assign) {
      return Object.assign(obj, ...assigners);
    }
    for (i = 0, l = assigners.length; i < l; i += 1) {
      const assigner = assigners[i];
      if (typeof assigner === "object" && assigner !== null) {
        const keys = Object.keys(assigner);
        keys.forEach((key) => {
          result[key] = assigner[key];
        });
      }
    }
    return obj;
  }
  static getBrowserAlias(browserName) {
    return BROWSER_ALIASES_MAP[browserName];
  }
  static getBrowserTypeByAlias(browserAlias) {
    return BROWSER_MAP[browserAlias] || "";
  }
};

// node_modules/bowser/src/parser-browsers.js
var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
var browsersList = [
  {
    test: [/googlebot/i],
    describe(ua) {
      const browser = {
        name: "Googlebot"
      };
      const version2 = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/opera/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/opr\/|opios/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version2 = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/SamsungBrowser/i],
    describe(ua) {
      const browser = {
        name: "Samsung Internet for Android"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/Whale/i],
    describe(ua) {
      const browser = {
        name: "NAVER Whale Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/MZBrowser/i],
    describe(ua) {
      const browser = {
        name: "MZ Browser"
      };
      const version2 = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/focus/i],
    describe(ua) {
      const browser = {
        name: "Focus"
      };
      const version2 = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/swing/i],
    describe(ua) {
      const browser = {
        name: "Swing"
      };
      const version2 = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/coast/i],
    describe(ua) {
      const browser = {
        name: "Opera Coast"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/opt\/\d+(?:.?_?\d+)+/i],
    describe(ua) {
      const browser = {
        name: "Opera Touch"
      };
      const version2 = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/yabrowser/i],
    describe(ua) {
      const browser = {
        name: "Yandex Browser"
      };
      const version2 = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/ucbrowser/i],
    describe(ua) {
      const browser = {
        name: "UC Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/Maxthon|mxios/i],
    describe(ua) {
      const browser = {
        name: "Maxthon"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/epiphany/i],
    describe(ua) {
      const browser = {
        name: "Epiphany"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/puffin/i],
    describe(ua) {
      const browser = {
        name: "Puffin"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/sleipnir/i],
    describe(ua) {
      const browser = {
        name: "Sleipnir"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/k-meleon/i],
    describe(ua) {
      const browser = {
        name: "K-Meleon"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/micromessenger/i],
    describe(ua) {
      const browser = {
        name: "WeChat"
      };
      const version2 = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/qqbrowser/i],
    describe(ua) {
      const browser = {
        name: /qqbrowserlite/i.test(ua) ? "QQ Browser Lite" : "QQ Browser"
      };
      const version2 = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/msie|trident/i],
    describe(ua) {
      const browser = {
        name: "Internet Explorer"
      };
      const version2 = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/\sedg\//i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version2 = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/edg([ea]|ios)/i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version2 = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/vivaldi/i],
    describe(ua) {
      const browser = {
        name: "Vivaldi"
      };
      const version2 = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/seamonkey/i],
    describe(ua) {
      const browser = {
        name: "SeaMonkey"
      };
      const version2 = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/sailfish/i],
    describe(ua) {
      const browser = {
        name: "Sailfish"
      };
      const version2 = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/silk/i],
    describe(ua) {
      const browser = {
        name: "Amazon Silk"
      };
      const version2 = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/phantom/i],
    describe(ua) {
      const browser = {
        name: "PhantomJS"
      };
      const version2 = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/slimerjs/i],
    describe(ua) {
      const browser = {
        name: "SlimerJS"
      };
      const version2 = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const browser = {
        name: "BlackBerry"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const browser = {
        name: "WebOS Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/bada/i],
    describe(ua) {
      const browser = {
        name: "Bada"
      };
      const version2 = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/tizen/i],
    describe(ua) {
      const browser = {
        name: "Tizen"
      };
      const version2 = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/qupzilla/i],
    describe(ua) {
      const browser = {
        name: "QupZilla"
      };
      const version2 = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/firefox|iceweasel|fxios/i],
    describe(ua) {
      const browser = {
        name: "Firefox"
      };
      const version2 = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/electron/i],
    describe(ua) {
      const browser = {
        name: "Electron"
      };
      const version2 = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/MiuiBrowser/i],
    describe(ua) {
      const browser = {
        name: "Miui"
      };
      const version2 = Utils.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/chromium/i],
    describe(ua) {
      const browser = {
        name: "Chromium"
      };
      const version2 = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/chrome|crios|crmo/i],
    describe(ua) {
      const browser = {
        name: "Chrome"
      };
      const version2 = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/GSA/i],
    describe(ua) {
      const browser = {
        name: "Google Search"
      };
      const version2 = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const browser = {
        name: "Android Browser"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/playstation 4/i],
    describe(ua) {
      const browser = {
        name: "PlayStation 4"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/safari|applewebkit/i],
    describe(ua) {
      const browser = {
        name: "Safari"
      };
      const version2 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version2) {
        browser.version = version2;
      }
      return browser;
    }
  },
  {
    test: [/.*/i],
    describe(ua) {
      const regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
      const regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
      const hasDeviceSpec = ua.search("\\(") !== -1;
      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
      return {
        name: Utils.getFirstMatch(regexp, ua),
        version: Utils.getSecondMatch(regexp, ua)
      };
    }
  }
];
var parser_browsers_default = browsersList;

// node_modules/bowser/src/parser-os.js
var parser_os_default = [
  {
    test: [/Roku\/DVP/],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
      return {
        name: OS_MAP.Roku,
        version: version2
      };
    }
  },
  {
    test: [/windows phone/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.WindowsPhone,
        version: version2
      };
    }
  },
  {
    test: [/windows /i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
      const versionName = Utils.getWindowsVersionName(version2);
      return {
        name: OS_MAP.Windows,
        version: version2,
        versionName
      };
    }
  },
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe(ua) {
      const result = {
        name: OS_MAP.iOS
      };
      const version2 = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, ua);
      if (version2) {
        result.version = version2;
      }
      return result;
    }
  },
  {
    test: [/macintosh/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, ".");
      const versionName = Utils.getMacOSVersionName(version2);
      const os = {
        name: OS_MAP.MacOS,
        version: version2
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  {
    test: [/(ipod|iphone|ipad)/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, ".");
      return {
        name: OS_MAP.iOS,
        version: version2
      };
    }
  },
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const version2 = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
      const versionName = Utils.getAndroidVersionName(version2);
      const os = {
        name: OS_MAP.Android,
        version: version2
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
      const os = {
        name: OS_MAP.WebOS
      };
      if (version2 && version2.length) {
        os.version = version2;
      }
      return os;
    }
  },
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || Utils.getFirstMatch(/\bbb(\d+)/i, ua);
      return {
        name: OS_MAP.BlackBerry,
        version: version2
      };
    }
  },
  {
    test: [/bada/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Bada,
        version: version2
      };
    }
  },
  {
    test: [/tizen/i],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Tizen,
        version: version2
      };
    }
  },
  {
    test: [/linux/i],
    describe() {
      return {
        name: OS_MAP.Linux
      };
    }
  },
  {
    test: [/CrOS/],
    describe() {
      return {
        name: OS_MAP.ChromeOS
      };
    }
  },
  {
    test: [/PlayStation 4/],
    describe(ua) {
      const version2 = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.PlayStation4,
        version: version2
      };
    }
  }
];

// node_modules/bowser/src/parser-platforms.js
var parser_platforms_default = [
  {
    test: [/googlebot/i],
    describe() {
      return {
        type: "bot",
        vendor: "Google"
      };
    }
  },
  {
    test: [/huawei/i],
    describe(ua) {
      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && "Nova";
      const platform = {
        type: PLATFORMS_MAP.mobile,
        vendor: "Huawei"
      };
      if (model) {
        platform.model = model;
      }
      return platform;
    }
  },
  {
    test: [/nexus\s*(?:7|8|9|10).*/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Nexus"
      };
    }
  },
  {
    test: [/ipad/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  {
    test: [/kftt build/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon",
        model: "Kindle Fire HD 7"
      };
    }
  },
  {
    test: [/silk/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon"
      };
    }
  },
  {
    test: [/tablet(?! pc)/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  {
    test(parser) {
      const iDevice = parser.test(/ipod|iphone/i);
      const likeIDevice = parser.test(/like (ipod|iphone)/i);
      return iDevice && !likeIDevice;
    },
    describe(ua) {
      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Apple",
        model
      };
    }
  },
  {
    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Nexus"
      };
    }
  },
  {
    test: [/[^-]mobi/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  {
    test(parser) {
      return parser.getBrowserName(true) === "blackberry";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "BlackBerry"
      };
    }
  },
  {
    test(parser) {
      return parser.getBrowserName(true) === "bada";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  {
    test(parser) {
      return parser.getBrowserName() === "windows phone";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Microsoft"
      };
    }
  },
  {
    test(parser) {
      const osMajorVersion = Number(String(parser.getOSVersion()).split(".")[0]);
      return parser.getOSName(true) === "android" && osMajorVersion >= 3;
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "android";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "macos";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop,
        vendor: "Apple"
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "windows";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "linux";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "playstation 4";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  },
  {
    test(parser) {
      return parser.getOSName(true) === "roku";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  }
];

// node_modules/bowser/src/parser-engines.js
var parser_engines_default = [
  {
    test(parser) {
      return parser.getBrowserName(true) === "microsoft edge";
    },
    describe(ua) {
      const isBlinkBased = /\sedg\//i.test(ua);
      if (isBlinkBased) {
        return {
          name: ENGINE_MAP.Blink
        };
      }
      const version2 = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);
      return {
        name: ENGINE_MAP.EdgeHTML,
        version: version2
      };
    }
  },
  {
    test: [/trident/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Trident
      };
      const version2 = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  },
  {
    test(parser) {
      return parser.test(/presto/i);
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Presto
      };
      const version2 = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  },
  {
    test(parser) {
      const isGecko = parser.test(/gecko/i);
      const likeGecko = parser.test(/like gecko/i);
      return isGecko && !likeGecko;
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Gecko
      };
      const version2 = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  },
  {
    test: [/(apple)?webkit\/537\.36/i],
    describe() {
      return {
        name: ENGINE_MAP.Blink
      };
    }
  },
  {
    test: [/(apple)?webkit/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.WebKit
      };
      const version2 = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);
      if (version2) {
        engine.version = version2;
      }
      return engine;
    }
  }
];

// node_modules/bowser/src/parser.js
var Parser2 = class {
  constructor(UA, skipParsing = false) {
    if (UA === void 0 || UA === null || UA === "") {
      throw new Error("UserAgent parameter can't be empty");
    }
    this._ua = UA;
    this.parsedResult = {};
    if (skipParsing !== true) {
      this.parse();
    }
  }
  getUA() {
    return this._ua;
  }
  test(regex) {
    return regex.test(this._ua);
  }
  parseBrowser() {
    this.parsedResult.browser = {};
    const browserDescriptor = Utils.find(parser_browsers_default, (_browser) => {
      if (typeof _browser.test === "function") {
        return _browser.test(this);
      }
      if (_browser.test instanceof Array) {
        return _browser.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (browserDescriptor) {
      this.parsedResult.browser = browserDescriptor.describe(this.getUA());
    }
    return this.parsedResult.browser;
  }
  getBrowser() {
    if (this.parsedResult.browser) {
      return this.parsedResult.browser;
    }
    return this.parseBrowser();
  }
  getBrowserName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getBrowser().name).toLowerCase() || "";
    }
    return this.getBrowser().name || "";
  }
  getBrowserVersion() {
    return this.getBrowser().version;
  }
  getOS() {
    if (this.parsedResult.os) {
      return this.parsedResult.os;
    }
    return this.parseOS();
  }
  parseOS() {
    this.parsedResult.os = {};
    const os = Utils.find(parser_os_default, (_os) => {
      if (typeof _os.test === "function") {
        return _os.test(this);
      }
      if (_os.test instanceof Array) {
        return _os.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (os) {
      this.parsedResult.os = os.describe(this.getUA());
    }
    return this.parsedResult.os;
  }
  getOSName(toLowerCase) {
    const { name } = this.getOS();
    if (toLowerCase) {
      return String(name).toLowerCase() || "";
    }
    return name || "";
  }
  getOSVersion() {
    return this.getOS().version;
  }
  getPlatform() {
    if (this.parsedResult.platform) {
      return this.parsedResult.platform;
    }
    return this.parsePlatform();
  }
  getPlatformType(toLowerCase = false) {
    const { type } = this.getPlatform();
    if (toLowerCase) {
      return String(type).toLowerCase() || "";
    }
    return type || "";
  }
  parsePlatform() {
    this.parsedResult.platform = {};
    const platform = Utils.find(parser_platforms_default, (_platform) => {
      if (typeof _platform.test === "function") {
        return _platform.test(this);
      }
      if (_platform.test instanceof Array) {
        return _platform.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (platform) {
      this.parsedResult.platform = platform.describe(this.getUA());
    }
    return this.parsedResult.platform;
  }
  getEngine() {
    if (this.parsedResult.engine) {
      return this.parsedResult.engine;
    }
    return this.parseEngine();
  }
  getEngineName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getEngine().name).toLowerCase() || "";
    }
    return this.getEngine().name || "";
  }
  parseEngine() {
    this.parsedResult.engine = {};
    const engine = Utils.find(parser_engines_default, (_engine) => {
      if (typeof _engine.test === "function") {
        return _engine.test(this);
      }
      if (_engine.test instanceof Array) {
        return _engine.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (engine) {
      this.parsedResult.engine = engine.describe(this.getUA());
    }
    return this.parsedResult.engine;
  }
  parse() {
    this.parseBrowser();
    this.parseOS();
    this.parsePlatform();
    this.parseEngine();
    return this;
  }
  getResult() {
    return Utils.assign({}, this.parsedResult);
  }
  satisfies(checkTree) {
    const platformsAndOSes = {};
    let platformsAndOSCounter = 0;
    const browsers = {};
    let browsersCounter = 0;
    const allDefinitions = Object.keys(checkTree);
    allDefinitions.forEach((key) => {
      const currentDefinition = checkTree[key];
      if (typeof currentDefinition === "string") {
        browsers[key] = currentDefinition;
        browsersCounter += 1;
      } else if (typeof currentDefinition === "object") {
        platformsAndOSes[key] = currentDefinition;
        platformsAndOSCounter += 1;
      }
    });
    if (platformsAndOSCounter > 0) {
      const platformsAndOSNames = Object.keys(platformsAndOSes);
      const OSMatchingDefinition = Utils.find(platformsAndOSNames, (name) => this.isOS(name));
      if (OSMatchingDefinition) {
        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);
        if (osResult !== void 0) {
          return osResult;
        }
      }
      const platformMatchingDefinition = Utils.find(
        platformsAndOSNames,
        (name) => this.isPlatform(name)
      );
      if (platformMatchingDefinition) {
        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);
        if (platformResult !== void 0) {
          return platformResult;
        }
      }
    }
    if (browsersCounter > 0) {
      const browserNames = Object.keys(browsers);
      const matchingDefinition = Utils.find(browserNames, (name) => this.isBrowser(name, true));
      if (matchingDefinition !== void 0) {
        return this.compareVersion(browsers[matchingDefinition]);
      }
    }
    return void 0;
  }
  isBrowser(browserName, includingAlias = false) {
    const defaultBrowserName = this.getBrowserName().toLowerCase();
    let browserNameLower = browserName.toLowerCase();
    const alias = Utils.getBrowserTypeByAlias(browserNameLower);
    if (includingAlias && alias) {
      browserNameLower = alias.toLowerCase();
    }
    return browserNameLower === defaultBrowserName;
  }
  compareVersion(version2) {
    let expectedResults = [0];
    let comparableVersion = version2;
    let isLoose = false;
    const currentBrowserVersion = this.getBrowserVersion();
    if (typeof currentBrowserVersion !== "string") {
      return void 0;
    }
    if (version2[0] === ">" || version2[0] === "<") {
      comparableVersion = version2.substr(1);
      if (version2[1] === "=") {
        isLoose = true;
        comparableVersion = version2.substr(2);
      } else {
        expectedResults = [];
      }
      if (version2[0] === ">") {
        expectedResults.push(1);
      } else {
        expectedResults.push(-1);
      }
    } else if (version2[0] === "=") {
      comparableVersion = version2.substr(1);
    } else if (version2[0] === "~") {
      isLoose = true;
      comparableVersion = version2.substr(1);
    }
    return expectedResults.indexOf(
      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)
    ) > -1;
  }
  isOS(osName) {
    return this.getOSName(true) === String(osName).toLowerCase();
  }
  isPlatform(platformType) {
    return this.getPlatformType(true) === String(platformType).toLowerCase();
  }
  isEngine(engineName) {
    return this.getEngineName(true) === String(engineName).toLowerCase();
  }
  is(anything, includingAlias = false) {
    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);
  }
  some(anythings = []) {
    return anythings.some((anything) => this.is(anything));
  }
};
var parser_default = Parser2;

// node_modules/bowser/src/bowser.js
var Bowser = class {
  static getParser(UA, skipParsing = false) {
    if (typeof UA !== "string") {
      throw new Error("UserAgent should be a string");
    }
    return new parser_default(UA, skipParsing);
  }
  static parse(UA) {
    return new parser_default(UA).getResult();
  }
  static get BROWSER_MAP() {
    return BROWSER_MAP;
  }
  static get ENGINE_MAP() {
    return ENGINE_MAP;
  }
  static get OS_MAP() {
    return OS_MAP;
  }
  static get PLATFORMS_MAP() {
    return PLATFORMS_MAP;
  }
};
var bowser_default = Bowser;

// node_modules/@aws-sdk/util-user-agent-browser/dist/es/index.js
var defaultUserAgent = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter3(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator3(this, function(_h) {
        parsedUA = ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
        sections = [
          ["aws-sdk-js", clientVersion],
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          ["lang/js"],
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
init_es2();

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/endpoints.js
var AWS_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "logs.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "logs.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "logs.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_REGIONS = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "af-south-1":
      regionInfo = {
        hostname: "logs.af-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-east-1":
      regionInfo = {
        hostname: "logs.ap-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-1":
      regionInfo = {
        hostname: "logs.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "logs.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "logs.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "logs.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "logs.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "logs.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "logs.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "cn-northwest-1":
      regionInfo = {
        hostname: "logs.cn-northwest-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "logs.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "logs.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-south-1":
      regionInfo = {
        hostname: "logs.eu-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "logs.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "logs.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "logs.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "logs-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "logs-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-west-1":
      regionInfo = {
        hostname: "logs-fips.us-west-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "logs-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "me-south-1":
      regionInfo = {
        hostname: "logs.me-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "logs.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "logs.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "logs.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-east-1":
      regionInfo = {
        hostname: "logs.us-gov-east-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-east-1"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "logs.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "us-iso-east-1":
      regionInfo = {
        hostname: "logs.us-iso-east-1.c2s.ic.gov",
        partition: "aws-iso"
      };
      break;
    case "us-isob-east-1":
      regionInfo = {
        hostname: "logs.us-isob-east-1.sc2s.sgov.gov",
        partition: "aws-iso-b"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "logs.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "logs.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign3({ signingService: "logs" }, regionInfo));
};

// node_modules/@aws-sdk/querystring-parser/dist/es/index.js
function parseQueryString(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values2(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read6(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/url-parser/dist/es/index.js
var parseUrl = function(url) {
  var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.shared.js
var ClientSharedValues = {
  apiVersion: "2014-03-28",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider,
  serviceId: "CloudWatch Logs",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var ClientDefaultValues = __assign3(__assign3({}, ClientSharedValues), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues.serviceId,
  clientVersion: package_default.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser.Sha256, streamCollector, utf8Decoder: fromUtf86, utf8Encoder: toUtf86 });

// node_modules/@aws-sdk/config-resolver/dist/es/EndpointsConfig.js
var resolveEndpointsConfig = function(input) {
  var _a;
  return __assign4(__assign4({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
    return getEndPointFromRegion(input);
  }, isCustomEndpoint: input.endpoint ? true : false });
};
var normalizeEndpoint = function(input) {
  var endpoint = input.endpoint, urlParser = input.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};
var getEndPointFromRegion = function(input) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, hostname;
    var _b;
    return __generator3(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.regionInfoProvider(region)];
        case 2:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/config-resolver/dist/es/RegionConfig.js
var resolveRegionConfig = function(input) {
  if (!input.region) {
    throw new Error("Region is missing");
  }
  return __assign4(__assign4({}, input), { region: normalizeRegion(input.region) });
};
var normalizeRegion = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  }
  return region;
};

// node_modules/@aws-sdk/middleware-content-length/dist/es/index.js
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter3(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator3(this, function(_b) {
          request = args.request;
          if (HttpRequest.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign4(__assign4({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
              }
            }
          }
          return [2, next(__assign4(__assign4({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-host-header/dist/es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter3(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator3(this, function(_b) {
          if (!HttpRequest.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-logger/dist/es/loggerMiddleware.js
var loggerMiddleware = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter3(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger15, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator3(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger15 = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger15) {
                return [2, response];
              }
              if (typeof logger15.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, ["$metadata"]);
                logger15.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/signature-v4/dist/es/constants.js
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER = "aws4_request";
var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/signature-v4/dist/es/credentialDerivation.js
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
}
var getSigningKey = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator3(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache) {
            return [2, signingKeyCache[cacheKey]];
          }
          cacheQueue.push(cacheKey);
          while (cacheQueue.length > MAX_CACHE_SIZE) {
            delete signingKeyCache[cacheQueue.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values2([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 9:
          return [2, signingKeyCache[cacheKey] = key];
      }
    });
  });
};
function hmac(ctor, secret, data) {
  var hash2 = new ctor(secret);
  hash2.update(data);
  return hash2.digest();
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalHeaders.js
function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values2(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalQuery.js
function getCanonicalQuery(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri(key2) + "=" + escapeUri(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri(key2) + "=" + escapeUri(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values2(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
}

// node_modules/@aws-sdk/is-array-buffer/dist/es/index.js
var isArrayBuffer = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/signature-v4/dist/es/getPayloadHash.js
function getPayloadHash(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter3(this, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator3(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values2(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD];
      }
    });
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/hasHeader.js
function hasHeader(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values2(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
}

// node_modules/@aws-sdk/signature-v4/dist/es/cloneRequest.js
function cloneRequest(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest(_a, ["headers", "query"]);
  return __assign4(__assign4({}, rest), { headers: __assign4({}, headers), query: query ? cloneQuery2(query) : void 0 });
}
function cloneQuery2(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign4(__assign4({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread4(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/signature-v4/dist/es/moveHeadersToQuery.js
function moveHeadersToQuery(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values2(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name = _f.value;
      var lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign4(__assign4({}, request), {
    headers,
    query
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/prepareRequest.js
function prepareRequest(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
  try {
    for (var _b = __values2(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
}

// node_modules/@aws-sdk/signature-v4/dist/es/utilDate.js
function iso8601(time) {
  return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
}

// node_modules/@aws-sdk/signature-v4/dist/es/SignatureV4.js
var SignatureV4 = function() {
  function SignatureV43(_a) {
    var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
    this.service = service;
    this.sha256 = sha256;
    this.uriEscapePath = uriEscapePath;
    this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
    this.regionProvider = normalizeRegionProvider(region);
    this.credentialProvider = normalizeCredentialsProvider(credentials);
  }
  SignatureV43.prototype.presign = function(originalRequest, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter3(this, void 0, void 0, function() {
      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
      return __generator3(this, function(_l) {
        switch (_l.label) {
          case 0:
            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
            return [4, this.credentialProvider()];
          case 1:
            credentials = _l.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _c = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _c = _l.sent();
            _l.label = 4;
          case 4:
            region = _c;
            _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
            if (expiresIn > MAX_PRESIGNED_TTL) {
              return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
            }
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
            if (credentials.sessionToken) {
              request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
            }
            request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
            request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
            request.query[AMZ_DATE_QUERY_PARAM] = longDate;
            request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
            request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
            _e = request.query;
            _f = SIGNATURE_QUERY_PARAM;
            _g = this.getSignature;
            _h = [
              longDate,
              scope,
              this.getSigningKey(credentials, region, shortDate, signingService)
            ];
            _j = this.createCanonicalRequest;
            _k = [request, canonicalHeaders];
            return [4, getPayloadHash(originalRequest, this.sha256)];
          case 5:
            return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
          case 6:
            _e[_f] = _l.sent();
            return [2, request];
        }
      });
    });
  };
  SignatureV43.prototype.sign = function(toSign, options) {
    return __awaiter3(this, void 0, void 0, function() {
      return __generator3(this, function(_a) {
        if (typeof toSign === "string") {
          return [2, this.signString(toSign, options)];
        } else if (toSign.headers && toSign.payload) {
          return [2, this.signEvent(toSign, options)];
        } else {
          return [2, this.signRequest(toSign, options)];
        }
        return [2];
      });
    });
  };
  SignatureV43.prototype.signEvent = function(_a, _b) {
    var headers = _a.headers, payload = _a.payload;
    var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter3(this, void 0, void 0, function() {
      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash2, hashedHeaders, _f, stringToSign;
      return __generator3(this, function(_g) {
        switch (_g.label) {
          case 0:
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 1];
            _d = signingRegion;
            return [3, 3];
          case 1:
            return [4, this.regionProvider()];
          case 2:
            _d = _g.sent();
            _g.label = 3;
          case 3:
            region = _d;
            _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
          case 4:
            hashedPayload = _g.sent();
            hash2 = new this.sha256();
            hash2.update(headers);
            _f = toHex;
            return [4, hash2.digest()];
          case 5:
            hashedHeaders = _f.apply(void 0, [_g.sent()]);
            stringToSign = [
              EVENT_ALGORITHM_IDENTIFIER,
              longDate,
              scope,
              priorSignature,
              hashedHeaders,
              hashedPayload
            ].join("\n");
            return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
        }
      });
    });
  };
  SignatureV43.prototype.signString = function(stringToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter3(this, void 0, void 0, function() {
      var credentials, region, _d, shortDate, hash2, _e, _f, _g;
      return __generator3(this, function(_h) {
        switch (_h.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _h.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _h.sent();
            _h.label = 4;
          case 4:
            region = _d;
            shortDate = formatDate(signingDate).shortDate;
            _f = (_e = this.sha256).bind;
            return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
          case 5:
            hash2 = new (_f.apply(_e, [void 0, _h.sent()]))();
            hash2.update(stringToSign);
            _g = toHex;
            return [4, hash2.digest()];
          case 6:
            return [2, _g.apply(void 0, [_h.sent()])];
        }
      });
    });
  };
  SignatureV43.prototype.signRequest = function(requestToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter3(this, void 0, void 0, function() {
      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
      return __generator3(this, function(_f) {
        switch (_f.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _f.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _f.sent();
            _f.label = 4;
          case 4:
            region = _d;
            request = prepareRequest(requestToSign);
            _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
            scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request.headers[AMZ_DATE_HEADER] = longDate;
            if (credentials.sessionToken) {
              request.headers[TOKEN_HEADER] = credentials.sessionToken;
            }
            return [4, getPayloadHash(request, this.sha256)];
          case 5:
            payloadHash = _f.sent();
            if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
              request.headers[SHA256_HEADER] = payloadHash;
            }
            canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
            return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
          case 6:
            signature = _f.sent();
            request.headers[AUTH_HEADER] = ALGORITHM_IDENTIFIER + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
            return [2, request];
        }
      });
    });
  };
  SignatureV43.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
    var sortedHeaders = Object.keys(canonicalHeaders).sort();
    return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function(name) {
      return name + ":" + canonicalHeaders[name];
    }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
  };
  SignatureV43.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
    return __awaiter3(this, void 0, void 0, function() {
      var hash2, hashedRequest;
      return __generator3(this, function(_a) {
        switch (_a.label) {
          case 0:
            hash2 = new this.sha256();
            hash2.update(canonicalRequest);
            return [4, hash2.digest()];
          case 1:
            hashedRequest = _a.sent();
            return [2, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
        }
      });
    });
  };
  SignatureV43.prototype.getCanonicalPath = function(_a) {
    var path = _a.path;
    if (this.uriEscapePath) {
      var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
      return "/" + doubleEncoded.replace(/%2F/g, "/");
    }
    return path;
  };
  SignatureV43.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
    return __awaiter3(this, void 0, void 0, function() {
      var stringToSign, hash2, _a, _b, _c;
      return __generator3(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
          case 1:
            stringToSign = _d.sent();
            _b = (_a = this.sha256).bind;
            return [4, keyPromise];
          case 2:
            hash2 = new (_b.apply(_a, [void 0, _d.sent()]))();
            hash2.update(stringToSign);
            _c = toHex;
            return [4, hash2.digest()];
          case 3:
            return [2, _c.apply(void 0, [_d.sent()])];
        }
      });
    });
  };
  SignatureV43.prototype.getSigningKey = function(credentials, region, shortDate, service) {
    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
  };
  return SignatureV43;
}();
var formatDate = function(now) {
  var longDate = iso8601(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList = function(headers) {
  return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/middleware-signing/dist/es/configurations.js
function resolveAwsAuthConfig(input) {
  var _this = this;
  var credentials = input.credentials || input.credentialDefaultProvider(input);
  var normalizedCreds = normalizeProvider(credentials);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else {
    signer = function() {
      return normalizeProvider(input.region)().then(function(region) {
        return __awaiter3(_this, void 0, void 0, function() {
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, input.regionInfoProvider(region)];
              case 1:
                return [2, [_a2.sent() || {}, region]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read6(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        return new SignatureV4({
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        });
      });
    };
  }
  return __assign4(__assign4({}, input), {
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  });
}
function normalizeProvider(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
}

// node_modules/@aws-sdk/middleware-signing/dist/es/middleware.js
var isClockSkewed = function(newServerTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 3e5;
};
var getSkewCorrectedDate = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter3(this, void 0, void 0, function() {
        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
        var _d;
        return __generator3(this, function(_e) {
          switch (_e.label) {
            case 0:
              if (!HttpRequest.isInstance(args.request))
                return [2, next(args)];
              if (!(typeof options.signer === "function"))
                return [3, 2];
              return [4, options.signer()];
            case 1:
              _a = _e.sent();
              return [3, 3];
            case 2:
              _a = options.signer;
              _e.label = 3;
            case 3:
              signer = _a;
              _b = next;
              _c = [__assign4({}, args)];
              _d = {};
              return [4, signer.sign(args.request, {
                signingDate: new Date(Date.now() + options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 4:
              return [4, _b.apply(void 0, [__assign4.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];
            case 5:
              output = _e.sent();
              headers = output.response.headers;
              dateHeader = headers && (headers.date || headers.Date);
              if (dateHeader) {
                serverTime = Date.parse(dateHeader);
                if (isClockSkewed(serverTime, options.systemClockOffset)) {
                  options.systemClockOffset = serverTime - Date.now();
                }
              }
              return [2, output];
          }
        });
      });
    };
  };
}
var awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-user-agent/dist/es/configurations.js
function resolveUserAgentConfig(input) {
  return __assign4(__assign4({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/middleware-user-agent/dist/es/user-agent-middleware.js
var userAgentMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter3(void 0, void 0, void 0, function() {
        var request, headers, userAgent, defaultUserAgent3, customUserAgent, normalUAValue;
        var _a, _b;
        return __generator3(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent3 = _c.sent().map(escapeUserAgent);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
              headers[X_AMZ_USER_AGENT] = __spread4(defaultUserAgent3, userAgent, customUserAgent).join(SPACE);
              normalUAValue = __spread4(defaultUserAgent3.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }), customUserAgent).join(SPACE);
              if (options.runtime !== "browser" && normalUAValue) {
                headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + " " + normalUAValue : normalUAValue;
              }
              return [2, next(__assign4(__assign4({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent = function(_a) {
  var _b = __read6(_a, 2), name = _b[0], version2 = _b[1];
  var prefixSeparatorIndex = name.indexOf("/");
  var prefix = name.substring(0, prefixSeparatorIndex);
  var uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version2].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-stack/dist/es/MiddlewareStack.js
var constructStack = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = /* @__PURE__ */ new Set();
  var sort = function(entries) {
    return entries.sort(function(a, b) {
      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign4({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign4({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread4(expandRelativeMiddlewareList(entry)));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread4(expandRelativeMiddlewareList(entry)));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign4(__assign4({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign4(__assign4({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spread4(expendedMiddlewareList));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name = options.name, override = options.override;
      var entry = __assign4({ step: "initialize", priority: "normal", middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name = options.name, override = options.override;
      var entry = __assign4({ middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name)
            entriesNameSet.delete(name);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values2(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/smithy-client/dist/es/client.js
var Client = function() {
  function Client3(config) {
    this.middlewareStack = constructStack();
    this.config = config;
  }
  Client3.prototype.send = function(command, optionsOrCb, cb) {
    var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
    var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
    if (callback) {
      handler(command).then(function(result) {
        return callback(null, result.output);
      }, function(err) {
        return callback(err);
      }).catch(
        function() {
        }
      );
    } else {
      return handler(command).then(function(result) {
        return result.output;
      });
    }
  };
  Client3.prototype.destroy = function() {
    if (this.config.requestHandler.destroy)
      this.config.requestHandler.destroy();
  };
  return Client3;
}();

// node_modules/@aws-sdk/smithy-client/dist/es/command.js
var Command = function() {
  function Command3() {
    this.middlewareStack = constructStack();
  }
  return Command3;
}();

// node_modules/@aws-sdk/smithy-client/dist/es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}

// node_modules/@aws-sdk/smithy-client/dist/es/get-array-if-single-item.js
var getArrayIfSingleItem = function(mayBeArray) {
  return Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
};

// node_modules/@aws-sdk/smithy-client/dist/es/get-value-from-text-node.js
var getValueFromTextNode = function(obj) {
  var textNodeName = "#text";
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
      obj[key] = obj[key][textNodeName];
    } else if (typeof obj[key] === "object" && obj[key] !== null) {
      obj[key] = getValueFromTextNode(obj[key]);
    }
  }
  return obj;
};

// node_modules/@aws-sdk/smithy-client/dist/es/lazy-json.js
var StringWrapper = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spread4([null], arguments));
  var instance = new Constructor();
  Object.setPrototypeOf(instance, Class.prototype);
  return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = function(_super) {
  __extends3(LazyJsonString3, _super);
  function LazyJsonString3() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LazyJsonString3.prototype.deserializeJSON = function() {
    return JSON.parse(_super.prototype.toString.call(this));
  };
  LazyJsonString3.prototype.toJSON = function() {
    return _super.prototype.toString.call(this);
  };
  LazyJsonString3.fromObject = function(object) {
    if (object instanceof LazyJsonString3) {
      return object;
    } else if (object instanceof String || typeof object === "string") {
      return new LazyJsonString3(object);
    }
    return new LazyJsonString3(JSON.stringify(object));
  };
  return LazyJsonString3;
}(StringWrapper);

// node_modules/@aws-sdk/smithy-client/dist/es/date-utils.js
var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
  var year = date.getUTCFullYear();
  var month = date.getUTCMonth();
  var dayOfWeek = date.getUTCDay();
  var dayOfMonthInt = date.getUTCDate();
  var hoursInt = date.getUTCHours();
  var minutesInt = date.getUTCMinutes();
  var secondsInt = date.getUTCSeconds();
  var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
  var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
  var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
  var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
  return days[dayOfWeek] + ", " + dayOfMonthString + " " + months[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
}

// node_modules/@aws-sdk/smithy-client/dist/es/constants.js
var SENSITIVE_STRING = "***SensitiveInformation***";

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogsClient.js
var CloudWatchLogsClient = function(_super) {
  __extends2(CloudWatchLogsClient2, _super);
  function CloudWatchLogsClient2(configuration) {
    var _this = this;
    var _config_0 = __assign3(__assign3({}, ClientDefaultValues), configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveAwsAuthConfig(_config_2);
    var _config_4 = resolveRetryConfig(_config_3);
    var _config_5 = resolveHostHeaderConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  CloudWatchLogsClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return CloudWatchLogsClient2;
}(Client);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/models/models_0.js
var AssociateKmsKeyRequest;
(function(AssociateKmsKeyRequest2) {
  AssociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(AssociateKmsKeyRequest || (AssociateKmsKeyRequest = {}));
var InvalidParameterException;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(InvalidParameterException || (InvalidParameterException = {}));
var OperationAbortedException;
(function(OperationAbortedException2) {
  OperationAbortedException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(OperationAbortedException || (OperationAbortedException = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var ServiceUnavailableException;
(function(ServiceUnavailableException2) {
  ServiceUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ServiceUnavailableException || (ServiceUnavailableException = {}));
var CancelExportTaskRequest;
(function(CancelExportTaskRequest2) {
  CancelExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(CancelExportTaskRequest || (CancelExportTaskRequest = {}));
var InvalidOperationException;
(function(InvalidOperationException2) {
  InvalidOperationException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(InvalidOperationException || (InvalidOperationException = {}));
var CreateExportTaskRequest;
(function(CreateExportTaskRequest2) {
  CreateExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(CreateExportTaskRequest || (CreateExportTaskRequest = {}));
var CreateExportTaskResponse;
(function(CreateExportTaskResponse2) {
  CreateExportTaskResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(CreateExportTaskResponse || (CreateExportTaskResponse = {}));
var LimitExceededException;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(LimitExceededException || (LimitExceededException = {}));
var ResourceAlreadyExistsException;
(function(ResourceAlreadyExistsException2) {
  ResourceAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ResourceAlreadyExistsException || (ResourceAlreadyExistsException = {}));
var CreateLogGroupRequest;
(function(CreateLogGroupRequest2) {
  CreateLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(CreateLogGroupRequest || (CreateLogGroupRequest = {}));
var CreateLogStreamRequest;
(function(CreateLogStreamRequest2) {
  CreateLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(CreateLogStreamRequest || (CreateLogStreamRequest = {}));
var DataAlreadyAcceptedException;
(function(DataAlreadyAcceptedException2) {
  DataAlreadyAcceptedException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DataAlreadyAcceptedException || (DataAlreadyAcceptedException = {}));
var DeleteDestinationRequest;
(function(DeleteDestinationRequest2) {
  DeleteDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteDestinationRequest || (DeleteDestinationRequest = {}));
var DeleteLogGroupRequest;
(function(DeleteLogGroupRequest2) {
  DeleteLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteLogGroupRequest || (DeleteLogGroupRequest = {}));
var DeleteLogStreamRequest;
(function(DeleteLogStreamRequest2) {
  DeleteLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteLogStreamRequest || (DeleteLogStreamRequest = {}));
var DeleteMetricFilterRequest;
(function(DeleteMetricFilterRequest2) {
  DeleteMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteMetricFilterRequest || (DeleteMetricFilterRequest = {}));
var DeleteQueryDefinitionRequest;
(function(DeleteQueryDefinitionRequest2) {
  DeleteQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteQueryDefinitionRequest || (DeleteQueryDefinitionRequest = {}));
var DeleteQueryDefinitionResponse;
(function(DeleteQueryDefinitionResponse2) {
  DeleteQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteQueryDefinitionResponse || (DeleteQueryDefinitionResponse = {}));
var DeleteResourcePolicyRequest;
(function(DeleteResourcePolicyRequest2) {
  DeleteResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteResourcePolicyRequest || (DeleteResourcePolicyRequest = {}));
var DeleteRetentionPolicyRequest;
(function(DeleteRetentionPolicyRequest2) {
  DeleteRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteRetentionPolicyRequest || (DeleteRetentionPolicyRequest = {}));
var DeleteSubscriptionFilterRequest;
(function(DeleteSubscriptionFilterRequest2) {
  DeleteSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DeleteSubscriptionFilterRequest || (DeleteSubscriptionFilterRequest = {}));
var DescribeDestinationsRequest;
(function(DescribeDestinationsRequest2) {
  DescribeDestinationsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeDestinationsRequest || (DescribeDestinationsRequest = {}));
var Destination;
(function(Destination2) {
  Destination2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(Destination || (Destination = {}));
var DescribeDestinationsResponse;
(function(DescribeDestinationsResponse2) {
  DescribeDestinationsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeDestinationsResponse || (DescribeDestinationsResponse = {}));
var ExportTaskStatusCode;
(function(ExportTaskStatusCode2) {
  ExportTaskStatusCode2["CANCELLED"] = "CANCELLED";
  ExportTaskStatusCode2["COMPLETED"] = "COMPLETED";
  ExportTaskStatusCode2["FAILED"] = "FAILED";
  ExportTaskStatusCode2["PENDING"] = "PENDING";
  ExportTaskStatusCode2["PENDING_CANCEL"] = "PENDING_CANCEL";
  ExportTaskStatusCode2["RUNNING"] = "RUNNING";
})(ExportTaskStatusCode || (ExportTaskStatusCode = {}));
var DescribeExportTasksRequest;
(function(DescribeExportTasksRequest2) {
  DescribeExportTasksRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeExportTasksRequest || (DescribeExportTasksRequest = {}));
var ExportTaskExecutionInfo;
(function(ExportTaskExecutionInfo2) {
  ExportTaskExecutionInfo2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ExportTaskExecutionInfo || (ExportTaskExecutionInfo = {}));
var ExportTaskStatus;
(function(ExportTaskStatus2) {
  ExportTaskStatus2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ExportTaskStatus || (ExportTaskStatus = {}));
var ExportTask;
(function(ExportTask2) {
  ExportTask2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ExportTask || (ExportTask = {}));
var DescribeExportTasksResponse;
(function(DescribeExportTasksResponse2) {
  DescribeExportTasksResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeExportTasksResponse || (DescribeExportTasksResponse = {}));
var DescribeLogGroupsRequest;
(function(DescribeLogGroupsRequest2) {
  DescribeLogGroupsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeLogGroupsRequest || (DescribeLogGroupsRequest = {}));
var LogGroup;
(function(LogGroup2) {
  LogGroup2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(LogGroup || (LogGroup = {}));
var DescribeLogGroupsResponse;
(function(DescribeLogGroupsResponse2) {
  DescribeLogGroupsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeLogGroupsResponse || (DescribeLogGroupsResponse = {}));
var OrderBy;
(function(OrderBy2) {
  OrderBy2["LastEventTime"] = "LastEventTime";
  OrderBy2["LogStreamName"] = "LogStreamName";
})(OrderBy || (OrderBy = {}));
var DescribeLogStreamsRequest;
(function(DescribeLogStreamsRequest2) {
  DescribeLogStreamsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeLogStreamsRequest || (DescribeLogStreamsRequest = {}));
var LogStream;
(function(LogStream2) {
  LogStream2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(LogStream || (LogStream = {}));
var DescribeLogStreamsResponse;
(function(DescribeLogStreamsResponse2) {
  DescribeLogStreamsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeLogStreamsResponse || (DescribeLogStreamsResponse = {}));
var DescribeMetricFiltersRequest;
(function(DescribeMetricFiltersRequest2) {
  DescribeMetricFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeMetricFiltersRequest || (DescribeMetricFiltersRequest = {}));
var MetricTransformation;
(function(MetricTransformation2) {
  MetricTransformation2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(MetricTransformation || (MetricTransformation = {}));
var MetricFilter;
(function(MetricFilter2) {
  MetricFilter2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(MetricFilter || (MetricFilter = {}));
var DescribeMetricFiltersResponse;
(function(DescribeMetricFiltersResponse2) {
  DescribeMetricFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeMetricFiltersResponse || (DescribeMetricFiltersResponse = {}));
var QueryStatus;
(function(QueryStatus2) {
  QueryStatus2["Cancelled"] = "Cancelled";
  QueryStatus2["Complete"] = "Complete";
  QueryStatus2["Failed"] = "Failed";
  QueryStatus2["Running"] = "Running";
  QueryStatus2["Scheduled"] = "Scheduled";
})(QueryStatus || (QueryStatus = {}));
var DescribeQueriesRequest;
(function(DescribeQueriesRequest2) {
  DescribeQueriesRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeQueriesRequest || (DescribeQueriesRequest = {}));
var QueryInfo;
(function(QueryInfo2) {
  QueryInfo2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(QueryInfo || (QueryInfo = {}));
var DescribeQueriesResponse;
(function(DescribeQueriesResponse2) {
  DescribeQueriesResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeQueriesResponse || (DescribeQueriesResponse = {}));
var DescribeQueryDefinitionsRequest;
(function(DescribeQueryDefinitionsRequest2) {
  DescribeQueryDefinitionsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeQueryDefinitionsRequest || (DescribeQueryDefinitionsRequest = {}));
var QueryDefinition;
(function(QueryDefinition2) {
  QueryDefinition2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(QueryDefinition || (QueryDefinition = {}));
var DescribeQueryDefinitionsResponse;
(function(DescribeQueryDefinitionsResponse2) {
  DescribeQueryDefinitionsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeQueryDefinitionsResponse || (DescribeQueryDefinitionsResponse = {}));
var DescribeResourcePoliciesRequest;
(function(DescribeResourcePoliciesRequest2) {
  DescribeResourcePoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeResourcePoliciesRequest || (DescribeResourcePoliciesRequest = {}));
var ResourcePolicy;
(function(ResourcePolicy2) {
  ResourcePolicy2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ResourcePolicy || (ResourcePolicy = {}));
var DescribeResourcePoliciesResponse;
(function(DescribeResourcePoliciesResponse2) {
  DescribeResourcePoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeResourcePoliciesResponse || (DescribeResourcePoliciesResponse = {}));
var DescribeSubscriptionFiltersRequest;
(function(DescribeSubscriptionFiltersRequest2) {
  DescribeSubscriptionFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeSubscriptionFiltersRequest || (DescribeSubscriptionFiltersRequest = {}));
var Distribution;
(function(Distribution2) {
  Distribution2["ByLogStream"] = "ByLogStream";
  Distribution2["Random"] = "Random";
})(Distribution || (Distribution = {}));
var SubscriptionFilter;
(function(SubscriptionFilter2) {
  SubscriptionFilter2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(SubscriptionFilter || (SubscriptionFilter = {}));
var DescribeSubscriptionFiltersResponse;
(function(DescribeSubscriptionFiltersResponse2) {
  DescribeSubscriptionFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DescribeSubscriptionFiltersResponse || (DescribeSubscriptionFiltersResponse = {}));
var DisassociateKmsKeyRequest;
(function(DisassociateKmsKeyRequest2) {
  DisassociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(DisassociateKmsKeyRequest || (DisassociateKmsKeyRequest = {}));
var FilteredLogEvent;
(function(FilteredLogEvent2) {
  FilteredLogEvent2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(FilteredLogEvent || (FilteredLogEvent = {}));
var FilterLogEventsRequest;
(function(FilterLogEventsRequest2) {
  FilterLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(FilterLogEventsRequest || (FilterLogEventsRequest = {}));
var SearchedLogStream;
(function(SearchedLogStream2) {
  SearchedLogStream2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(SearchedLogStream || (SearchedLogStream = {}));
var FilterLogEventsResponse;
(function(FilterLogEventsResponse2) {
  FilterLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(FilterLogEventsResponse || (FilterLogEventsResponse = {}));
var GetLogEventsRequest;
(function(GetLogEventsRequest2) {
  GetLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetLogEventsRequest || (GetLogEventsRequest = {}));
var OutputLogEvent;
(function(OutputLogEvent2) {
  OutputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(OutputLogEvent || (OutputLogEvent = {}));
var GetLogEventsResponse;
(function(GetLogEventsResponse2) {
  GetLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetLogEventsResponse || (GetLogEventsResponse = {}));
var GetLogGroupFieldsRequest;
(function(GetLogGroupFieldsRequest2) {
  GetLogGroupFieldsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetLogGroupFieldsRequest || (GetLogGroupFieldsRequest = {}));
var LogGroupField;
(function(LogGroupField2) {
  LogGroupField2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(LogGroupField || (LogGroupField = {}));
var GetLogGroupFieldsResponse;
(function(GetLogGroupFieldsResponse2) {
  GetLogGroupFieldsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetLogGroupFieldsResponse || (GetLogGroupFieldsResponse = {}));
var GetLogRecordRequest;
(function(GetLogRecordRequest2) {
  GetLogRecordRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetLogRecordRequest || (GetLogRecordRequest = {}));
var GetLogRecordResponse;
(function(GetLogRecordResponse2) {
  GetLogRecordResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetLogRecordResponse || (GetLogRecordResponse = {}));
var GetQueryResultsRequest;
(function(GetQueryResultsRequest2) {
  GetQueryResultsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetQueryResultsRequest || (GetQueryResultsRequest = {}));
var ResultField;
(function(ResultField2) {
  ResultField2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ResultField || (ResultField = {}));
var QueryStatistics;
(function(QueryStatistics2) {
  QueryStatistics2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(QueryStatistics || (QueryStatistics = {}));
var GetQueryResultsResponse;
(function(GetQueryResultsResponse2) {
  GetQueryResultsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(GetQueryResultsResponse || (GetQueryResultsResponse = {}));
var InputLogEvent;
(function(InputLogEvent2) {
  InputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(InputLogEvent || (InputLogEvent = {}));
var InvalidSequenceTokenException;
(function(InvalidSequenceTokenException2) {
  InvalidSequenceTokenException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(InvalidSequenceTokenException || (InvalidSequenceTokenException = {}));
var ListTagsLogGroupRequest;
(function(ListTagsLogGroupRequest2) {
  ListTagsLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ListTagsLogGroupRequest || (ListTagsLogGroupRequest = {}));
var ListTagsLogGroupResponse;
(function(ListTagsLogGroupResponse2) {
  ListTagsLogGroupResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(ListTagsLogGroupResponse || (ListTagsLogGroupResponse = {}));
var PutDestinationRequest;
(function(PutDestinationRequest2) {
  PutDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutDestinationRequest || (PutDestinationRequest = {}));
var PutDestinationResponse;
(function(PutDestinationResponse2) {
  PutDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutDestinationResponse || (PutDestinationResponse = {}));
var PutDestinationPolicyRequest;
(function(PutDestinationPolicyRequest2) {
  PutDestinationPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutDestinationPolicyRequest || (PutDestinationPolicyRequest = {}));
var PutLogEventsRequest;
(function(PutLogEventsRequest2) {
  PutLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutLogEventsRequest || (PutLogEventsRequest = {}));
var RejectedLogEventsInfo;
(function(RejectedLogEventsInfo2) {
  RejectedLogEventsInfo2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(RejectedLogEventsInfo || (RejectedLogEventsInfo = {}));
var PutLogEventsResponse;
(function(PutLogEventsResponse2) {
  PutLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutLogEventsResponse || (PutLogEventsResponse = {}));
var UnrecognizedClientException;
(function(UnrecognizedClientException2) {
  UnrecognizedClientException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(UnrecognizedClientException || (UnrecognizedClientException = {}));
var PutMetricFilterRequest;
(function(PutMetricFilterRequest2) {
  PutMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutMetricFilterRequest || (PutMetricFilterRequest = {}));
var PutQueryDefinitionRequest;
(function(PutQueryDefinitionRequest2) {
  PutQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutQueryDefinitionRequest || (PutQueryDefinitionRequest = {}));
var PutQueryDefinitionResponse;
(function(PutQueryDefinitionResponse2) {
  PutQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutQueryDefinitionResponse || (PutQueryDefinitionResponse = {}));
var PutResourcePolicyRequest;
(function(PutResourcePolicyRequest2) {
  PutResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutResourcePolicyRequest || (PutResourcePolicyRequest = {}));
var PutResourcePolicyResponse;
(function(PutResourcePolicyResponse2) {
  PutResourcePolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutResourcePolicyResponse || (PutResourcePolicyResponse = {}));
var PutRetentionPolicyRequest;
(function(PutRetentionPolicyRequest2) {
  PutRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutRetentionPolicyRequest || (PutRetentionPolicyRequest = {}));
var PutSubscriptionFilterRequest;
(function(PutSubscriptionFilterRequest2) {
  PutSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(PutSubscriptionFilterRequest || (PutSubscriptionFilterRequest = {}));
var QueryCompileErrorLocation;
(function(QueryCompileErrorLocation2) {
  QueryCompileErrorLocation2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(QueryCompileErrorLocation || (QueryCompileErrorLocation = {}));
var QueryCompileError;
(function(QueryCompileError2) {
  QueryCompileError2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(QueryCompileError || (QueryCompileError = {}));
var MalformedQueryException;
(function(MalformedQueryException2) {
  MalformedQueryException2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(MalformedQueryException || (MalformedQueryException = {}));
var StartQueryRequest;
(function(StartQueryRequest2) {
  StartQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(StartQueryRequest || (StartQueryRequest = {}));
var StartQueryResponse;
(function(StartQueryResponse2) {
  StartQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(StartQueryResponse || (StartQueryResponse = {}));
var StopQueryRequest;
(function(StopQueryRequest2) {
  StopQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(StopQueryRequest || (StopQueryRequest = {}));
var StopQueryResponse;
(function(StopQueryResponse2) {
  StopQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(StopQueryResponse || (StopQueryResponse = {}));
var TagLogGroupRequest;
(function(TagLogGroupRequest2) {
  TagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(TagLogGroupRequest || (TagLogGroupRequest = {}));
var TestMetricFilterRequest;
(function(TestMetricFilterRequest2) {
  TestMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(TestMetricFilterRequest || (TestMetricFilterRequest = {}));
var MetricFilterMatchRecord;
(function(MetricFilterMatchRecord2) {
  MetricFilterMatchRecord2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(MetricFilterMatchRecord || (MetricFilterMatchRecord = {}));
var TestMetricFilterResponse;
(function(TestMetricFilterResponse2) {
  TestMetricFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(TestMetricFilterResponse || (TestMetricFilterResponse = {}));
var UntagLogGroupRequest;
(function(UntagLogGroupRequest2) {
  UntagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign3({}, obj);
  };
})(UntagLogGroupRequest || (UntagLogGroupRequest = {}));

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1AssociateKmsKeyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.AssociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1AssociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CancelExportTaskCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CancelExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CancelExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateExportTaskCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CreateExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogGroupCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogStreamCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteDestinationCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteDestination"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogGroupCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogStreamCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteMetricFilterCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteQueryDefinitionCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteResourcePolicyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteRetentionPolicyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteSubscriptionFilterCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeDestinationsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeDestinations"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeDestinationsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeExportTasksCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeExportTasks"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeExportTasksRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogGroupsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogGroups"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogGroupsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogStreamsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogStreams"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogStreamsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeMetricFiltersCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeMetricFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeMetricFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueriesCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueries"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueriesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueryDefinitionsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueryDefinitions"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueryDefinitionsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeResourcePoliciesCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeResourcePolicies"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeResourcePoliciesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeSubscriptionFiltersCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeSubscriptionFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeSubscriptionFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DisassociateKmsKeyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DisassociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1DisassociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1FilterLogEventsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.FilterLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1FilterLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogEventsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogGroupFieldsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogGroupFields"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogGroupFieldsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogRecordCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogRecord"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogRecordRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetQueryResultsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetQueryResults"
      };
      body = JSON.stringify(serializeAws_json1_1GetQueryResultsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsLogGroupCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.ListTagsLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestination"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationPolicyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestinationPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutLogEventsCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1PutLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutMetricFilterCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutQueryDefinitionCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1PutQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutResourcePolicyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRetentionPolicyCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutSubscriptionFilterCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StartQueryCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StartQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StartQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StopQueryCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StopQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StopQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagLogGroupCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1TagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TestMetricFilterCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TestMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1TestMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagLogGroupCommand = function(input, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator2(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.UntagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1UntagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1AssociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CancelExportTaskCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidOperationException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateExportTaskCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1CreateExportTaskResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator2(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign3({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 10];
            case "ServiceUnavailableException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator2(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign3({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteDestinationCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteQueryDefinitionResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeDestinationsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeDestinationsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeExportTasksCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeExportTasksResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogGroupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogGroupsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogStreamsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogStreamsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeMetricFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeMetricFiltersResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueriesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueriesResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueryDefinitionsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueryDefinitionsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeResourcePoliciesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeResourcePoliciesResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeSubscriptionFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeSubscriptionFiltersResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DisassociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1FilterLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1FilterLogEventsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogEventsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogGroupFieldsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogGroupFieldsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogRecordCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogRecordResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetQueryResultsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetQueryResultsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsLogGroupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsLogGroupResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutDestinationResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutLogEventsResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator2(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign3({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DataAlreadyAcceptedException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "InvalidSequenceTokenException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
            case "UnrecognizedClientException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidSequenceTokenExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1UnrecognizedClientExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator2(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign3({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutQueryDefinitionResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutResourcePolicyCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator2(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign3({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator2(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign3({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StartQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StartQueryResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator2(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign3({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "MalformedQueryException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1MalformedQueryExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StopQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StopQueryResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator2(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign3({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TestMetricFilterCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TestMetricFilterResponse(data, context);
          response = __assign3({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator2(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign3({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommand = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var response;
    return __generator2(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommandError = function(output, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator2(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign3({}, output)];
          _d = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign3.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign3.apply(void 0, [__assign3.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign3(__assign3({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DataAlreadyAcceptedException(body, context);
      contents = __assign3({ name: "DataAlreadyAcceptedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidOperationExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
      contents = __assign3({ name: "InvalidOperationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
      contents = __assign3({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidSequenceTokenExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidSequenceTokenException(body, context);
      contents = __assign3({ name: "InvalidSequenceTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      contents = __assign3({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1MalformedQueryExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1MalformedQueryException(body, context);
      contents = __assign3({ name: "MalformedQueryException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1OperationAbortedExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1OperationAbortedException(body, context);
      contents = __assign3({ name: "OperationAbortedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
      contents = __assign3({ name: "ResourceAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      contents = __assign3({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
      contents = __assign3({ name: "ServiceUnavailableException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1UnrecognizedClientExceptionResponse = function(parsedOutput, context) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator2(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1UnrecognizedClientException(body, context);
      contents = __assign3({ name: "UnrecognizedClientException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1AssociateKmsKeyRequest = function(input, context) {
  return __assign3(__assign3({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1CancelExportTaskRequest = function(input, context) {
  return __assign3({}, input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1CreateExportTaskRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.destination !== void 0 && input.destination !== null && { destination: input.destination }), input.destinationPrefix !== void 0 && input.destinationPrefix !== null && { destinationPrefix: input.destinationPrefix }), input.from !== void 0 && input.from !== null && { from: input.from }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.taskName !== void 0 && input.taskName !== null && { taskName: input.taskName }), input.to !== void 0 && input.to !== null && { to: input.to });
};
var serializeAws_json1_1CreateLogGroupRequest = function(input, context) {
  return __assign3(__assign3(__assign3({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1CreateLogStreamRequest = function(input, context) {
  return __assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteDestinationRequest = function(input, context) {
  return __assign3({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1DeleteLogGroupRequest = function(input, context) {
  return __assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteLogStreamRequest = function(input, context) {
  return __assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteMetricFilterRequest = function(input, context) {
  return __assign3(__assign3({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteQueryDefinitionRequest = function(input, context) {
  return __assign3({}, input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId });
};
var serializeAws_json1_1DeleteResourcePolicyRequest = function(input, context) {
  return __assign3({}, input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1DeleteRetentionPolicyRequest = function(input, context) {
  return __assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteSubscriptionFilterRequest = function(input, context) {
  return __assign3(__assign3({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DescribeDestinationsRequest = function(input, context) {
  return __assign3(__assign3(__assign3({}, input.DestinationNamePrefix !== void 0 && input.DestinationNamePrefix !== null && { DestinationNamePrefix: input.DestinationNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeExportTasksRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.statusCode !== void 0 && input.statusCode !== null && { statusCode: input.statusCode }), input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1DescribeLogGroupsRequest = function(input, context) {
  return __assign3(__assign3(__assign3({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupNamePrefix !== void 0 && input.logGroupNamePrefix !== null && { logGroupNamePrefix: input.logGroupNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeLogStreamsRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.descending !== void 0 && input.descending !== null && { descending: input.descending }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.orderBy !== void 0 && input.orderBy !== null && { orderBy: input.orderBy });
};
var serializeAws_json1_1DescribeMetricFiltersRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeQueriesRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.status !== void 0 && input.status !== null && { status: input.status });
};
var serializeAws_json1_1DescribeQueryDefinitionsRequest = function(input, context) {
  return __assign3(__assign3(__assign3({}, input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.queryDefinitionNamePrefix !== void 0 && input.queryDefinitionNamePrefix !== null && { queryDefinitionNamePrefix: input.queryDefinitionNamePrefix });
};
var serializeAws_json1_1DescribeResourcePoliciesRequest = function(input, context) {
  return __assign3(__assign3({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeSubscriptionFiltersRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DisassociateKmsKeyRequest = function(input, context) {
  return __assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1FilterLogEventsRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.interleaved !== void 0 && input.interleaved !== null && { interleaved: input.interleaved }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.logStreamNames !== void 0 && input.logStreamNames !== null && {
    logStreamNames: serializeAws_json1_1InputLogStreamNames(input.logStreamNames, context)
  }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogEventsRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startFromHead !== void 0 && input.startFromHead !== null && { startFromHead: input.startFromHead }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogGroupFieldsRequest = function(input, context) {
  return __assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.time !== void 0 && input.time !== null && { time: input.time });
};
var serializeAws_json1_1GetLogRecordRequest = function(input, context) {
  return __assign3({}, input.logRecordPointer !== void 0 && input.logRecordPointer !== null && { logRecordPointer: input.logRecordPointer });
};
var serializeAws_json1_1GetQueryResultsRequest = function(input, context) {
  return __assign3({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1InputLogEvent = function(input, context) {
  return __assign3(__assign3({}, input.message !== void 0 && input.message !== null && { message: input.message }), input.timestamp !== void 0 && input.timestamp !== null && { timestamp: input.timestamp });
};
var serializeAws_json1_1InputLogEvents = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1InputLogEvent(entry, context);
  });
};
var serializeAws_json1_1InputLogStreamNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1ListTagsLogGroupRequest = function(input, context) {
  return __assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1LogGroupNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1MetricTransformation = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.defaultValue !== void 0 && input.defaultValue !== null && { defaultValue: input.defaultValue }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.metricValue !== void 0 && input.metricValue !== null && { metricValue: input.metricValue });
};
var serializeAws_json1_1MetricTransformations = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MetricTransformation(entry, context);
  });
};
var serializeAws_json1_1PutDestinationPolicyRequest = function(input, context) {
  return __assign3(__assign3({}, input.accessPolicy !== void 0 && input.accessPolicy !== null && { accessPolicy: input.accessPolicy }), input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1PutDestinationRequest = function(input, context) {
  return __assign3(__assign3(__assign3({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn }), input.targetArn !== void 0 && input.targetArn !== null && { targetArn: input.targetArn });
};
var serializeAws_json1_1PutLogEventsRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.logEvents !== void 0 && input.logEvents !== null && { logEvents: serializeAws_json1_1InputLogEvents(input.logEvents, context) }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.sequenceToken !== void 0 && input.sequenceToken !== null && { sequenceToken: input.sequenceToken });
};
var serializeAws_json1_1PutMetricFilterRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricTransformations !== void 0 && input.metricTransformations !== null && {
    metricTransformations: serializeAws_json1_1MetricTransformations(input.metricTransformations, context)
  });
};
var serializeAws_json1_1PutQueryDefinitionRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3({}, input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.name !== void 0 && input.name !== null && { name: input.name }), input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString });
};
var serializeAws_json1_1PutResourcePolicyRequest = function(input, context) {
  return __assign3(__assign3({}, input.policyDocument !== void 0 && input.policyDocument !== null && { policyDocument: input.policyDocument }), input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1PutRetentionPolicyRequest = function(input, context) {
  return __assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.retentionInDays !== void 0 && input.retentionInDays !== null && { retentionInDays: input.retentionInDays });
};
var serializeAws_json1_1PutSubscriptionFilterRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.destinationArn !== void 0 && input.destinationArn !== null && { destinationArn: input.destinationArn }), input.distribution !== void 0 && input.distribution !== null && { distribution: input.distribution }), input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn });
};
var serializeAws_json1_1StartQueryRequest = function(input, context) {
  return __assign3(__assign3(__assign3(__assign3(__assign3(__assign3({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1StopQueryRequest = function(input, context) {
  return __assign3({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1TagList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TagLogGroupRequest = function(input, context) {
  return __assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1Tags = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read5(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign3(__assign3({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1TestEventMessages = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TestMetricFilterRequest = function(input, context) {
  return __assign3(__assign3({}, input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logEventMessages !== void 0 && input.logEventMessages !== null && {
    logEventMessages: serializeAws_json1_1TestEventMessages(input.logEventMessages, context)
  });
};
var serializeAws_json1_1UntagLogGroupRequest = function(input, context) {
  return __assign3(__assign3({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) });
};
var deserializeAws_json1_1CreateExportTaskResponse = function(output, context) {
  return {
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0
  };
};
var deserializeAws_json1_1DataAlreadyAcceptedException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeleteQueryDefinitionResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1DescribeDestinationsResponse = function(output, context) {
  return {
    destinations: output.destinations !== void 0 && output.destinations !== null ? deserializeAws_json1_1Destinations(output.destinations, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeExportTasksResponse = function(output, context) {
  return {
    exportTasks: output.exportTasks !== void 0 && output.exportTasks !== null ? deserializeAws_json1_1ExportTasks(output.exportTasks, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogGroupsResponse = function(output, context) {
  return {
    logGroups: output.logGroups !== void 0 && output.logGroups !== null ? deserializeAws_json1_1LogGroups(output.logGroups, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogStreamsResponse = function(output, context) {
  return {
    logStreams: output.logStreams !== void 0 && output.logStreams !== null ? deserializeAws_json1_1LogStreams(output.logStreams, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeMetricFiltersResponse = function(output, context) {
  return {
    metricFilters: output.metricFilters !== void 0 && output.metricFilters !== null ? deserializeAws_json1_1MetricFilters(output.metricFilters, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeQueriesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queries: output.queries !== void 0 && output.queries !== null ? deserializeAws_json1_1QueryInfoList(output.queries, context) : void 0
  };
};
var deserializeAws_json1_1DescribeQueryDefinitionsResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queryDefinitions: output.queryDefinitions !== void 0 && output.queryDefinitions !== null ? deserializeAws_json1_1QueryDefinitionList(output.queryDefinitions, context) : void 0
  };
};
var deserializeAws_json1_1DescribeResourcePoliciesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    resourcePolicies: output.resourcePolicies !== void 0 && output.resourcePolicies !== null ? deserializeAws_json1_1ResourcePolicies(output.resourcePolicies, context) : void 0
  };
};
var deserializeAws_json1_1DescribeSubscriptionFiltersResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    subscriptionFilters: output.subscriptionFilters !== void 0 && output.subscriptionFilters !== null ? deserializeAws_json1_1SubscriptionFilters(output.subscriptionFilters, context) : void 0
  };
};
var deserializeAws_json1_1Destination = function(output, context) {
  return {
    accessPolicy: output.accessPolicy !== void 0 && output.accessPolicy !== null ? output.accessPolicy : void 0,
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationName: output.destinationName !== void 0 && output.destinationName !== null ? output.destinationName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0,
    targetArn: output.targetArn !== void 0 && output.targetArn !== null ? output.targetArn : void 0
  };
};
var deserializeAws_json1_1Destinations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Destination(entry, context);
  });
};
var deserializeAws_json1_1ExportTask = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? output.destination : void 0,
    destinationPrefix: output.destinationPrefix !== void 0 && output.destinationPrefix !== null ? output.destinationPrefix : void 0,
    executionInfo: output.executionInfo !== void 0 && output.executionInfo !== null ? deserializeAws_json1_1ExportTaskExecutionInfo(output.executionInfo, context) : void 0,
    from: output.from !== void 0 && output.from !== null ? output.from : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    status: output.status !== void 0 && output.status !== null ? deserializeAws_json1_1ExportTaskStatus(output.status, context) : void 0,
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0,
    taskName: output.taskName !== void 0 && output.taskName !== null ? output.taskName : void 0,
    to: output.to !== void 0 && output.to !== null ? output.to : void 0
  };
};
var deserializeAws_json1_1ExportTaskExecutionInfo = function(output, context) {
  return {
    completionTime: output.completionTime !== void 0 && output.completionTime !== null ? output.completionTime : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0
  };
};
var deserializeAws_json1_1ExportTasks = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ExportTask(entry, context);
  });
};
var deserializeAws_json1_1ExportTaskStatus = function(output, context) {
  return {
    code: output.code !== void 0 && output.code !== null ? output.code : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ExtractedValues = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read5(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign3(__assign3({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1FilteredLogEvent = function(output, context) {
  return {
    eventId: output.eventId !== void 0 && output.eventId !== null ? output.eventId : void 0,
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1FilteredLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1FilteredLogEvent(entry, context);
  });
};
var deserializeAws_json1_1FilterLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1FilteredLogEvents(output.events, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    searchedLogStreams: output.searchedLogStreams !== void 0 && output.searchedLogStreams !== null ? deserializeAws_json1_1SearchedLogStreams(output.searchedLogStreams, context) : void 0
  };
};
var deserializeAws_json1_1GetLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1OutputLogEvents(output.events, context) : void 0,
    nextBackwardToken: output.nextBackwardToken !== void 0 && output.nextBackwardToken !== null ? output.nextBackwardToken : void 0,
    nextForwardToken: output.nextForwardToken !== void 0 && output.nextForwardToken !== null ? output.nextForwardToken : void 0
  };
};
var deserializeAws_json1_1GetLogGroupFieldsResponse = function(output, context) {
  return {
    logGroupFields: output.logGroupFields !== void 0 && output.logGroupFields !== null ? deserializeAws_json1_1LogGroupFieldList(output.logGroupFields, context) : void 0
  };
};
var deserializeAws_json1_1GetLogRecordResponse = function(output, context) {
  return {
    logRecord: output.logRecord !== void 0 && output.logRecord !== null ? deserializeAws_json1_1LogRecord(output.logRecord, context) : void 0
  };
};
var deserializeAws_json1_1GetQueryResultsResponse = function(output, context) {
  return {
    results: output.results !== void 0 && output.results !== null ? deserializeAws_json1_1QueryResults(output.results, context) : void 0,
    statistics: output.statistics !== void 0 && output.statistics !== null ? deserializeAws_json1_1QueryStatistics(output.statistics, context) : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1InvalidOperationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidSequenceTokenException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListTagsLogGroupResponse = function(output, context) {
  return {
    tags: output.tags !== void 0 && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : void 0
  };
};
var deserializeAws_json1_1LogGroup = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    kmsKeyId: output.kmsKeyId !== void 0 && output.kmsKeyId !== null ? output.kmsKeyId : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricFilterCount: output.metricFilterCount !== void 0 && output.metricFilterCount !== null ? output.metricFilterCount : void 0,
    retentionInDays: output.retentionInDays !== void 0 && output.retentionInDays !== null ? output.retentionInDays : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0
  };
};
var deserializeAws_json1_1LogGroupField = function(output, context) {
  return {
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    percent: output.percent !== void 0 && output.percent !== null ? output.percent : void 0
  };
};
var deserializeAws_json1_1LogGroupFieldList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroupField(entry, context);
  });
};
var deserializeAws_json1_1LogGroupNames = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LogGroups = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroup(entry, context);
  });
};
var deserializeAws_json1_1LogRecord = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read5(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign3(__assign3({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1LogStream = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    firstEventTimestamp: output.firstEventTimestamp !== void 0 && output.firstEventTimestamp !== null ? output.firstEventTimestamp : void 0,
    lastEventTimestamp: output.lastEventTimestamp !== void 0 && output.lastEventTimestamp !== null ? output.lastEventTimestamp : void 0,
    lastIngestionTime: output.lastIngestionTime !== void 0 && output.lastIngestionTime !== null ? output.lastIngestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0,
    uploadSequenceToken: output.uploadSequenceToken !== void 0 && output.uploadSequenceToken !== null ? output.uploadSequenceToken : void 0
  };
};
var deserializeAws_json1_1LogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogStream(entry, context);
  });
};
var deserializeAws_json1_1MalformedQueryException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    queryCompileError: output.queryCompileError !== void 0 && output.queryCompileError !== null ? deserializeAws_json1_1QueryCompileError(output.queryCompileError, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricTransformations: output.metricTransformations !== void 0 && output.metricTransformations !== null ? deserializeAws_json1_1MetricTransformations(output.metricTransformations, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilterMatches = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilterMatchRecord(entry, context);
  });
};
var deserializeAws_json1_1MetricFilterMatchRecord = function(output, context) {
  return {
    eventMessage: output.eventMessage !== void 0 && output.eventMessage !== null ? output.eventMessage : void 0,
    eventNumber: output.eventNumber !== void 0 && output.eventNumber !== null ? output.eventNumber : void 0,
    extractedValues: output.extractedValues !== void 0 && output.extractedValues !== null ? deserializeAws_json1_1ExtractedValues(output.extractedValues, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilter(entry, context);
  });
};
var deserializeAws_json1_1MetricTransformation = function(output, context) {
  return {
    defaultValue: output.defaultValue !== void 0 && output.defaultValue !== null ? output.defaultValue : void 0,
    metricName: output.metricName !== void 0 && output.metricName !== null ? output.metricName : void 0,
    metricNamespace: output.metricNamespace !== void 0 && output.metricNamespace !== null ? output.metricNamespace : void 0,
    metricValue: output.metricValue !== void 0 && output.metricValue !== null ? output.metricValue : void 0
  };
};
var deserializeAws_json1_1MetricTransformations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricTransformation(entry, context);
  });
};
var deserializeAws_json1_1OperationAbortedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OutputLogEvent = function(output, context) {
  return {
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1OutputLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1OutputLogEvent(entry, context);
  });
};
var deserializeAws_json1_1PutDestinationResponse = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? deserializeAws_json1_1Destination(output.destination, context) : void 0
  };
};
var deserializeAws_json1_1PutLogEventsResponse = function(output, context) {
  return {
    nextSequenceToken: output.nextSequenceToken !== void 0 && output.nextSequenceToken !== null ? output.nextSequenceToken : void 0,
    rejectedLogEventsInfo: output.rejectedLogEventsInfo !== void 0 && output.rejectedLogEventsInfo !== null ? deserializeAws_json1_1RejectedLogEventsInfo(output.rejectedLogEventsInfo, context) : void 0
  };
};
var deserializeAws_json1_1PutQueryDefinitionResponse = function(output, context) {
  return {
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0
  };
};
var deserializeAws_json1_1PutResourcePolicyResponse = function(output, context) {
  return {
    resourcePolicy: output.resourcePolicy !== void 0 && output.resourcePolicy !== null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : void 0
  };
};
var deserializeAws_json1_1QueryCompileError = function(output, context) {
  return {
    location: output.location !== void 0 && output.location !== null ? deserializeAws_json1_1QueryCompileErrorLocation(output.location, context) : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1QueryCompileErrorLocation = function(output, context) {
  return {
    endCharOffset: output.endCharOffset !== void 0 && output.endCharOffset !== null ? output.endCharOffset : void 0,
    startCharOffset: output.startCharOffset !== void 0 && output.startCharOffset !== null ? output.startCharOffset : void 0
  };
};
var deserializeAws_json1_1QueryDefinition = function(output, context) {
  return {
    lastModified: output.lastModified !== void 0 && output.lastModified !== null ? output.lastModified : void 0,
    logGroupNames: output.logGroupNames !== void 0 && output.logGroupNames !== null ? deserializeAws_json1_1LogGroupNames(output.logGroupNames, context) : void 0,
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0
  };
};
var deserializeAws_json1_1QueryDefinitionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryDefinition(entry, context);
  });
};
var deserializeAws_json1_1QueryInfo = function(output, context) {
  return {
    createTime: output.createTime !== void 0 && output.createTime !== null ? output.createTime : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1QueryInfoList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryInfo(entry, context);
  });
};
var deserializeAws_json1_1QueryResults = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultRows(entry, context);
  });
};
var deserializeAws_json1_1QueryStatistics = function(output, context) {
  return {
    bytesScanned: output.bytesScanned !== void 0 && output.bytesScanned !== null ? output.bytesScanned : void 0,
    recordsMatched: output.recordsMatched !== void 0 && output.recordsMatched !== null ? output.recordsMatched : void 0,
    recordsScanned: output.recordsScanned !== void 0 && output.recordsScanned !== null ? output.recordsScanned : void 0
  };
};
var deserializeAws_json1_1RejectedLogEventsInfo = function(output, context) {
  return {
    expiredLogEventEndIndex: output.expiredLogEventEndIndex !== void 0 && output.expiredLogEventEndIndex !== null ? output.expiredLogEventEndIndex : void 0,
    tooNewLogEventStartIndex: output.tooNewLogEventStartIndex !== void 0 && output.tooNewLogEventStartIndex !== null ? output.tooNewLogEventStartIndex : void 0,
    tooOldLogEventEndIndex: output.tooOldLogEventEndIndex !== void 0 && output.tooOldLogEventEndIndex !== null ? output.tooOldLogEventEndIndex : void 0
  };
};
var deserializeAws_json1_1ResourceAlreadyExistsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourcePolicies = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResourcePolicy(entry, context);
  });
};
var deserializeAws_json1_1ResourcePolicy = function(output, context) {
  return {
    lastUpdatedTime: output.lastUpdatedTime !== void 0 && output.lastUpdatedTime !== null ? output.lastUpdatedTime : void 0,
    policyDocument: output.policyDocument !== void 0 && output.policyDocument !== null ? output.policyDocument : void 0,
    policyName: output.policyName !== void 0 && output.policyName !== null ? output.policyName : void 0
  };
};
var deserializeAws_json1_1ResultField = function(output, context) {
  return {
    field: output.field !== void 0 && output.field !== null ? output.field : void 0,
    value: output.value !== void 0 && output.value !== null ? output.value : void 0
  };
};
var deserializeAws_json1_1ResultRows = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultField(entry, context);
  });
};
var deserializeAws_json1_1SearchedLogStream = function(output, context) {
  return {
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    searchedCompletely: output.searchedCompletely !== void 0 && output.searchedCompletely !== null ? output.searchedCompletely : void 0
  };
};
var deserializeAws_json1_1SearchedLogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SearchedLogStream(entry, context);
  });
};
var deserializeAws_json1_1ServiceUnavailableException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1StartQueryResponse = function(output, context) {
  return {
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0
  };
};
var deserializeAws_json1_1StopQueryResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationArn: output.destinationArn !== void 0 && output.destinationArn !== null ? output.destinationArn : void 0,
    distribution: output.distribution !== void 0 && output.distribution !== null ? output.distribution : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SubscriptionFilter(entry, context);
  });
};
var deserializeAws_json1_1Tags = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read5(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign3(__assign3({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1TestMetricFilterResponse = function(output, context) {
  return {
    matches: output.matches !== void 0 && output.matches !== null ? deserializeAws_json1_1MetricFilterMatches(output.matches, context) : void 0
  };
};
var deserializeAws_json1_1UnrecognizedClientException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeMetadata = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function(streamBody, context) {
  return collectBody(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
  return __awaiter2(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator2(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody = function(streamBody, context) {
  return collectBodyString(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/middleware-serde/dist/es/deserializerMiddleware.js
var deserializerMiddleware = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter3(void 0, void 0, void 0, function() {
        var response, parsed;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              return [4, deserializer(response, options)];
            case 2:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serializerMiddleware.js
var serializerMiddleware = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter3(void 0, void 0, void 0, function() {
        var request;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign4(__assign4({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serdePlugin.js
var deserializerMiddlewareOption = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/AssociateKmsKeyCommand.js
var AssociateKmsKeyCommand = function(_super) {
  __extends2(AssociateKmsKeyCommand2, _super);
  function AssociateKmsKeyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AssociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "AssociateKmsKeyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AssociateKmsKeyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1AssociateKmsKeyCommand(input, context);
  };
  AssociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);
  };
  return AssociateKmsKeyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CancelExportTaskCommand.js
var CancelExportTaskCommand = function(_super) {
  __extends2(CancelExportTaskCommand2, _super);
  function CancelExportTaskCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CancelExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CancelExportTaskCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CancelExportTaskRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CancelExportTaskCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CancelExportTaskCommand(input, context);
  };
  CancelExportTaskCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CancelExportTaskCommand(output, context);
  };
  return CancelExportTaskCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateExportTaskCommand.js
var CreateExportTaskCommand = function(_super) {
  __extends2(CreateExportTaskCommand2, _super);
  function CreateExportTaskCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateExportTaskCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateExportTaskRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateExportTaskResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateExportTaskCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateExportTaskCommand(input, context);
  };
  CreateExportTaskCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateExportTaskCommand(output, context);
  };
  return CreateExportTaskCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogGroupCommand.js
var CreateLogGroupCommand = function(_super) {
  __extends2(CreateLogGroupCommand2, _super);
  function CreateLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateLogGroupCommand(input, context);
  };
  CreateLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateLogGroupCommand(output, context);
  };
  return CreateLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogStreamCommand.js
var CreateLogStreamCommand = function(_super) {
  __extends2(CreateLogStreamCommand2, _super);
  function CreateLogStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "CreateLogStreamCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateLogStreamRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateLogStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateLogStreamCommand(input, context);
  };
  CreateLogStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateLogStreamCommand(output, context);
  };
  return CreateLogStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteDestinationCommand.js
var DeleteDestinationCommand = function(_super) {
  __extends2(DeleteDestinationCommand2, _super);
  function DeleteDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteDestinationCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteDestinationCommand(input, context);
  };
  DeleteDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteDestinationCommand(output, context);
  };
  return DeleteDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogGroupCommand.js
var DeleteLogGroupCommand = function(_super) {
  __extends2(DeleteLogGroupCommand2, _super);
  function DeleteLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteLogGroupCommand(input, context);
  };
  DeleteLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteLogGroupCommand(output, context);
  };
  return DeleteLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogStreamCommand.js
var DeleteLogStreamCommand = function(_super) {
  __extends2(DeleteLogStreamCommand2, _super);
  function DeleteLogStreamCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteLogStreamCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteLogStreamRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteLogStreamCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteLogStreamCommand(input, context);
  };
  DeleteLogStreamCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteLogStreamCommand(output, context);
  };
  return DeleteLogStreamCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteMetricFilterCommand.js
var DeleteMetricFilterCommand = function(_super) {
  __extends2(DeleteMetricFilterCommand2, _super);
  function DeleteMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteMetricFilterCommand(input, context);
  };
  DeleteMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteMetricFilterCommand(output, context);
  };
  return DeleteMetricFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteQueryDefinitionCommand.js
var DeleteQueryDefinitionCommand = function(_super) {
  __extends2(DeleteQueryDefinitionCommand2, _super);
  function DeleteQueryDefinitionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteQueryDefinitionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteQueryDefinitionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteQueryDefinitionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteQueryDefinitionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteQueryDefinitionCommand(input, context);
  };
  DeleteQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteQueryDefinitionCommand(output, context);
  };
  return DeleteQueryDefinitionCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteResourcePolicyCommand.js
var DeleteResourcePolicyCommand = function(_super) {
  __extends2(DeleteResourcePolicyCommand2, _super);
  function DeleteResourcePolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteResourcePolicyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteResourcePolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteResourcePolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteResourcePolicyCommand(input, context);
  };
  DeleteResourcePolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteResourcePolicyCommand(output, context);
  };
  return DeleteResourcePolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteRetentionPolicyCommand.js
var DeleteRetentionPolicyCommand = function(_super) {
  __extends2(DeleteRetentionPolicyCommand2, _super);
  function DeleteRetentionPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteRetentionPolicyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteRetentionPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteRetentionPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteRetentionPolicyCommand(input, context);
  };
  DeleteRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteRetentionPolicyCommand(output, context);
  };
  return DeleteRetentionPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteSubscriptionFilterCommand.js
var DeleteSubscriptionFilterCommand = function(_super) {
  __extends2(DeleteSubscriptionFilterCommand2, _super);
  function DeleteSubscriptionFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DeleteSubscriptionFilterCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteSubscriptionFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteSubscriptionFilterCommand(input, context);
  };
  DeleteSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteSubscriptionFilterCommand(output, context);
  };
  return DeleteSubscriptionFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeDestinationsCommand.js
var DescribeDestinationsCommand = function(_super) {
  __extends2(DescribeDestinationsCommand2, _super);
  function DescribeDestinationsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeDestinationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeDestinationsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeDestinationsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeDestinationsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeDestinationsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeDestinationsCommand(input, context);
  };
  DescribeDestinationsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeDestinationsCommand(output, context);
  };
  return DescribeDestinationsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeExportTasksCommand.js
var DescribeExportTasksCommand = function(_super) {
  __extends2(DescribeExportTasksCommand2, _super);
  function DescribeExportTasksCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeExportTasksCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeExportTasksCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeExportTasksRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeExportTasksResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeExportTasksCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeExportTasksCommand(input, context);
  };
  DescribeExportTasksCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeExportTasksCommand(output, context);
  };
  return DescribeExportTasksCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogGroupsCommand.js
var DescribeLogGroupsCommand = function(_super) {
  __extends2(DescribeLogGroupsCommand2, _super);
  function DescribeLogGroupsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLogGroupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeLogGroupsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLogGroupsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLogGroupsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLogGroupsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLogGroupsCommand(input, context);
  };
  DescribeLogGroupsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLogGroupsCommand(output, context);
  };
  return DescribeLogGroupsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogStreamsCommand.js
var DescribeLogStreamsCommand = function(_super) {
  __extends2(DescribeLogStreamsCommand2, _super);
  function DescribeLogStreamsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeLogStreamsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeLogStreamsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeLogStreamsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeLogStreamsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeLogStreamsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeLogStreamsCommand(input, context);
  };
  DescribeLogStreamsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeLogStreamsCommand(output, context);
  };
  return DescribeLogStreamsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeMetricFiltersCommand.js
var DescribeMetricFiltersCommand = function(_super) {
  __extends2(DescribeMetricFiltersCommand2, _super);
  function DescribeMetricFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeMetricFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeMetricFiltersCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeMetricFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeMetricFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeMetricFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeMetricFiltersCommand(input, context);
  };
  DescribeMetricFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeMetricFiltersCommand(output, context);
  };
  return DescribeMetricFiltersCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueriesCommand.js
var DescribeQueriesCommand = function(_super) {
  __extends2(DescribeQueriesCommand2, _super);
  function DescribeQueriesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeQueriesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeQueriesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeQueriesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeQueriesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeQueriesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeQueriesCommand(input, context);
  };
  DescribeQueriesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeQueriesCommand(output, context);
  };
  return DescribeQueriesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueryDefinitionsCommand.js
var DescribeQueryDefinitionsCommand = function(_super) {
  __extends2(DescribeQueryDefinitionsCommand2, _super);
  function DescribeQueryDefinitionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeQueryDefinitionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeQueryDefinitionsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeQueryDefinitionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeQueryDefinitionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeQueryDefinitionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeQueryDefinitionsCommand(input, context);
  };
  DescribeQueryDefinitionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeQueryDefinitionsCommand(output, context);
  };
  return DescribeQueryDefinitionsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeResourcePoliciesCommand.js
var DescribeResourcePoliciesCommand = function(_super) {
  __extends2(DescribeResourcePoliciesCommand2, _super);
  function DescribeResourcePoliciesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeResourcePoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeResourcePoliciesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeResourcePoliciesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeResourcePoliciesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeResourcePoliciesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeResourcePoliciesCommand(input, context);
  };
  DescribeResourcePoliciesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeResourcePoliciesCommand(output, context);
  };
  return DescribeResourcePoliciesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeSubscriptionFiltersCommand.js
var DescribeSubscriptionFiltersCommand = function(_super) {
  __extends2(DescribeSubscriptionFiltersCommand2, _super);
  function DescribeSubscriptionFiltersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeSubscriptionFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DescribeSubscriptionFiltersCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeSubscriptionFiltersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeSubscriptionFiltersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeSubscriptionFiltersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeSubscriptionFiltersCommand(input, context);
  };
  DescribeSubscriptionFiltersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeSubscriptionFiltersCommand(output, context);
  };
  return DescribeSubscriptionFiltersCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DisassociateKmsKeyCommand.js
var DisassociateKmsKeyCommand = function(_super) {
  __extends2(DisassociateKmsKeyCommand2, _super);
  function DisassociateKmsKeyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DisassociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "DisassociateKmsKeyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DisassociateKmsKeyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DisassociateKmsKeyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DisassociateKmsKeyCommand(input, context);
  };
  DisassociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DisassociateKmsKeyCommand(output, context);
  };
  return DisassociateKmsKeyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/FilterLogEventsCommand.js
var FilterLogEventsCommand = function(_super) {
  __extends2(FilterLogEventsCommand2, _super);
  function FilterLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  FilterLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "FilterLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: FilterLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: FilterLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  FilterLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1FilterLogEventsCommand(input, context);
  };
  FilterLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1FilterLogEventsCommand(output, context);
  };
  return FilterLogEventsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogEventsCommand.js
var GetLogEventsCommand = function(_super) {
  __extends2(GetLogEventsCommand2, _super);
  function GetLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogEventsCommand(input, context);
  };
  GetLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogEventsCommand(output, context);
  };
  return GetLogEventsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogGroupFieldsCommand.js
var GetLogGroupFieldsCommand = function(_super) {
  __extends2(GetLogGroupFieldsCommand2, _super);
  function GetLogGroupFieldsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogGroupFieldsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogGroupFieldsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogGroupFieldsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogGroupFieldsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogGroupFieldsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogGroupFieldsCommand(input, context);
  };
  GetLogGroupFieldsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogGroupFieldsCommand(output, context);
  };
  return GetLogGroupFieldsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogRecordCommand.js
var GetLogRecordCommand = function(_super) {
  __extends2(GetLogRecordCommand2, _super);
  function GetLogRecordCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetLogRecordCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetLogRecordCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetLogRecordRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetLogRecordResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetLogRecordCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetLogRecordCommand(input, context);
  };
  GetLogRecordCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetLogRecordCommand(output, context);
  };
  return GetLogRecordCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetQueryResultsCommand.js
var GetQueryResultsCommand = function(_super) {
  __extends2(GetQueryResultsCommand2, _super);
  function GetQueryResultsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetQueryResultsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "GetQueryResultsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetQueryResultsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetQueryResultsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetQueryResultsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetQueryResultsCommand(input, context);
  };
  GetQueryResultsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetQueryResultsCommand(output, context);
  };
  return GetQueryResultsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/ListTagsLogGroupCommand.js
var ListTagsLogGroupCommand = function(_super) {
  __extends2(ListTagsLogGroupCommand2, _super);
  function ListTagsLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "ListTagsLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsLogGroupResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListTagsLogGroupCommand(input, context);
  };
  ListTagsLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListTagsLogGroupCommand(output, context);
  };
  return ListTagsLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationCommand.js
var PutDestinationCommand = function(_super) {
  __extends2(PutDestinationCommand2, _super);
  function PutDestinationCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutDestinationCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutDestinationRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutDestinationResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutDestinationCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutDestinationCommand(input, context);
  };
  PutDestinationCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutDestinationCommand(output, context);
  };
  return PutDestinationCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationPolicyCommand.js
var PutDestinationPolicyCommand = function(_super) {
  __extends2(PutDestinationPolicyCommand2, _super);
  function PutDestinationPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutDestinationPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutDestinationPolicyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutDestinationPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutDestinationPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutDestinationPolicyCommand(input, context);
  };
  PutDestinationPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutDestinationPolicyCommand(output, context);
  };
  return PutDestinationPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutLogEventsCommand.js
var PutLogEventsCommand = function(_super) {
  __extends2(PutLogEventsCommand2, _super);
  function PutLogEventsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutLogEventsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutLogEventsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutLogEventsCommand(input, context);
  };
  PutLogEventsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutLogEventsCommand(output, context);
  };
  return PutLogEventsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutMetricFilterCommand.js
var PutMetricFilterCommand = function(_super) {
  __extends2(PutMetricFilterCommand2, _super);
  function PutMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutMetricFilterCommand(input, context);
  };
  PutMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutMetricFilterCommand(output, context);
  };
  return PutMetricFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutQueryDefinitionCommand.js
var PutQueryDefinitionCommand = function(_super) {
  __extends2(PutQueryDefinitionCommand2, _super);
  function PutQueryDefinitionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutQueryDefinitionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutQueryDefinitionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutQueryDefinitionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutQueryDefinitionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutQueryDefinitionCommand(input, context);
  };
  PutQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutQueryDefinitionCommand(output, context);
  };
  return PutQueryDefinitionCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutResourcePolicyCommand.js
var PutResourcePolicyCommand = function(_super) {
  __extends2(PutResourcePolicyCommand2, _super);
  function PutResourcePolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutResourcePolicyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutResourcePolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutResourcePolicyResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutResourcePolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutResourcePolicyCommand(input, context);
  };
  PutResourcePolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutResourcePolicyCommand(output, context);
  };
  return PutResourcePolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutRetentionPolicyCommand.js
var PutRetentionPolicyCommand = function(_super) {
  __extends2(PutRetentionPolicyCommand2, _super);
  function PutRetentionPolicyCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutRetentionPolicyCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutRetentionPolicyRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutRetentionPolicyCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutRetentionPolicyCommand(input, context);
  };
  PutRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutRetentionPolicyCommand(output, context);
  };
  return PutRetentionPolicyCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutSubscriptionFilterCommand.js
var PutSubscriptionFilterCommand = function(_super) {
  __extends2(PutSubscriptionFilterCommand2, _super);
  function PutSubscriptionFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "PutSubscriptionFilterCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);
  };
  PutSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);
  };
  return PutSubscriptionFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StartQueryCommand.js
var StartQueryCommand = function(_super) {
  __extends2(StartQueryCommand2, _super);
  function StartQueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StartQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "StartQueryCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: StartQueryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: StartQueryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StartQueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StartQueryCommand(input, context);
  };
  StartQueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StartQueryCommand(output, context);
  };
  return StartQueryCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StopQueryCommand.js
var StopQueryCommand = function(_super) {
  __extends2(StopQueryCommand2, _super);
  function StopQueryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  StopQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "StopQueryCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: StopQueryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: StopQueryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  StopQueryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1StopQueryCommand(input, context);
  };
  StopQueryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1StopQueryCommand(output, context);
  };
  return StopQueryCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TagLogGroupCommand.js
var TagLogGroupCommand = function(_super) {
  __extends2(TagLogGroupCommand2, _super);
  function TagLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "TagLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TagLogGroupCommand(input, context);
  };
  TagLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TagLogGroupCommand(output, context);
  };
  return TagLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TestMetricFilterCommand.js
var TestMetricFilterCommand = function(_super) {
  __extends2(TestMetricFilterCommand2, _super);
  function TestMetricFilterCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TestMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "TestMetricFilterCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: TestMetricFilterRequest.filterSensitiveLog,
      outputFilterSensitiveLog: TestMetricFilterResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TestMetricFilterCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TestMetricFilterCommand(input, context);
  };
  TestMetricFilterCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TestMetricFilterCommand(output, context);
  };
  return TestMetricFilterCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/UntagLogGroupCommand.js
var UntagLogGroupCommand = function(_super) {
  __extends2(UntagLogGroupCommand2, _super);
  function UntagLogGroupCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CloudWatchLogsClient";
    var commandName = "UntagLogGroupCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagLogGroupRequest.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagLogGroupCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UntagLogGroupCommand(input, context);
  };
  UntagLogGroupCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UntagLogGroupCommand(output, context);
  };
  return UntagLogGroupCommand2;
}(Command);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogs.js
var CloudWatchLogs = function(_super) {
  __extends2(CloudWatchLogs2, _super);
  function CloudWatchLogs2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CloudWatchLogs2.prototype.associateKmsKey = function(args, optionsOrCb, cb) {
    var command = new AssociateKmsKeyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.cancelExportTask = function(args, optionsOrCb, cb) {
    var command = new CancelExportTaskCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createExportTask = function(args, optionsOrCb, cb) {
    var command = new CreateExportTaskCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createLogGroup = function(args, optionsOrCb, cb) {
    var command = new CreateLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.createLogStream = function(args, optionsOrCb, cb) {
    var command = new CreateLogStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteDestination = function(args, optionsOrCb, cb) {
    var command = new DeleteDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteLogGroup = function(args, optionsOrCb, cb) {
    var command = new DeleteLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteLogStream = function(args, optionsOrCb, cb) {
    var command = new DeleteLogStreamCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteMetricFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteQueryDefinition = function(args, optionsOrCb, cb) {
    var command = new DeleteQueryDefinitionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteResourcePolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteResourcePolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteRetentionPolicy = function(args, optionsOrCb, cb) {
    var command = new DeleteRetentionPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.deleteSubscriptionFilter = function(args, optionsOrCb, cb) {
    var command = new DeleteSubscriptionFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeDestinations = function(args, optionsOrCb, cb) {
    var command = new DescribeDestinationsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeExportTasks = function(args, optionsOrCb, cb) {
    var command = new DescribeExportTasksCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeLogGroups = function(args, optionsOrCb, cb) {
    var command = new DescribeLogGroupsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeLogStreams = function(args, optionsOrCb, cb) {
    var command = new DescribeLogStreamsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeMetricFilters = function(args, optionsOrCb, cb) {
    var command = new DescribeMetricFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeQueries = function(args, optionsOrCb, cb) {
    var command = new DescribeQueriesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeQueryDefinitions = function(args, optionsOrCb, cb) {
    var command = new DescribeQueryDefinitionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeResourcePolicies = function(args, optionsOrCb, cb) {
    var command = new DescribeResourcePoliciesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.describeSubscriptionFilters = function(args, optionsOrCb, cb) {
    var command = new DescribeSubscriptionFiltersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.disassociateKmsKey = function(args, optionsOrCb, cb) {
    var command = new DisassociateKmsKeyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.filterLogEvents = function(args, optionsOrCb, cb) {
    var command = new FilterLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogEvents = function(args, optionsOrCb, cb) {
    var command = new GetLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogGroupFields = function(args, optionsOrCb, cb) {
    var command = new GetLogGroupFieldsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getLogRecord = function(args, optionsOrCb, cb) {
    var command = new GetLogRecordCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.getQueryResults = function(args, optionsOrCb, cb) {
    var command = new GetQueryResultsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.listTagsLogGroup = function(args, optionsOrCb, cb) {
    var command = new ListTagsLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putDestination = function(args, optionsOrCb, cb) {
    var command = new PutDestinationCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putDestinationPolicy = function(args, optionsOrCb, cb) {
    var command = new PutDestinationPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putLogEvents = function(args, optionsOrCb, cb) {
    var command = new PutLogEventsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putMetricFilter = function(args, optionsOrCb, cb) {
    var command = new PutMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putQueryDefinition = function(args, optionsOrCb, cb) {
    var command = new PutQueryDefinitionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putResourcePolicy = function(args, optionsOrCb, cb) {
    var command = new PutResourcePolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putRetentionPolicy = function(args, optionsOrCb, cb) {
    var command = new PutRetentionPolicyCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.putSubscriptionFilter = function(args, optionsOrCb, cb) {
    var command = new PutSubscriptionFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.startQuery = function(args, optionsOrCb, cb) {
    var command = new StartQueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.stopQuery = function(args, optionsOrCb, cb) {
    var command = new StopQueryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.tagLogGroup = function(args, optionsOrCb, cb) {
    var command = new TagLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.testMetricFilter = function(args, optionsOrCb, cb) {
    var command = new TestMetricFilterCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CloudWatchLogs2.prototype.untagLogGroup = function(args, optionsOrCb, cb) {
    var command = new UntagLogGroupCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return CloudWatchLogs2;
}(CloudWatchLogsClient);

// node_modules/@aws-amplify/core/lib-esm/Providers/AWSCloudWatchProvider.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator4 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read7 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread6 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read7(arguments[i]));
  return ar;
};
var logger8 = new ConsoleLogger("AWSCloudWatch");
var AWSCloudWatchProvider = function() {
  function AWSCloudWatchProvider2(config) {
    this.configure(config);
    this._dataTracker = {
      eventUploadInProgress: false,
      logEvents: []
    };
    this._currentLogBatch = [];
    this._initiateLogPushInterval();
  }
  AWSCloudWatchProvider2.prototype.getProviderName = function() {
    return AWSCloudWatchProvider2.PROVIDER_NAME;
  };
  AWSCloudWatchProvider2.prototype.getCategoryName = function() {
    return AWSCloudWatchProvider2.CATEGORY;
  };
  AWSCloudWatchProvider2.prototype.getLogQueue = function() {
    return this._dataTracker.logEvents;
  };
  AWSCloudWatchProvider2.prototype.configure = function(config) {
    if (!config)
      return this._config || {};
    var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);
    this._config = conf;
    return this._config;
  };
  AWSCloudWatchProvider2.prototype.createLogGroup = function(params) {
    return __awaiter4(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_1;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("creating new log group in CloudWatch - ", params.logGroupName);
            cmd = new CreateLogGroupCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_1 = _a.sent();
            logger8.error("error creating log group - " + error_1);
            throw error_1;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogGroups = function(params) {
    return __awaiter4(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_2;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("getting list of log groups");
            cmd = new DescribeLogGroupsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_2 = _a.sent();
            logger8.error("error getting log group - " + error_2);
            throw error_2;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.createLogStream = function(params) {
    return __awaiter4(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_3;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("creating new log stream in CloudWatch - ", params.logStreamName);
            cmd = new CreateLogStreamCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_3 = _a.sent();
            logger8.error("error creating log stream - " + error_3);
            throw error_3;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogStreams = function(params) {
    return __awaiter4(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_4;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("getting list of log streams");
            cmd = new DescribeLogStreamsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_4 = _a.sent();
            logger8.error("error getting log stream - " + error_4);
            throw error_4;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.getLogEvents = function(params) {
    return __awaiter4(this, void 0, void 0, function() {
      var cmd, credentialsOK, client, output, error_5;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            logger8.debug("getting log events from stream - ", params.logStreamName);
            cmd = new GetLogEventsCommand(params);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 3:
            output = _a.sent();
            return [2, output];
          case 4:
            error_5 = _a.sent();
            logger8.error("error getting log events - " + error_5);
            throw error_5;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype.pushLogs = function(logs) {
    logger8.debug("pushing log events to Cloudwatch...");
    this._dataTracker.logEvents = __spread6(this._dataTracker.logEvents, logs);
  };
  AWSCloudWatchProvider2.prototype._validateLogGroupExistsAndCreate = function(logGroupName) {
    return __awaiter4(this, void 0, void 0, function() {
      var credentialsOK, currGroups, foundGroups, err_1, errString;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this._dataTracker.verifiedLogGroup) {
              return [2, this._dataTracker.verifiedLogGroup];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 5, , 6]);
            return [4, this._ensureCredentials()];
          case 2:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            return [4, this.getLogGroups({
              logGroupNamePrefix: logGroupName
            })];
          case 3:
            currGroups = _a.sent();
            if (!(typeof currGroups === "string") && currGroups.logGroups) {
              foundGroups = currGroups.logGroups.filter(function(group) {
                return group.logGroupName === logGroupName;
              });
              if (foundGroups.length > 0) {
                this._dataTracker.verifiedLogGroup = foundGroups[0];
                return [2, foundGroups[0]];
              }
            }
            return [4, this.createLogGroup({ logGroupName })];
          case 4:
            _a.sent();
            return [2, null];
          case 5:
            err_1 = _a.sent();
            errString = "failure during log group search: " + err_1;
            logger8.error(errString);
            throw err_1;
          case 6:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._validateLogStreamExists = function(logGroupName, logStreamName) {
    return __awaiter4(this, void 0, void 0, function() {
      var credentialsOK, currStreams, foundStreams, err_2, errString;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 4, , 5]);
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            return [4, this.getLogStreams({
              logGroupName,
              logStreamNamePrefix: logStreamName
            })];
          case 2:
            currStreams = _a.sent();
            if (currStreams.logStreams) {
              foundStreams = currStreams.logStreams.filter(function(stream) {
                return stream.logStreamName === logStreamName;
              });
              if (foundStreams.length > 0) {
                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;
                return [2, foundStreams[0]];
              }
            }
            return [4, this.createLogStream({
              logGroupName,
              logStreamName
            })];
          case 3:
            _a.sent();
            return [2, null];
          case 4:
            err_2 = _a.sent();
            errString = "failure during log stream search: " + err_2;
            logger8.error(errString);
            throw err_2;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._sendLogEvents = function(params) {
    return __awaiter4(this, void 0, void 0, function() {
      var credentialsOK, cmd, client, output, err_3, errString;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error(NO_CREDS_ERROR_STRING);
            }
            logger8.debug("sending log events to stream - ", params.logStreamName);
            cmd = new PutLogEventsCommand(params);
            client = this._initCloudWatchLogs();
            return [4, client.send(cmd)];
          case 2:
            output = _a.sent();
            return [2, output];
          case 3:
            err_3 = _a.sent();
            errString = "failure during log push: " + err_3;
            logger8.error(errString);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._initCloudWatchLogs = function() {
    return new CloudWatchLogsClient({
      region: this._config.region,
      credentials: this._config.credentials,
      customUserAgent: getAmplifyUserAgent(),
      endpoint: this._config.endpoint
    });
  };
  AWSCloudWatchProvider2.prototype._ensureCredentials = function() {
    return __awaiter4(this, void 0, void 0, function() {
      var _this = this;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, Credentials.get().then(function(credentials) {
              if (!credentials)
                return false;
              var cred = Credentials.shear(credentials);
              logger8.debug("set credentials for logging", cred);
              _this._config.credentials = cred;
              return true;
            }).catch(function(error) {
              logger8.warn("ensure credentials error", error);
              return false;
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._getNextSequenceToken = function() {
    return __awaiter4(this, void 0, void 0, function() {
      var logStream, err_4;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {
              return [2, this._nextSequenceToken];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 4, , 5]);
            return [4, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];
          case 2:
            _a.sent();
            this._nextSequenceToken = void 0;
            return [4, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];
          case 3:
            logStream = _a.sent();
            if (logStream) {
              this._nextSequenceToken = logStream.uploadSequenceToken;
            }
            return [2, this._nextSequenceToken];
          case 4:
            err_4 = _a.sent();
            logger8.error("failure while getting next sequence token: " + err_4);
            throw err_4;
          case 5:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._safeUploadLogEvents = function() {
    return __awaiter4(this, void 0, void 0, function() {
      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            return [4, this._getNextSequenceToken()];
          case 1:
            seqToken = _a.sent();
            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;
            putLogsPayload = {
              logGroupName: this._config.logGroupName,
              logStreamName: this._config.logStreamName,
              logEvents: logBatch,
              sequenceToken: seqToken
            };
            this._dataTracker.eventUploadInProgress = true;
            return [4, this._sendLogEvents(putLogsPayload)];
          case 2:
            sendLogEventsResponse = _a.sent();
            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;
            this._dataTracker.eventUploadInProgress = false;
            this._currentLogBatch = [];
            return [2, sendLogEventsResponse];
          case 3:
            err_5 = _a.sent();
            logger8.error("error during _safeUploadLogEvents: " + err_5);
            if (RETRY_ERROR_CODES.includes(err_5.name)) {
              this._getNewSequenceTokenAndSubmit({
                logEvents: this._currentLogBatch,
                logGroupName: this._config.logGroupName,
                logStreamName: this._config.logStreamName
              });
            } else {
              this._dataTracker.eventUploadInProgress = false;
              throw err_5;
            }
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._getBufferedBatchOfLogs = function() {
    var currentEventIdx = 0;
    var totalByteSize = 0;
    while (currentEventIdx < this._dataTracker.logEvents.length) {
      var currentEvent = this._dataTracker.logEvents[currentEventIdx];
      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;
      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {
        var errString = "Log entry exceeds maximum size for CloudWatch logs. Log size: " + eventSize + ". Truncating log message.";
        logger8.warn(errString);
        currentEvent.message = currentEvent.message.substring(0, eventSize);
      }
      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)
        break;
      totalByteSize += eventSize;
      currentEventIdx++;
    }
    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);
    return this._currentLogBatch;
  };
  AWSCloudWatchProvider2.prototype._getNewSequenceTokenAndSubmit = function(payload) {
    return __awaiter4(this, void 0, void 0, function() {
      var seqToken, sendLogEventsRepsonse, err_6;
      return __generator4(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 3, , 4]);
            this._nextSequenceToken = void 0;
            this._dataTracker.eventUploadInProgress = true;
            return [4, this._getNextSequenceToken()];
          case 1:
            seqToken = _a.sent();
            payload.sequenceToken = seqToken;
            return [4, this._sendLogEvents(payload)];
          case 2:
            sendLogEventsRepsonse = _a.sent();
            this._dataTracker.eventUploadInProgress = false;
            this._currentLogBatch = [];
            return [2, sendLogEventsRepsonse];
          case 3:
            err_6 = _a.sent();
            logger8.error("error when retrying log submission with new sequence token: " + err_6);
            this._dataTracker.eventUploadInProgress = false;
            throw err_6;
          case 4:
            return [2];
        }
      });
    });
  };
  AWSCloudWatchProvider2.prototype._initiateLogPushInterval = function() {
    var _this = this;
    if (this._timer) {
      clearInterval(this._timer);
    }
    this._timer = setInterval(function() {
      return __awaiter4(_this, void 0, void 0, function() {
        var err_7;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              if (!this._getDocUploadPermissibility())
                return [3, 2];
              return [4, this._safeUploadLogEvents()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              return [3, 4];
            case 3:
              err_7 = _a.sent();
              logger8.error("error when calling _safeUploadLogEvents in the timer interval - " + err_7);
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    }, 2e3);
  };
  AWSCloudWatchProvider2.prototype._getDocUploadPermissibility = function() {
    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;
  };
  AWSCloudWatchProvider2.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;
  AWSCloudWatchProvider2.CATEGORY = AWS_CLOUDWATCH_CATEGORY;
  return AWSCloudWatchProvider2;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator5 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger9 = new ConsoleLogger("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger9.debug("not in the browser, directly resolved");
    return res();
  }
  var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
  if (ga) {
    logger9.debug("google api already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var GoogleOAuth = function() {
  function GoogleOAuth3() {
    this.initialized = false;
    this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
    this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
  }
  GoogleOAuth3.prototype.refreshGoogleToken = function() {
    return __awaiter5(this, void 0, void 0, function() {
      return __generator5(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!this.initialized)
              return [3, 2];
            logger9.debug("need to wait for the Google SDK loaded");
            return [4, waitForInit];
          case 1:
            _a.sent();
            this.initialized = true;
            logger9.debug("finish waiting");
            _a.label = 2;
          case 2:
            return [2, this._refreshGoogleTokenImpl()];
        }
      });
    });
  };
  GoogleOAuth3.prototype._refreshGoogleTokenImpl = function() {
    var ga = null;
    if (browserOrNode().isBrowser)
      ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
    if (!ga) {
      logger9.debug("no gapi auth2 available");
      return Promise.reject("no gapi auth2 available");
    }
    return new Promise(function(res, rej) {
      ga.getAuthInstance().then(function(googleAuth) {
        if (!googleAuth) {
          logger9.debug("google Auth undefined");
          rej(new NonRetryableError("google Auth undefined"));
        }
        var googleUser = googleAuth.currentUser.get();
        if (googleUser.isSignedIn()) {
          logger9.debug("refreshing the google access token");
          googleUser.reloadAuthResponse().then(function(authResponse) {
            var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
            res({ token: id_token, expires_at });
          }).catch(function(err) {
            if (err && err.error === "network_error") {
              rej("Network error reloading google auth response");
            } else {
              rej(new NonRetryableError("Failed to reload google auth response"));
            }
          });
        } else {
          rej(new NonRetryableError("User is not signed in with Google"));
        }
      }).catch(function(err) {
        logger9.debug("Failed to refresh google token", err);
        rej(new NonRetryableError("Failed to refresh google token"));
      });
    });
  };
  return GoogleOAuth3;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator6 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger10 = new ConsoleLogger("CognitoCredentials");
var waitForInit2 = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger10.debug("not in the browser, directly resolved");
    return res();
  }
  var fb = window["FB"];
  if (fb) {
    logger10.debug("FB SDK already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var FacebookOAuth = function() {
  function FacebookOAuth3() {
    this.initialized = false;
    this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
    this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
  }
  FacebookOAuth3.prototype.refreshFacebookToken = function() {
    return __awaiter6(this, void 0, void 0, function() {
      return __generator6(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!this.initialized)
              return [3, 2];
            logger10.debug("need to wait for the Facebook SDK loaded");
            return [4, waitForInit2];
          case 1:
            _a.sent();
            this.initialized = true;
            logger10.debug("finish waiting");
            _a.label = 2;
          case 2:
            return [2, this._refreshFacebookTokenImpl()];
        }
      });
    });
  };
  FacebookOAuth3.prototype._refreshFacebookTokenImpl = function() {
    var fb = null;
    if (browserOrNode().isBrowser)
      fb = window["FB"];
    if (!fb) {
      var errorMessage = "no fb sdk available";
      logger10.debug(errorMessage);
      return Promise.reject(new NonRetryableError(errorMessage));
    }
    return new Promise(function(res, rej) {
      fb.getLoginStatus(function(fbResponse) {
        if (!fbResponse || !fbResponse.authResponse) {
          var errorMessage2 = "no response from facebook when refreshing the jwt token";
          logger10.debug(errorMessage2);
          rej(new NonRetryableError(errorMessage2));
        } else {
          var response = fbResponse.authResponse;
          var accessToken = response.accessToken, expiresIn = response.expiresIn;
          var date = new Date();
          var expires_at = expiresIn * 1e3 + date.getTime();
          if (!accessToken) {
            var errorMessage2 = "the jwtToken is undefined";
            logger10.debug(errorMessage2);
            rej(new NonRetryableError(errorMessage2));
          }
          res({
            token: accessToken,
            expires_at
          });
        }
      }, { scope: "public_profile,email" });
    });
  };
  return FacebookOAuth3;
}();

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
var GoogleOAuth2 = new GoogleOAuth();
var FacebookOAuth2 = new FacebookOAuth();

// node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
var dataMemory = {};
var MemoryStorage = function() {
  function MemoryStorage2() {
  }
  MemoryStorage2.setItem = function(key, value) {
    dataMemory[key] = value;
    return dataMemory[key];
  };
  MemoryStorage2.getItem = function(key) {
    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
  };
  MemoryStorage2.removeItem = function(key) {
    return delete dataMemory[key];
  };
  MemoryStorage2.clear = function() {
    dataMemory = {};
    return dataMemory;
  };
  return MemoryStorage2;
}();
var StorageHelper = function() {
  function StorageHelper2() {
    try {
      this.storageWindow = window.localStorage;
      this.storageWindow.setItem("aws.amplify.test-ls", 1);
      this.storageWindow.removeItem("aws.amplify.test-ls");
    } catch (exception) {
      this.storageWindow = MemoryStorage;
    }
  }
  StorageHelper2.prototype.getStorage = function() {
    return this.storageWindow;
  };
  return StorageHelper2;
}();

// node_modules/@aws-amplify/core/lib-esm/RNComponents/index.js
var AsyncStorage = browserOrNode().isBrowser ? new StorageHelper().getStorage() : void 0;

// node_modules/@aws-sdk/client-cognito-identity/node_modules/tslib/tslib.es6.js
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends4(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign5 = function() {
  __assign5 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
function __awaiter7(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator7(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read8(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cognito-identity/dist/es/package.json
var package_default2 = {
  name: "@aws-sdk/client-cognito-identity",
  description: "AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    "test:unit": "mocha **/cjs/**/*.spec.js",
    "test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
    test: "yarn test:unit",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@aws-sdk/client-iam": "3.6.1",
    "@types/chai": "^4.2.11",
    "@types/mocha": "^8.0.4",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cognito-identity"
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
var import_sha256_browser2 = __toESM(require_build6());
init_es2();

// node_modules/@aws-sdk/client-cognito-identity/dist/es/endpoints.js
var AWS_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com";
var AWS_CN_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE2 = "cognito-identity.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE2 = "cognito-identity.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com";
var AWS_REGIONS2 = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS2 = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS2 = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS2 = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS2 = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider2 = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "ap-northeast-1":
      regionInfo = {
        hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "cognito-identity.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "cognito-identity.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "cognito-identity.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "cognito-identity.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "cognito-identity.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "cognito-identity.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "cognito-identity.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-gov-west-1":
      regionInfo = {
        hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "cognito-identity.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "cognito-identity.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "cognito-identity.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "cognito-identity.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "cognito-identity.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE2.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE2.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE2.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE2.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE2.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE2.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign5({ signingService: "cognito-identity" }, regionInfo));
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.shared.js
var ClientSharedValues2 = {
  apiVersion: "2014-06-30",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider2,
  serviceId: "Cognito Identity",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
var ClientDefaultValues2 = __assign5(__assign5({}, ClientSharedValues2), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues2.serviceId,
  clientVersion: package_default2.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser2.Sha256, streamCollector, utf8Decoder: fromUtf86, utf8Encoder: toUtf86 });

// node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentityClient.js
var CognitoIdentityClient = function(_super) {
  __extends4(CognitoIdentityClient2, _super);
  function CognitoIdentityClient2(configuration) {
    var _this = this;
    var _config_0 = __assign5(__assign5({}, ClientDefaultValues2), configuration);
    var _config_1 = resolveRegionConfig(_config_0);
    var _config_2 = resolveEndpointsConfig(_config_1);
    var _config_3 = resolveAwsAuthConfig(_config_2);
    var _config_4 = resolveRetryConfig(_config_3);
    var _config_5 = resolveHostHeaderConfig(_config_4);
    var _config_6 = resolveUserAgentConfig(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getRetryPlugin(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
    _this.middlewareStack.use(getLoggerPlugin(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin(_this.config));
    return _this;
  }
  CognitoIdentityClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return CognitoIdentityClient2;
}(Client);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/models/models_0.js
var AmbiguousRoleResolutionType;
(function(AmbiguousRoleResolutionType2) {
  AmbiguousRoleResolutionType2["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
  AmbiguousRoleResolutionType2["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
var CognitoIdentityProvider;
(function(CognitoIdentityProvider2) {
  CognitoIdentityProvider2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
var CreateIdentityPoolInput;
(function(CreateIdentityPoolInput2) {
  CreateIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
var IdentityPool;
(function(IdentityPool2) {
  IdentityPool2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(IdentityPool || (IdentityPool = {}));
var InternalErrorException;
(function(InternalErrorException2) {
  InternalErrorException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(InternalErrorException || (InternalErrorException = {}));
var InvalidParameterException2;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(InvalidParameterException2 || (InvalidParameterException2 = {}));
var LimitExceededException2;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(LimitExceededException2 || (LimitExceededException2 = {}));
var NotAuthorizedException;
(function(NotAuthorizedException2) {
  NotAuthorizedException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(NotAuthorizedException || (NotAuthorizedException = {}));
var ResourceConflictException;
(function(ResourceConflictException2) {
  ResourceConflictException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ResourceConflictException || (ResourceConflictException = {}));
var TooManyRequestsException;
(function(TooManyRequestsException2) {
  TooManyRequestsException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(TooManyRequestsException || (TooManyRequestsException = {}));
var DeleteIdentitiesInput;
(function(DeleteIdentitiesInput2) {
  DeleteIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["ACCESS_DENIED"] = "AccessDenied";
  ErrorCode2["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
var UnprocessedIdentityId;
(function(UnprocessedIdentityId2) {
  UnprocessedIdentityId2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
var DeleteIdentitiesResponse;
(function(DeleteIdentitiesResponse2) {
  DeleteIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
var DeleteIdentityPoolInput;
(function(DeleteIdentityPoolInput2) {
  DeleteIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
var ResourceNotFoundException2;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ResourceNotFoundException2 || (ResourceNotFoundException2 = {}));
var DescribeIdentityInput;
(function(DescribeIdentityInput2) {
  DescribeIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(DescribeIdentityInput || (DescribeIdentityInput = {}));
var IdentityDescription;
(function(IdentityDescription2) {
  IdentityDescription2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(IdentityDescription || (IdentityDescription = {}));
var DescribeIdentityPoolInput;
(function(DescribeIdentityPoolInput2) {
  DescribeIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
var ExternalServiceException;
(function(ExternalServiceException2) {
  ExternalServiceException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ExternalServiceException || (ExternalServiceException = {}));
var GetCredentialsForIdentityInput;
(function(GetCredentialsForIdentityInput2) {
  GetCredentialsForIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
var Credentials2;
(function(Credentials3) {
  Credentials3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(Credentials2 || (Credentials2 = {}));
var GetCredentialsForIdentityResponse;
(function(GetCredentialsForIdentityResponse2) {
  GetCredentialsForIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
var InvalidIdentityPoolConfigurationException;
(function(InvalidIdentityPoolConfigurationException2) {
  InvalidIdentityPoolConfigurationException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
var GetIdInput;
(function(GetIdInput2) {
  GetIdInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetIdInput || (GetIdInput = {}));
var GetIdResponse;
(function(GetIdResponse2) {
  GetIdResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetIdResponse || (GetIdResponse = {}));
var GetIdentityPoolRolesInput;
(function(GetIdentityPoolRolesInput2) {
  GetIdentityPoolRolesInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
var MappingRuleMatchType;
(function(MappingRuleMatchType2) {
  MappingRuleMatchType2["CONTAINS"] = "Contains";
  MappingRuleMatchType2["EQUALS"] = "Equals";
  MappingRuleMatchType2["NOT_EQUAL"] = "NotEqual";
  MappingRuleMatchType2["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var MappingRule;
(function(MappingRule2) {
  MappingRule2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(MappingRule || (MappingRule = {}));
var RulesConfigurationType;
(function(RulesConfigurationType2) {
  RulesConfigurationType2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(RulesConfigurationType || (RulesConfigurationType = {}));
var RoleMappingType;
(function(RoleMappingType2) {
  RoleMappingType2["RULES"] = "Rules";
  RoleMappingType2["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
var RoleMapping;
(function(RoleMapping2) {
  RoleMapping2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(RoleMapping || (RoleMapping = {}));
var GetIdentityPoolRolesResponse;
(function(GetIdentityPoolRolesResponse2) {
  GetIdentityPoolRolesResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
var GetOpenIdTokenInput;
(function(GetOpenIdTokenInput2) {
  GetOpenIdTokenInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
var GetOpenIdTokenResponse;
(function(GetOpenIdTokenResponse2) {
  GetOpenIdTokenResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
var DeveloperUserAlreadyRegisteredException;
(function(DeveloperUserAlreadyRegisteredException2) {
  DeveloperUserAlreadyRegisteredException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
var GetOpenIdTokenForDeveloperIdentityInput;
(function(GetOpenIdTokenForDeveloperIdentityInput2) {
  GetOpenIdTokenForDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
var GetOpenIdTokenForDeveloperIdentityResponse;
(function(GetOpenIdTokenForDeveloperIdentityResponse2) {
  GetOpenIdTokenForDeveloperIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {}));
var ListIdentitiesInput;
(function(ListIdentitiesInput2) {
  ListIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ListIdentitiesInput || (ListIdentitiesInput = {}));
var ListIdentitiesResponse;
(function(ListIdentitiesResponse2) {
  ListIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
var ListIdentityPoolsInput;
(function(ListIdentityPoolsInput2) {
  ListIdentityPoolsInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
var IdentityPoolShortDescription;
(function(IdentityPoolShortDescription2) {
  IdentityPoolShortDescription2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
var ListIdentityPoolsResponse;
(function(ListIdentityPoolsResponse2) {
  ListIdentityPoolsResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
var ListTagsForResourceInput;
(function(ListTagsForResourceInput2) {
  ListTagsForResourceInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
var ListTagsForResourceResponse;
(function(ListTagsForResourceResponse3) {
  ListTagsForResourceResponse3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
var LookupDeveloperIdentityInput;
(function(LookupDeveloperIdentityInput2) {
  LookupDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
var LookupDeveloperIdentityResponse;
(function(LookupDeveloperIdentityResponse2) {
  LookupDeveloperIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
var MergeDeveloperIdentitiesInput;
(function(MergeDeveloperIdentitiesInput2) {
  MergeDeveloperIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
var MergeDeveloperIdentitiesResponse;
(function(MergeDeveloperIdentitiesResponse2) {
  MergeDeveloperIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
var ConcurrentModificationException;
(function(ConcurrentModificationException2) {
  ConcurrentModificationException2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(ConcurrentModificationException || (ConcurrentModificationException = {}));
var SetIdentityPoolRolesInput;
(function(SetIdentityPoolRolesInput2) {
  SetIdentityPoolRolesInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
var TagResourceInput;
(function(TagResourceInput2) {
  TagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(TagResourceInput || (TagResourceInput = {}));
var TagResourceResponse;
(function(TagResourceResponse3) {
  TagResourceResponse3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(TagResourceResponse || (TagResourceResponse = {}));
var UnlinkDeveloperIdentityInput;
(function(UnlinkDeveloperIdentityInput2) {
  UnlinkDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
var UnlinkIdentityInput;
(function(UnlinkIdentityInput2) {
  UnlinkIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
var UntagResourceInput;
(function(UntagResourceInput2) {
  UntagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(UntagResourceInput || (UntagResourceInput = {}));
var UntagResourceResponse;
(function(UntagResourceResponse3) {
  UntagResourceResponse3.filterSensitiveLog = function(obj) {
    return __assign5({}, obj);
  };
})(UntagResourceResponse || (UntagResourceResponse = {}));

// node_modules/@aws-sdk/client-cognito-identity/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1CreateIdentityPoolCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteIdentitiesCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteIdentityPoolCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeIdentityCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeIdentityPoolCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetCredentialsForIdentityCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetIdCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetId"
      };
      body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetIdentityPoolRolesCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles"
      };
      body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetOpenIdTokenCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken"
      };
      body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListIdentitiesCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListIdentityPoolsCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools"
      };
      body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsForResourceCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1LookupDeveloperIdentityCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1MergeDeveloperIdentitiesCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1SetIdentityPoolRolesCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles"
      };
      body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagResourceCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.TagResource"
      };
      body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UnlinkDeveloperIdentityCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UnlinkIdentityCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagResourceCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UntagResource"
      };
      body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UpdateIdentityPoolCommand = function(input, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator7(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1CreateIdentityPoolCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateIdentityPoolCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator7(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign5({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentitiesCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentitiesCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator7(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign5({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "TooManyRequestsException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentityPoolCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentityPoolCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityDescription(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityPoolCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityPoolCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator7(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign5({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidIdentityPoolConfigurationException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetIdCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetIdCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetIdResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetIdCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator7(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign5({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator7(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign5({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetOpenIdTokenCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator7(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign5({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator7(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign5({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DeveloperUserAlreadyRegisteredException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentitiesCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentitiesCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentityPoolsCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListIdentityPoolsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentityPoolsCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForResourceCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsForResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForResourceCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator7(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign5({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator7(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign5({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator7(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign5({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConcurrentModificationException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagResourceCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TagResourceResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagResourceCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator7(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign5({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkIdentityCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UnlinkIdentityCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkIdentityCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator7(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign5({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagResourceCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1UntagResourceResponse(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagResourceCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator7(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign5({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UpdateIdentityPoolCommand = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator7(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign5({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UpdateIdentityPoolCommandError = function(output, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator7(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign5({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign5.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConcurrentModificationException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign5.apply(void 0, [__assign5.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign5(__assign5({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ConcurrentModificationExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
      contents = __assign5({ name: "ConcurrentModificationException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
      contents = __assign5({ name: "DeveloperUserAlreadyRegisteredException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ExternalServiceExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
      contents = __assign5({ name: "ExternalServiceException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InternalErrorExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InternalErrorException(body, context);
      contents = __assign5({ name: "InternalErrorException", $fault: "server", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
      contents = __assign5({ name: "InvalidIdentityPoolConfigurationException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException2(body, context);
      contents = __assign5({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException2(body, context);
      contents = __assign5({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1NotAuthorizedExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
      contents = __assign5({ name: "NotAuthorizedException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceConflictExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
      contents = __assign5({ name: "ResourceConflictException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException2(body, context);
      contents = __assign5({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function(parsedOutput, context) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator7(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
      contents = __assign5({ name: "TooManyRequestsException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1CognitoIdentityProvider = function(input, context) {
  return __assign5(__assign5(__assign5({}, input.ClientId !== void 0 && input.ClientId !== null && { ClientId: input.ClientId }), input.ProviderName !== void 0 && input.ProviderName !== null && { ProviderName: input.ProviderName }), input.ServerSideTokenCheck !== void 0 && input.ServerSideTokenCheck !== null && { ServerSideTokenCheck: input.ServerSideTokenCheck });
};
var serializeAws_json1_1CognitoIdentityProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1CognitoIdentityProvider(entry, context);
  });
};
var serializeAws_json1_1CreateIdentityPoolInput = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5({}, input.AllowClassicFlow !== void 0 && input.AllowClassicFlow !== null && { AllowClassicFlow: input.AllowClassicFlow }), input.AllowUnauthenticatedIdentities !== void 0 && input.AllowUnauthenticatedIdentities !== null && {
    AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
  }), input.CognitoIdentityProviders !== void 0 && input.CognitoIdentityProviders !== null && {
    CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
  }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolName !== void 0 && input.IdentityPoolName !== null && { IdentityPoolName: input.IdentityPoolName }), input.IdentityPoolTags !== void 0 && input.IdentityPoolTags !== null && {
    IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
  }), input.OpenIdConnectProviderARNs !== void 0 && input.OpenIdConnectProviderARNs !== null && {
    OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
  }), input.SamlProviderARNs !== void 0 && input.SamlProviderARNs !== null && {
    SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
  }), input.SupportedLoginProviders !== void 0 && input.SupportedLoginProviders !== null && {
    SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
  });
};
var serializeAws_json1_1DeleteIdentitiesInput = function(input, context) {
  return __assign5({}, input.IdentityIdsToDelete !== void 0 && input.IdentityIdsToDelete !== null && {
    IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context)
  });
};
var serializeAws_json1_1DeleteIdentityPoolInput = function(input, context) {
  return __assign5({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1DescribeIdentityInput = function(input, context) {
  return __assign5({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId });
};
var serializeAws_json1_1DescribeIdentityPoolInput = function(input, context) {
  return __assign5({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1GetCredentialsForIdentityInput = function(input, context) {
  return __assign5(__assign5(__assign5({}, input.CustomRoleArn !== void 0 && input.CustomRoleArn !== null && { CustomRoleArn: input.CustomRoleArn }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1GetIdentityPoolRolesInput = function(input, context) {
  return __assign5({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1GetIdInput = function(input, context) {
  return __assign5(__assign5(__assign5({}, input.AccountId !== void 0 && input.AccountId !== null && { AccountId: input.AccountId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }), input.TokenDuration !== void 0 && input.TokenDuration !== null && { TokenDuration: input.TokenDuration });
};
var serializeAws_json1_1GetOpenIdTokenInput = function(input, context) {
  return __assign5(__assign5({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1IdentityIdList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1IdentityPool = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5(__assign5({}, input.AllowClassicFlow !== void 0 && input.AllowClassicFlow !== null && { AllowClassicFlow: input.AllowClassicFlow }), input.AllowUnauthenticatedIdentities !== void 0 && input.AllowUnauthenticatedIdentities !== null && {
    AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
  }), input.CognitoIdentityProviders !== void 0 && input.CognitoIdentityProviders !== null && {
    CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
  }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.IdentityPoolName !== void 0 && input.IdentityPoolName !== null && { IdentityPoolName: input.IdentityPoolName }), input.IdentityPoolTags !== void 0 && input.IdentityPoolTags !== null && {
    IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
  }), input.OpenIdConnectProviderARNs !== void 0 && input.OpenIdConnectProviderARNs !== null && {
    OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
  }), input.SamlProviderARNs !== void 0 && input.SamlProviderARNs !== null && {
    SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
  }), input.SupportedLoginProviders !== void 0 && input.SupportedLoginProviders !== null && {
    SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
  });
};
var serializeAws_json1_1IdentityPoolTagsListType = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1IdentityPoolTagsType = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1IdentityProviders = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1ListIdentitiesInput = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5({}, input.HideDisabled !== void 0 && input.HideDisabled !== null && { HideDisabled: input.HideDisabled }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1ListIdentityPoolsInput = function(input, context) {
  return __assign5(__assign5({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1ListTagsForResourceInput = function(input, context) {
  return __assign5({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn });
};
var serializeAws_json1_1LoginsList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1LoginsMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1LookupDeveloperIdentityInput = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5(__assign5({}, input.DeveloperUserIdentifier !== void 0 && input.DeveloperUserIdentifier !== null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1MappingRule = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5({}, input.Claim !== void 0 && input.Claim !== null && { Claim: input.Claim }), input.MatchType !== void 0 && input.MatchType !== null && { MatchType: input.MatchType }), input.RoleARN !== void 0 && input.RoleARN !== null && { RoleARN: input.RoleARN }), input.Value !== void 0 && input.Value !== null && { Value: input.Value });
};
var serializeAws_json1_1MappingRulesList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MappingRule(entry, context);
  });
};
var serializeAws_json1_1MergeDeveloperIdentitiesInput = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5({}, input.DestinationUserIdentifier !== void 0 && input.DestinationUserIdentifier !== null && { DestinationUserIdentifier: input.DestinationUserIdentifier }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.SourceUserIdentifier !== void 0 && input.SourceUserIdentifier !== null && { SourceUserIdentifier: input.SourceUserIdentifier });
};
var serializeAws_json1_1OIDCProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1RoleMapping = function(input, context) {
  return __assign5(__assign5(__assign5({}, input.AmbiguousRoleResolution !== void 0 && input.AmbiguousRoleResolution !== null && { AmbiguousRoleResolution: input.AmbiguousRoleResolution }), input.RulesConfiguration !== void 0 && input.RulesConfiguration !== null && {
    RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context)
  }), input.Type !== void 0 && input.Type !== null && { Type: input.Type });
};
var serializeAws_json1_1RoleMappingMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = serializeAws_json1_1RoleMapping(value, context), _b));
  }, {});
};
var serializeAws_json1_1RolesMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1RulesConfigurationType = function(input, context) {
  return __assign5({}, input.Rules !== void 0 && input.Rules !== null && { Rules: serializeAws_json1_1MappingRulesList(input.Rules, context) });
};
var serializeAws_json1_1SAMLProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1SetIdentityPoolRolesInput = function(input, context) {
  return __assign5(__assign5(__assign5({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.RoleMappings !== void 0 && input.RoleMappings !== null && { RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context) }), input.Roles !== void 0 && input.Roles !== null && { Roles: serializeAws_json1_1RolesMap(input.Roles, context) });
};
var serializeAws_json1_1TagResourceInput = function(input, context) {
  return __assign5(__assign5({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context) });
};
var serializeAws_json1_1UnlinkDeveloperIdentityInput = function(input, context) {
  return __assign5(__assign5(__assign5(__assign5({}, input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.DeveloperUserIdentifier !== void 0 && input.DeveloperUserIdentifier !== null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1UnlinkIdentityInput = function(input, context) {
  return __assign5(__assign5(__assign5({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }), input.LoginsToRemove !== void 0 && input.LoginsToRemove !== null && {
    LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context)
  });
};
var serializeAws_json1_1UntagResourceInput = function(input, context) {
  return __assign5(__assign5({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context) });
};
var deserializeAws_json1_1CognitoIdentityProvider = function(output, context) {
  return {
    ClientId: output.ClientId !== void 0 && output.ClientId !== null ? output.ClientId : void 0,
    ProviderName: output.ProviderName !== void 0 && output.ProviderName !== null ? output.ProviderName : void 0,
    ServerSideTokenCheck: output.ServerSideTokenCheck !== void 0 && output.ServerSideTokenCheck !== null ? output.ServerSideTokenCheck : void 0
  };
};
var deserializeAws_json1_1CognitoIdentityProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
  });
};
var deserializeAws_json1_1ConcurrentModificationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1Credentials = function(output, context) {
  return {
    AccessKeyId: output.AccessKeyId !== void 0 && output.AccessKeyId !== null ? output.AccessKeyId : void 0,
    Expiration: output.Expiration !== void 0 && output.Expiration !== null ? new Date(Math.round(output.Expiration * 1e3)) : void 0,
    SecretKey: output.SecretKey !== void 0 && output.SecretKey !== null ? output.SecretKey : void 0,
    SessionToken: output.SessionToken !== void 0 && output.SessionToken !== null ? output.SessionToken : void 0
  };
};
var deserializeAws_json1_1DeleteIdentitiesResponse = function(output, context) {
  return {
    UnprocessedIdentityIds: output.UnprocessedIdentityIds !== void 0 && output.UnprocessedIdentityIds !== null ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context) : void 0
  };
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeveloperUserIdentifierList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1ExternalServiceException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1GetCredentialsForIdentityResponse = function(output, context) {
  return {
    Credentials: output.Credentials !== void 0 && output.Credentials !== null ? deserializeAws_json1_1Credentials(output.Credentials, context) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1GetIdentityPoolRolesResponse = function(output, context) {
  return {
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    RoleMappings: output.RoleMappings !== void 0 && output.RoleMappings !== null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : void 0,
    Roles: output.Roles !== void 0 && output.Roles !== null ? deserializeAws_json1_1RolesMap(output.Roles, context) : void 0
  };
};
var deserializeAws_json1_1GetIdResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    Token: output.Token !== void 0 && output.Token !== null ? output.Token : void 0
  };
};
var deserializeAws_json1_1GetOpenIdTokenResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    Token: output.Token !== void 0 && output.Token !== null ? output.Token : void 0
  };
};
var deserializeAws_json1_1IdentitiesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1IdentityDescription(entry, context);
  });
};
var deserializeAws_json1_1IdentityDescription = function(output, context) {
  return {
    CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? new Date(Math.round(output.CreationDate * 1e3)) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? new Date(Math.round(output.LastModifiedDate * 1e3)) : void 0,
    Logins: output.Logins !== void 0 && output.Logins !== null ? deserializeAws_json1_1LoginsList(output.Logins, context) : void 0
  };
};
var deserializeAws_json1_1IdentityPool = function(output, context) {
  return {
    AllowClassicFlow: output.AllowClassicFlow !== void 0 && output.AllowClassicFlow !== null ? output.AllowClassicFlow : void 0,
    AllowUnauthenticatedIdentities: output.AllowUnauthenticatedIdentities !== void 0 && output.AllowUnauthenticatedIdentities !== null ? output.AllowUnauthenticatedIdentities : void 0,
    CognitoIdentityProviders: output.CognitoIdentityProviders !== void 0 && output.CognitoIdentityProviders !== null ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context) : void 0,
    DeveloperProviderName: output.DeveloperProviderName !== void 0 && output.DeveloperProviderName !== null ? output.DeveloperProviderName : void 0,
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    IdentityPoolName: output.IdentityPoolName !== void 0 && output.IdentityPoolName !== null ? output.IdentityPoolName : void 0,
    IdentityPoolTags: output.IdentityPoolTags !== void 0 && output.IdentityPoolTags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context) : void 0,
    OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs !== void 0 && output.OpenIdConnectProviderARNs !== null ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context) : void 0,
    SamlProviderARNs: output.SamlProviderARNs !== void 0 && output.SamlProviderARNs !== null ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context) : void 0,
    SupportedLoginProviders: output.SupportedLoginProviders !== void 0 && output.SupportedLoginProviders !== null ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context) : void 0
  };
};
var deserializeAws_json1_1IdentityPoolShortDescription = function(output, context) {
  return {
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    IdentityPoolName: output.IdentityPoolName !== void 0 && output.IdentityPoolName !== null ? output.IdentityPoolName : void 0
  };
};
var deserializeAws_json1_1IdentityPoolsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
  });
};
var deserializeAws_json1_1IdentityPoolTagsType = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1IdentityProviders = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1InternalErrorException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListIdentitiesResponse = function(output, context) {
  return {
    Identities: output.Identities !== void 0 && output.Identities !== null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : void 0,
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1ListIdentityPoolsResponse = function(output, context) {
  return {
    IdentityPools: output.IdentityPools !== void 0 && output.IdentityPools !== null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1ListTagsForResourceResponse = function(output, context) {
  return {
    Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : void 0
  };
};
var deserializeAws_json1_1LoginsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityResponse = function(output, context) {
  return {
    DeveloperUserIdentifierList: output.DeveloperUserIdentifierList !== void 0 && output.DeveloperUserIdentifierList !== null ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1MappingRule = function(output, context) {
  return {
    Claim: output.Claim !== void 0 && output.Claim !== null ? output.Claim : void 0,
    MatchType: output.MatchType !== void 0 && output.MatchType !== null ? output.MatchType : void 0,
    RoleARN: output.RoleARN !== void 0 && output.RoleARN !== null ? output.RoleARN : void 0,
    Value: output.Value !== void 0 && output.Value !== null ? output.Value : void 0
  };
};
var deserializeAws_json1_1MappingRulesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MappingRule(entry, context);
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1NotAuthorizedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OIDCProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1ResourceConflictException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1RoleMapping = function(output, context) {
  return {
    AmbiguousRoleResolution: output.AmbiguousRoleResolution !== void 0 && output.AmbiguousRoleResolution !== null ? output.AmbiguousRoleResolution : void 0,
    RulesConfiguration: output.RulesConfiguration !== void 0 && output.RulesConfiguration !== null ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context) : void 0,
    Type: output.Type !== void 0 && output.Type !== null ? output.Type : void 0
  };
};
var deserializeAws_json1_1RoleMappingMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = deserializeAws_json1_1RoleMapping(value, context), _b));
  }, {});
};
var deserializeAws_json1_1RolesMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign5(__assign5({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1RulesConfigurationType = function(output, context) {
  return {
    Rules: output.Rules !== void 0 && output.Rules !== null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : void 0
  };
};
var deserializeAws_json1_1SAMLProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1TagResourceResponse = function(output, context) {
  return {};
};
var deserializeAws_json1_1TooManyRequestsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1UnprocessedIdentityId = function(output, context) {
  return {
    ErrorCode: output.ErrorCode !== void 0 && output.ErrorCode !== null ? output.ErrorCode : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1UnprocessedIdentityIdList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
  });
};
var deserializeAws_json1_1UntagResourceResponse = function(output, context) {
  return {};
};
var deserializeMetadata2 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody2 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString2 = function(streamBody, context) {
  return collectBody2(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest2 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter7(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator7(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody2 = function(streamBody, context) {
  return collectBodyString2(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode2 = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/CreateIdentityPoolCommand.js
var CreateIdentityPoolCommand = function(_super) {
  __extends4(CreateIdentityPoolCommand2, _super);
  function CreateIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "CreateIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateIdentityPoolInput.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1CreateIdentityPoolCommand(input, context);
  };
  CreateIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1CreateIdentityPoolCommand(output, context);
  };
  return CreateIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DeleteIdentitiesCommand.js
var DeleteIdentitiesCommand = function(_super) {
  __extends4(DeleteIdentitiesCommand2, _super);
  function DeleteIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DeleteIdentitiesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteIdentitiesInput.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteIdentitiesCommand(input, context);
  };
  DeleteIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteIdentitiesCommand(output, context);
  };
  return DeleteIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DeleteIdentityPoolCommand.js
var DeleteIdentityPoolCommand = function(_super) {
  __extends4(DeleteIdentityPoolCommand2, _super);
  function DeleteIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DeleteIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteIdentityPoolInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DeleteIdentityPoolCommand(input, context);
  };
  DeleteIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DeleteIdentityPoolCommand(output, context);
  };
  return DeleteIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DescribeIdentityCommand.js
var DescribeIdentityCommand = function(_super) {
  __extends4(DescribeIdentityCommand2, _super);
  function DescribeIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DescribeIdentityCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityDescription.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeIdentityCommand(input, context);
  };
  DescribeIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeIdentityCommand(output, context);
  };
  return DescribeIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DescribeIdentityPoolCommand.js
var DescribeIdentityPoolCommand = function(_super) {
  __extends4(DescribeIdentityPoolCommand2, _super);
  function DescribeIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "DescribeIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeIdentityPoolInput.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1DescribeIdentityPoolCommand(input, context);
  };
  DescribeIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1DescribeIdentityPoolCommand(output, context);
  };
  return DescribeIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetCredentialsForIdentityCommand.js
var GetCredentialsForIdentityCommand = function(_super) {
  __extends4(GetCredentialsForIdentityCommand2, _super);
  function GetCredentialsForIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetCredentialsForIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetCredentialsForIdentityCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetCredentialsForIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);
  };
  GetCredentialsForIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);
  };
  return GetCredentialsForIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdCommand.js
var GetIdCommand = function(_super) {
  __extends4(GetIdCommand2, _super);
  function GetIdCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetIdCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetIdCommand(input, context);
  };
  GetIdCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetIdCommand(output, context);
  };
  return GetIdCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdentityPoolRolesCommand.js
var GetIdentityPoolRolesCommand = function(_super) {
  __extends4(GetIdentityPoolRolesCommand2, _super);
  function GetIdentityPoolRolesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetIdentityPoolRolesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetIdentityPoolRolesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetIdentityPoolRolesInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetIdentityPoolRolesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetIdentityPoolRolesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetIdentityPoolRolesCommand(input, context);
  };
  GetIdentityPoolRolesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetIdentityPoolRolesCommand(output, context);
  };
  return GetIdentityPoolRolesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetOpenIdTokenCommand.js
var GetOpenIdTokenCommand = function(_super) {
  __extends4(GetOpenIdTokenCommand2, _super);
  function GetOpenIdTokenCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetOpenIdTokenCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetOpenIdTokenCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetOpenIdTokenInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetOpenIdTokenResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetOpenIdTokenCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetOpenIdTokenCommand(input, context);
  };
  GetOpenIdTokenCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetOpenIdTokenCommand(output, context);
  };
  return GetOpenIdTokenCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js
var GetOpenIdTokenForDeveloperIdentityCommand = function(_super) {
  __extends4(GetOpenIdTokenForDeveloperIdentityCommand2, _super);
  function GetOpenIdTokenForDeveloperIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetOpenIdTokenForDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetOpenIdTokenForDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);
  };
  GetOpenIdTokenForDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);
  };
  return GetOpenIdTokenForDeveloperIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListIdentitiesCommand.js
var ListIdentitiesCommand = function(_super) {
  __extends4(ListIdentitiesCommand2, _super);
  function ListIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "ListIdentitiesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListIdentitiesInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListIdentitiesCommand(input, context);
  };
  ListIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListIdentitiesCommand(output, context);
  };
  return ListIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListIdentityPoolsCommand.js
var ListIdentityPoolsCommand = function(_super) {
  __extends4(ListIdentityPoolsCommand2, _super);
  function ListIdentityPoolsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListIdentityPoolsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "ListIdentityPoolsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListIdentityPoolsInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListIdentityPoolsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListIdentityPoolsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListIdentityPoolsCommand(input, context);
  };
  ListIdentityPoolsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListIdentityPoolsCommand(output, context);
  };
  return ListIdentityPoolsCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = function(_super) {
  __extends4(ListTagsForResourceCommand3, _super);
  function ListTagsForResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsForResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "ListTagsForResourceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsForResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsForResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsForResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_1ListTagsForResourceCommand(input, context);
  };
  ListTagsForResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1ListTagsForResourceCommand(output, context);
  };
  return ListTagsForResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/LookupDeveloperIdentityCommand.js
var LookupDeveloperIdentityCommand = function(_super) {
  __extends4(LookupDeveloperIdentityCommand2, _super);
  function LookupDeveloperIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  LookupDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "LookupDeveloperIdentityCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: LookupDeveloperIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: LookupDeveloperIdentityResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  LookupDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1LookupDeveloperIdentityCommand(input, context);
  };
  LookupDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1LookupDeveloperIdentityCommand(output, context);
  };
  return LookupDeveloperIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/MergeDeveloperIdentitiesCommand.js
var MergeDeveloperIdentitiesCommand = function(_super) {
  __extends4(MergeDeveloperIdentitiesCommand2, _super);
  function MergeDeveloperIdentitiesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  MergeDeveloperIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "MergeDeveloperIdentitiesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: MergeDeveloperIdentitiesInput.filterSensitiveLog,
      outputFilterSensitiveLog: MergeDeveloperIdentitiesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  MergeDeveloperIdentitiesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1MergeDeveloperIdentitiesCommand(input, context);
  };
  MergeDeveloperIdentitiesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1MergeDeveloperIdentitiesCommand(output, context);
  };
  return MergeDeveloperIdentitiesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/SetIdentityPoolRolesCommand.js
var SetIdentityPoolRolesCommand = function(_super) {
  __extends4(SetIdentityPoolRolesCommand2, _super);
  function SetIdentityPoolRolesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SetIdentityPoolRolesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "SetIdentityPoolRolesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: SetIdentityPoolRolesInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SetIdentityPoolRolesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1SetIdentityPoolRolesCommand(input, context);
  };
  SetIdentityPoolRolesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1SetIdentityPoolRolesCommand(output, context);
  };
  return SetIdentityPoolRolesCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/TagResourceCommand.js
var TagResourceCommand = function(_super) {
  __extends4(TagResourceCommand3, _super);
  function TagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "TagResourceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_1TagResourceCommand(input, context);
  };
  TagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1TagResourceCommand(output, context);
  };
  return TagResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UnlinkDeveloperIdentityCommand.js
var UnlinkDeveloperIdentityCommand = function(_super) {
  __extends4(UnlinkDeveloperIdentityCommand2, _super);
  function UnlinkDeveloperIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UnlinkDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UnlinkDeveloperIdentityCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UnlinkDeveloperIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UnlinkDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UnlinkDeveloperIdentityCommand(input, context);
  };
  UnlinkDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UnlinkDeveloperIdentityCommand(output, context);
  };
  return UnlinkDeveloperIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UnlinkIdentityCommand.js
var UnlinkIdentityCommand = function(_super) {
  __extends4(UnlinkIdentityCommand2, _super);
  function UnlinkIdentityCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UnlinkIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UnlinkIdentityCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UnlinkIdentityInput.filterSensitiveLog,
      outputFilterSensitiveLog: function(output) {
        return output;
      }
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UnlinkIdentityCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UnlinkIdentityCommand(input, context);
  };
  UnlinkIdentityCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UnlinkIdentityCommand(output, context);
  };
  return UnlinkIdentityCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UntagResourceCommand.js
var UntagResourceCommand = function(_super) {
  __extends4(UntagResourceCommand3, _super);
  function UntagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UntagResourceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagResourceInput.filterSensitiveLog,
      outputFilterSensitiveLog: UntagResourceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UntagResourceCommand(input, context);
  };
  UntagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UntagResourceCommand(output, context);
  };
  return UntagResourceCommand3;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UpdateIdentityPoolCommand.js
var UpdateIdentityPoolCommand = function(_super) {
  __extends4(UpdateIdentityPoolCommand2, _super);
  function UpdateIdentityPoolCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getAwsAuthPlugin(configuration));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "CognitoIdentityClient";
    var commandName = "UpdateIdentityPoolCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: IdentityPool.filterSensitiveLog,
      outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateIdentityPoolCommand2.prototype.serialize = function(input, context) {
    return serializeAws_json1_1UpdateIdentityPoolCommand(input, context);
  };
  UpdateIdentityPoolCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_json1_1UpdateIdentityPoolCommand(output, context);
  };
  return UpdateIdentityPoolCommand2;
}(Command);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentity.js
var CognitoIdentity = function(_super) {
  __extends4(CognitoIdentity2, _super);
  function CognitoIdentity2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CognitoIdentity2.prototype.createIdentityPool = function(args, optionsOrCb, cb) {
    var command = new CreateIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.deleteIdentities = function(args, optionsOrCb, cb) {
    var command = new DeleteIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.deleteIdentityPool = function(args, optionsOrCb, cb) {
    var command = new DeleteIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.describeIdentity = function(args, optionsOrCb, cb) {
    var command = new DescribeIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.describeIdentityPool = function(args, optionsOrCb, cb) {
    var command = new DescribeIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getCredentialsForIdentity = function(args, optionsOrCb, cb) {
    var command = new GetCredentialsForIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getId = function(args, optionsOrCb, cb) {
    var command = new GetIdCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getIdentityPoolRoles = function(args, optionsOrCb, cb) {
    var command = new GetIdentityPoolRolesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getOpenIdToken = function(args, optionsOrCb, cb) {
    var command = new GetOpenIdTokenCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.getOpenIdTokenForDeveloperIdentity = function(args, optionsOrCb, cb) {
    var command = new GetOpenIdTokenForDeveloperIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.listIdentities = function(args, optionsOrCb, cb) {
    var command = new ListIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.listIdentityPools = function(args, optionsOrCb, cb) {
    var command = new ListIdentityPoolsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.listTagsForResource = function(args, optionsOrCb, cb) {
    var command = new ListTagsForResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.lookupDeveloperIdentity = function(args, optionsOrCb, cb) {
    var command = new LookupDeveloperIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.mergeDeveloperIdentities = function(args, optionsOrCb, cb) {
    var command = new MergeDeveloperIdentitiesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.setIdentityPoolRoles = function(args, optionsOrCb, cb) {
    var command = new SetIdentityPoolRolesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.tagResource = function(args, optionsOrCb, cb) {
    var command = new TagResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.unlinkDeveloperIdentity = function(args, optionsOrCb, cb) {
    var command = new UnlinkDeveloperIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.unlinkIdentity = function(args, optionsOrCb, cb) {
    var command = new UnlinkIdentityCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.untagResource = function(args, optionsOrCb, cb) {
    var command = new UntagResourceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  CognitoIdentity2.prototype.updateIdentityPool = function(args, optionsOrCb, cb) {
    var command = new UpdateIdentityPoolCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return CognitoIdentity2;
}(CognitoIdentityClient);

// node_modules/@aws-sdk/property-provider/dist/es/ProviderError.js
var ProviderError = function(_super) {
  __extends3(ProviderError4, _super);
  function ProviderError4(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    return _this;
  }
  return ProviderError4;
}(Error);

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/resolveLogins.js
function resolveLogins(logins) {
  return Promise.all(Object.keys(logins).reduce(function(arr, name) {
    var tokenOrProvider = logins[name];
    if (typeof tokenOrProvider === "string") {
      arr.push([name, tokenOrProvider]);
    } else {
      arr.push(tokenOrProvider().then(function(token) {
        return [name, token];
      }));
    }
    return arr;
  }, [])).then(function(resolvedPairs) {
    return resolvedPairs.reduce(function(logins2, _a) {
      var _b = __read6(_a, 2), key = _b[0], value = _b[1];
      logins2[key] = value;
      return logins2;
    }, {});
  });
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentity.js
function fromCognitoIdentity(parameters) {
  var _this = this;
  return function() {
    return __awaiter3(_this, void 0, void 0, function() {
      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
      var _j;
      return __generator3(this, function(_k) {
        switch (_k.label) {
          case 0:
            _f = (_e = parameters.client).send;
            _g = GetCredentialsForIdentityCommand.bind;
            _j = {
              CustomRoleArn: parameters.customRoleArn,
              IdentityId: parameters.identityId
            };
            if (!parameters.logins)
              return [3, 2];
            return [4, resolveLogins(parameters.logins)];
          case 1:
            _h = _k.sent();
            return [3, 3];
          case 2:
            _h = void 0;
            _k.label = 3;
          case 3:
            return [4, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];
          case 4:
            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
            return [2, {
              identityId: parameters.identityId,
              accessKeyId: AccessKeyId,
              secretAccessKey: SecretKey,
              sessionToken: SessionToken,
              expiration: Expiration
            }];
        }
      });
    });
  };
}
function throwOnMissingAccessKeyId() {
  throw new ProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
  throw new ProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
  throw new ProviderError("Response from Amazon Cognito contained no secret key");
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/IndexedDbStorage.js
var STORE_NAME = "IdentityIds";
var IndexedDbStorage = function() {
  function IndexedDbStorage2(dbName) {
    if (dbName === void 0) {
      dbName = "aws:cognito-identity-ids";
    }
    this.dbName = dbName;
  }
  IndexedDbStorage2.prototype.getItem = function(key) {
    return this.withObjectStore("readonly", function(store) {
      var req = store.get(key);
      return new Promise(function(resolve) {
        req.onerror = function() {
          return resolve(null);
        };
        req.onsuccess = function() {
          return resolve(req.result ? req.result.value : null);
        };
      });
    }).catch(function() {
      return null;
    });
  };
  IndexedDbStorage2.prototype.removeItem = function(key) {
    return this.withObjectStore("readwrite", function(store) {
      var req = store.delete(key);
      return new Promise(function(resolve, reject) {
        req.onerror = function() {
          return reject(req.error);
        };
        req.onsuccess = function() {
          return resolve();
        };
      });
    });
  };
  IndexedDbStorage2.prototype.setItem = function(id, value) {
    return this.withObjectStore("readwrite", function(store) {
      var req = store.put({ id, value });
      return new Promise(function(resolve, reject) {
        req.onerror = function() {
          return reject(req.error);
        };
        req.onsuccess = function() {
          return resolve();
        };
      });
    });
  };
  IndexedDbStorage2.prototype.getDb = function() {
    var openDbRequest = self.indexedDB.open(this.dbName, 1);
    return new Promise(function(resolve, reject) {
      openDbRequest.onsuccess = function() {
        resolve(openDbRequest.result);
      };
      openDbRequest.onerror = function() {
        reject(openDbRequest.error);
      };
      openDbRequest.onblocked = function() {
        reject(new Error("Unable to access DB"));
      };
      openDbRequest.onupgradeneeded = function() {
        var db = openDbRequest.result;
        db.onerror = function() {
          reject(new Error("Failed to create object store"));
        };
        db.createObjectStore(STORE_NAME, { keyPath: "id" });
      };
    });
  };
  IndexedDbStorage2.prototype.withObjectStore = function(mode, action) {
    return this.getDb().then(function(db) {
      var tx = db.transaction(STORE_NAME, mode);
      tx.oncomplete = function() {
        return db.close();
      };
      return new Promise(function(resolve, reject) {
        tx.onerror = function() {
          return reject(tx.error);
        };
        resolve(action(tx.objectStore(STORE_NAME)));
      }).catch(function(err) {
        db.close();
        throw err;
      });
    });
  };
  return IndexedDbStorage2;
}();

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/InMemoryStorage.js
var InMemoryStorage = function() {
  function InMemoryStorage2(store) {
    if (store === void 0) {
      store = {};
    }
    this.store = store;
  }
  InMemoryStorage2.prototype.getItem = function(key) {
    if (key in this.store) {
      return this.store[key];
    }
    return null;
  };
  InMemoryStorage2.prototype.removeItem = function(key) {
    delete this.store[key];
  };
  InMemoryStorage2.prototype.setItem = function(key, value) {
    this.store[key] = value;
  };
  return InMemoryStorage2;
}();

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/localStorage.js
var inMemoryStorage = new InMemoryStorage();
function localStorage() {
  if (typeof self === "object" && self.indexedDB) {
    return new IndexedDbStorage();
  }
  if (typeof window === "object" && window.localStorage) {
    return window.localStorage;
  }
  return inMemoryStorage;
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentityPool.js
function fromCognitoIdentityPool(_a) {
  var _this = this;
  var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? localStorage() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : void 0 : _c;
  var cacheKey = userIdentifier ? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier : void 0;
  var provider = function() {
    return __awaiter3(_this, void 0, void 0, function() {
      var identityId, _a2, _b2, IdentityId, _c2, _d, _e, _f;
      var _g;
      return __generator3(this, function(_h) {
        switch (_h.label) {
          case 0:
            _a2 = cacheKey;
            if (!_a2)
              return [3, 2];
            return [4, cache.getItem(cacheKey)];
          case 1:
            _a2 = _h.sent();
            _h.label = 2;
          case 2:
            identityId = _a2;
            if (!!identityId)
              return [3, 7];
            _d = (_c2 = client).send;
            _e = GetIdCommand.bind;
            _g = {
              AccountId: accountId,
              IdentityPoolId: identityPoolId
            };
            if (!logins)
              return [3, 4];
            return [4, resolveLogins(logins)];
          case 3:
            _f = _h.sent();
            return [3, 5];
          case 4:
            _f = void 0;
            _h.label = 5;
          case 5:
            return [4, _d.apply(_c2, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];
          case 6:
            _b2 = _h.sent().IdentityId, IdentityId = _b2 === void 0 ? throwOnMissingId() : _b2;
            identityId = IdentityId;
            if (cacheKey) {
              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function() {
              });
            }
            _h.label = 7;
          case 7:
            provider = fromCognitoIdentity({
              client,
              customRoleArn,
              logins,
              identityId
            });
            return [2, provider()];
        }
      });
    });
  };
  return function() {
    return provider().catch(function(err) {
      return __awaiter3(_this, void 0, void 0, function() {
        return __generator3(this, function(_a2) {
          if (cacheKey) {
            Promise.resolve(cache.removeItem(cacheKey)).catch(function() {
            });
          }
          throw err;
        });
      });
    });
  };
}
function throwOnMissingId() {
  throw new ProviderError("Response from Amazon Cognito contained no identity ID");
}

// node_modules/@aws-amplify/core/lib-esm/Credentials.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __awaiter8 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator8 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger11 = new ConsoleLogger("Credentials");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var CredentialsClass = function() {
  function CredentialsClass2(config) {
    this._gettingCredPromise = null;
    this._refreshHandlers = {};
    this.Auth = void 0;
    this.configure(config);
    this._refreshHandlers["google"] = GoogleOAuth2.refreshGoogleToken;
    this._refreshHandlers["facebook"] = FacebookOAuth2.refreshFacebookToken;
  }
  CredentialsClass2.prototype.getModuleName = function() {
    return "Credentials";
  };
  CredentialsClass2.prototype.getCredSource = function() {
    return this._credentials_source;
  };
  CredentialsClass2.prototype.configure = function(config) {
    if (!config)
      return this._config || {};
    this._config = Object.assign({}, this._config, config);
    var refreshHandlers = this._config.refreshHandlers;
    if (refreshHandlers) {
      this._refreshHandlers = __assign6(__assign6({}, this._refreshHandlers), refreshHandlers);
    }
    this._storage = this._config.storage;
    if (!this._storage) {
      this._storage = new StorageHelper().getStorage();
    }
    this._storageSync = Promise.resolve();
    if (typeof this._storage["sync"] === "function") {
      this._storageSync = this._storage["sync"]();
    }
    return this._config;
  };
  CredentialsClass2.prototype.get = function() {
    logger11.debug("getting credentials");
    return this._pickupCredentials();
  };
  CredentialsClass2.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
    return "" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;
  };
  CredentialsClass2.prototype._pickupCredentials = function() {
    logger11.debug("picking up credentials");
    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
      logger11.debug("getting new cred promise");
      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
    } else {
      logger11.debug("getting old cred promise");
    }
    return this._gettingCredPromise;
  };
  CredentialsClass2.prototype._keepAlive = function() {
    return __awaiter8(this, void 0, void 0, function() {
      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
      return __generator8(this, function(_b) {
        switch (_b.label) {
          case 0:
            logger11.debug("checking if credentials exists and not expired");
            cred = this._credentials;
            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
              logger11.debug("credentials not changed and not expired, directly return");
              return [2, Promise.resolve(cred)];
            }
            logger11.debug("need to get a new credential or refresh the existing one");
            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;
            if (!Auth || typeof Auth.currentUserCredentials !== "function") {
              return [2, Promise.reject("No Auth module registered in Amplify")];
            }
            if (!(!this._isExpired(cred) && this._isPastTTL()))
              return [3, 6];
            logger11.debug("ttl has passed but token is not yet expired");
            _b.label = 1;
          case 1:
            _b.trys.push([1, 5, , 6]);
            return [4, Auth.currentUserPoolUser()];
          case 2:
            user_1 = _b.sent();
            return [4, Auth.currentSession()];
          case 3:
            session = _b.sent();
            refreshToken_1 = session.refreshToken;
            refreshRequest = new Promise(function(res, rej) {
              user_1.refreshSession(refreshToken_1, function(err, data) {
                return err ? rej(err) : res(data);
              });
            });
            return [4, refreshRequest];
          case 4:
            _b.sent();
            return [3, 6];
          case 5:
            err_1 = _b.sent();
            logger11.debug("Error attempting to refreshing the session", err_1);
            return [3, 6];
          case 6:
            return [2, Auth.currentUserCredentials()];
        }
      });
    });
  };
  CredentialsClass2.prototype.refreshFederatedToken = function(federatedInfo) {
    logger11.debug("Getting federated credentials");
    var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
    var expires_at = federatedInfo.expires_at;
    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1e3 : expires_at;
    var that = this;
    logger11.debug("checking if federated jwt token expired");
    if (expires_at > new Date().getTime()) {
      logger11.debug("token not expired");
      return this._setCredentialsFromFederation({
        provider,
        token,
        user,
        identity_id,
        expires_at
      });
    } else {
      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
        logger11.debug("getting refreshed jwt token from federation provider");
        return this._providerRefreshWithRetry({
          refreshHandler: that._refreshHandlers[provider],
          provider,
          user
        });
      } else {
        logger11.debug("no refresh handler for provider:", provider);
        this.clear();
        return Promise.reject("no refresh handler for provider");
      }
    }
  };
  CredentialsClass2.prototype._providerRefreshWithRetry = function(_a) {
    var _this = this;
    var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
    var MAX_DELAY_MS2 = 10 * 1e3;
    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS2).then(function(data) {
      logger11.debug("refresh federated token sucessfully", data);
      return _this._setCredentialsFromFederation({
        provider,
        token: data.token,
        user,
        identity_id: data.identity_id,
        expires_at: data.expires_at
      });
    }).catch(function(e) {
      var isNetworkError = typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
      if (!isNetworkError) {
        _this.clear();
      }
      logger11.debug("refresh federated token failed", e);
      return Promise.reject("refreshing federation token failed: " + e);
    });
  };
  CredentialsClass2.prototype._isExpired = function(credentials) {
    if (!credentials) {
      logger11.debug("no credentials for expiration check");
      return true;
    }
    logger11.debug("are these credentials expired?", credentials);
    var ts = Date.now();
    var expiration = credentials.expiration;
    return expiration.getTime() <= ts;
  };
  CredentialsClass2.prototype._isPastTTL = function() {
    return this._nextCredentialsRefresh <= Date.now();
  };
  CredentialsClass2.prototype._setCredentialsForGuest = function() {
    return __awaiter8(this, void 0, void 0, function() {
      var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;
      var _this = this;
      return __generator8(this, function(_c) {
        switch (_c.label) {
          case 0:
            logger11.debug("setting credentials for guest");
            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;
            if (mandatorySignIn) {
              return [2, Promise.reject("cannot get guest credentials when mandatory signin enabled")];
            }
            if (!identityPoolId) {
              logger11.debug("No Cognito Identity pool provided for unauthenticated access");
              return [2, Promise.reject("No Cognito Identity pool provided for unauthenticated access")];
            }
            if (!region) {
              logger11.debug("region is not configured for getting the credentials");
              return [2, Promise.reject("region is not configured for getting the credentials")];
            }
            _b = this;
            return [4, this._getGuestIdentityId()];
          case 1:
            identityId = _b._identityId = _c.sent();
            cognitoClient = new CognitoIdentityClient({
              region,
              customUserAgent: getAmplifyUserAgent()
            });
            credentials = void 0;
            if (identityId) {
              cognitoIdentityParams = {
                identityId,
                client: cognitoClient
              };
              credentials = fromCognitoIdentity(cognitoIdentityParams)();
            } else {
              credentialsProvider = function() {
                return __awaiter8(_this, void 0, void 0, function() {
                  var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
                  return __generator8(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        return [4, cognitoClient.send(new GetIdCommand({
                          IdentityPoolId: identityPoolId
                        }))];
                      case 1:
                        IdentityId = _a2.sent().IdentityId;
                        this._identityId = IdentityId;
                        cognitoIdentityParams2 = {
                          client: cognitoClient,
                          identityId: IdentityId
                        };
                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams2);
                        return [2, credentialsFromCognitoIdentity()];
                    }
                  });
                });
              };
              credentials = credentialsProvider().catch(function(err) {
                return __awaiter8(_this, void 0, void 0, function() {
                  return __generator8(this, function(_a2) {
                    throw err;
                  });
                });
              });
            }
            return [2, this._loadCredentials(credentials, "guest", false, null).then(function(res) {
              return res;
            }).catch(function(e) {
              return __awaiter8(_this, void 0, void 0, function() {
                var credentialsProvider2;
                var _this2 = this;
                return __generator8(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      if (!(e.name === "ResourceNotFoundException" && e.message === "Identity '" + identityId + "' not found."))
                        return [3, 2];
                      logger11.debug("Failed to load guest credentials");
                      return [4, this._removeGuestIdentityId()];
                    case 1:
                      _a2.sent();
                      credentialsProvider2 = function() {
                        return __awaiter8(_this2, void 0, void 0, function() {
                          var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
                          return __generator8(this, function(_a3) {
                            switch (_a3.label) {
                              case 0:
                                return [4, cognitoClient.send(new GetIdCommand({
                                  IdentityPoolId: identityPoolId
                                }))];
                              case 1:
                                IdentityId = _a3.sent().IdentityId;
                                this._identityId = IdentityId;
                                cognitoIdentityParams2 = {
                                  client: cognitoClient,
                                  identityId: IdentityId
                                };
                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams2);
                                return [2, credentialsFromCognitoIdentity()];
                            }
                          });
                        });
                      };
                      credentials = credentialsProvider2().catch(function(err) {
                        return __awaiter8(_this2, void 0, void 0, function() {
                          return __generator8(this, function(_a3) {
                            throw err;
                          });
                        });
                      });
                      return [2, this._loadCredentials(credentials, "guest", false, null)];
                    case 2:
                      return [2, e];
                  }
                });
              });
            })];
        }
      });
    });
  };
  CredentialsClass2.prototype._setCredentialsFromFederation = function(params) {
    var provider = params.provider, token = params.token, identity_id = params.identity_id;
    var domains = {
      google: "accounts.google.com",
      facebook: "graph.facebook.com",
      amazon: "www.amazon.com",
      developer: "cognito-identity.amazonaws.com"
    };
    var domain = domains[provider] || provider;
    if (!domain) {
      return Promise.reject("You must specify a federated provider");
    }
    var logins = {};
    logins[domain] = token;
    var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;
    if (!identityPoolId) {
      logger11.debug("No Cognito Federated Identity pool provided");
      return Promise.reject("No Cognito Federated Identity pool provided");
    }
    if (!region) {
      logger11.debug("region is not configured for getting the credentials");
      return Promise.reject("region is not configured for getting the credentials");
    }
    var cognitoClient = new CognitoIdentityClient({
      region,
      customUserAgent: getAmplifyUserAgent()
    });
    var credentials = void 0;
    if (identity_id) {
      var cognitoIdentityParams = {
        identityId: identity_id,
        logins,
        client: cognitoClient
      };
      credentials = fromCognitoIdentity(cognitoIdentityParams)();
    } else {
      var cognitoIdentityParams = {
        logins,
        identityPoolId,
        client: cognitoClient
      };
      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();
    }
    return this._loadCredentials(credentials, "federated", true, params);
  };
  CredentialsClass2.prototype._setCredentialsFromSession = function(session) {
    var _this = this;
    logger11.debug("set credentials from session");
    var idToken = session.getIdToken().getJwtToken();
    var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;
    if (!identityPoolId) {
      logger11.debug("No Cognito Federated Identity pool provided");
      return Promise.reject("No Cognito Federated Identity pool provided");
    }
    if (!region) {
      logger11.debug("region is not configured for getting the credentials");
      return Promise.reject("region is not configured for getting the credentials");
    }
    var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
    var logins = {};
    logins[key] = idToken;
    var cognitoClient = new CognitoIdentityClient({
      region,
      customUserAgent: getAmplifyUserAgent()
    });
    var credentialsProvider = function() {
      return __awaiter8(_this, void 0, void 0, function() {
        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a2, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
        return __generator8(this, function(_c) {
          switch (_c.label) {
            case 0:
              return [4, this._getGuestIdentityId()];
            case 1:
              guestIdentityId = _c.sent();
              if (!!guestIdentityId)
                return [3, 3];
              return [4, cognitoClient.send(new GetIdCommand({
                IdentityPoolId: identityPoolId,
                Logins: logins
              }))];
            case 2:
              IdentityId = _c.sent().IdentityId;
              generatedOrRetrievedIdentityId = IdentityId;
              _c.label = 3;
            case 3:
              return [4, cognitoClient.send(new GetCredentialsForIdentityCommand({
                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                Logins: logins
              }))];
            case 4:
              _a2 = _c.sent(), _b = _a2.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a2.IdentityId;
              this._identityId = primaryIdentityId;
              if (!guestIdentityId)
                return [3, 6];
              logger11.debug("The guest identity " + guestIdentityId + " has been successfully linked to the logins");
              if (guestIdentityId === primaryIdentityId) {
                logger11.debug("The guest identity " + guestIdentityId + " has become the primary identity");
              }
              return [4, this._removeGuestIdentityId()];
            case 5:
              _c.sent();
              _c.label = 6;
            case 6:
              return [2, {
                accessKeyId: AccessKeyId,
                secretAccessKey: SecretKey,
                sessionToken: SessionToken,
                expiration: Expiration,
                identityId: primaryIdentityId
              }];
          }
        });
      });
    };
    var credentials = credentialsProvider().catch(function(err) {
      return __awaiter8(_this, void 0, void 0, function() {
        return __generator8(this, function(_a2) {
          throw err;
        });
      });
    });
    return this._loadCredentials(credentials, "userPool", true, null);
  };
  CredentialsClass2.prototype._loadCredentials = function(credentials, source, authenticated, info) {
    var _this = this;
    var that = this;
    return new Promise(function(res, rej) {
      credentials.then(function(credentials2) {
        return __awaiter8(_this, void 0, void 0, function() {
          var user, provider, token, expires_at, identity_id;
          return __generator8(this, function(_a) {
            switch (_a.label) {
              case 0:
                logger11.debug("Load credentials successfully", credentials2);
                if (this._identityId && !credentials2.identityId) {
                  credentials2["identityId"] = this._identityId;
                }
                that._credentials = credentials2;
                that._credentials.authenticated = authenticated;
                that._credentials_source = source;
                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                if (source === "federated") {
                  user = Object.assign({ id: this._credentials.identityId }, info.user);
                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                  try {
                    this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                      provider,
                      token,
                      user,
                      expires_at,
                      identity_id
                    }));
                  } catch (e) {
                    logger11.debug("Failed to put federated info into auth storage", e);
                  }
                }
                if (!(source === "guest"))
                  return [3, 2];
                return [4, this._setGuestIdentityId(credentials2.identityId)];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                res(that._credentials);
                return [2];
            }
          });
        });
      }).catch(function(err) {
        if (err) {
          logger11.debug("Failed to load credentials", credentials);
          logger11.debug("Error loading credentials", err);
          rej(err);
          return;
        }
      });
    });
  };
  CredentialsClass2.prototype.set = function(params, source) {
    if (source === "session") {
      return this._setCredentialsFromSession(params);
    } else if (source === "federation") {
      return this._setCredentialsFromFederation(params);
    } else if (source === "guest") {
      return this._setCredentialsForGuest();
    } else {
      logger11.debug("no source specified for setting credentials");
      return Promise.reject("invalid source");
    }
  };
  CredentialsClass2.prototype.clear = function() {
    return __awaiter8(this, void 0, void 0, function() {
      return __generator8(this, function(_a) {
        this._credentials = null;
        this._credentials_source = null;
        logger11.debug("removing aws-amplify-federatedInfo from storage");
        this._storage.removeItem("aws-amplify-federatedInfo");
        return [2];
      });
    });
  };
  CredentialsClass2.prototype._getGuestIdentityId = function() {
    return __awaiter8(this, void 0, void 0, function() {
      var identityPoolId, e_1;
      return __generator8(this, function(_a) {
        switch (_a.label) {
          case 0:
            identityPoolId = this._config.identityPoolId;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, this._storageSync];
          case 2:
            _a.sent();
            return [2, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];
          case 3:
            e_1 = _a.sent();
            logger11.debug("Failed to get the cached guest identityId", e_1);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  CredentialsClass2.prototype._setGuestIdentityId = function(identityId) {
    return __awaiter8(this, void 0, void 0, function() {
      var identityPoolId, e_2;
      return __generator8(this, function(_a) {
        switch (_a.label) {
          case 0:
            identityPoolId = this._config.identityPoolId;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, this._storageSync];
          case 2:
            _a.sent();
            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
            return [3, 4];
          case 3:
            e_2 = _a.sent();
            logger11.debug("Failed to cache guest identityId", e_2);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  CredentialsClass2.prototype._removeGuestIdentityId = function() {
    return __awaiter8(this, void 0, void 0, function() {
      var identityPoolId;
      return __generator8(this, function(_a) {
        identityPoolId = this._config.identityPoolId;
        logger11.debug("removing " + this._getCognitoIdentityIdStorageKey(identityPoolId) + " from storage");
        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
        return [2];
      });
    });
  };
  CredentialsClass2.prototype.shear = function(credentials) {
    return {
      accessKeyId: credentials.accessKeyId,
      sessionToken: credentials.sessionToken,
      secretAccessKey: credentials.secretAccessKey,
      identityId: credentials.identityId,
      authenticated: credentials.authenticated
    };
  };
  return CredentialsClass2;
}();
var Credentials = new CredentialsClass(null);
Amplify.register(Credentials);

// node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js
var ServiceWorkerClass = function() {
  function ServiceWorkerClass2() {
    this._logger = new ConsoleLogger("ServiceWorker");
  }
  Object.defineProperty(ServiceWorkerClass2.prototype, "serviceWorker", {
    get: function() {
      return this._serviceWorker;
    },
    enumerable: true,
    configurable: true
  });
  ServiceWorkerClass2.prototype.register = function(filePath, scope) {
    var _this = this;
    if (filePath === void 0) {
      filePath = "/service-worker.js";
    }
    if (scope === void 0) {
      scope = "/";
    }
    this._logger.debug("registering " + filePath);
    this._logger.debug("registering service worker with scope " + scope);
    return new Promise(function(resolve, reject) {
      if (navigator && "serviceWorker" in navigator) {
        navigator.serviceWorker.register(filePath, {
          scope
        }).then(function(registration) {
          if (registration.installing) {
            _this._serviceWorker = registration.installing;
          } else if (registration.waiting) {
            _this._serviceWorker = registration.waiting;
          } else if (registration.active) {
            _this._serviceWorker = registration.active;
          }
          _this._registration = registration;
          _this._setupListeners();
          _this._logger.debug("Service Worker Registration Success: " + registration);
          return resolve(registration);
        }).catch(function(error) {
          _this._logger.debug("Service Worker Registration Failed " + error);
          return reject(error);
        });
      } else {
        return reject(new Error("Service Worker not available"));
      }
    });
  };
  ServiceWorkerClass2.prototype.enablePush = function(publicKey) {
    var _this = this;
    if (!this._registration)
      throw new Error("Service Worker not registered");
    this._publicKey = publicKey;
    return new Promise(function(resolve, reject) {
      if (browserOrNode().isBrowser) {
        _this._registration.pushManager.getSubscription().then(function(subscription) {
          if (subscription) {
            _this._subscription = subscription;
            _this._logger.debug("User is subscribed to push: " + JSON.stringify(subscription));
            resolve(subscription);
          } else {
            _this._logger.debug("User is NOT subscribed to push");
            return _this._registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: _this._urlB64ToUint8Array(publicKey)
            }).then(function(subscription2) {
              _this._subscription = subscription2;
              _this._logger.debug("User subscribed: " + JSON.stringify(subscription2));
              resolve(subscription2);
            }).catch(function(error) {
              _this._logger.error(error);
            });
          }
        });
      } else {
        return reject(new Error("Service Worker not available"));
      }
    });
  };
  ServiceWorkerClass2.prototype._urlB64ToUint8Array = function(base64String) {
    var padding = "=".repeat((4 - base64String.length % 4) % 4);
    var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for (var i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  };
  ServiceWorkerClass2.prototype.send = function(message) {
    if (this._serviceWorker) {
      this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
    }
  };
  ServiceWorkerClass2.prototype._setupListeners = function() {
    var _this = this;
    this._serviceWorker.addEventListener("statechange", function(event) {
      var currentState = _this._serviceWorker.state;
      _this._logger.debug("ServiceWorker statechange: " + currentState);
      if (Amplify.Analytics && typeof Amplify.Analytics.record === "function") {
        Amplify.Analytics.record({
          name: "ServiceWorker",
          attributes: {
            state: currentState
          }
        });
      }
    });
    this._serviceWorker.addEventListener("message", function(event) {
      _this._logger.debug("ServiceWorker message event: " + event);
    });
  };
  return ServiceWorkerClass2;
}();

// node_modules/universal-cookie/es6/Cookies.js
var cookie2 = __toESM(require_cookie());

// node_modules/universal-cookie/es6/utils.js
var cookie = __toESM(require_cookie());
function hasDocumentCookie() {
  return typeof document === "object" && typeof document.cookie === "string";
}
function parseCookies(cookies, options) {
  if (typeof cookies === "string") {
    return cookie.parse(cookies, options);
  } else if (typeof cookies === "object" && cookies !== null) {
    return cookies;
  } else {
    return {};
  }
}
function isParsingCookie(value, doNotParse) {
  if (typeof doNotParse === "undefined") {
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
  }
  return !doNotParse;
}
function readCookie(value, options) {
  if (options === void 0) {
    options = {};
  }
  var cleanValue = cleanupCookieValue(value);
  if (isParsingCookie(cleanValue, options.doNotParse)) {
    try {
      return JSON.parse(cleanValue);
    } catch (e) {
    }
  }
  return value;
}
function cleanupCookieValue(value) {
  if (value && value[0] === "j" && value[1] === ":") {
    return value.substr(2);
  }
  return value;
}

// node_modules/universal-cookie/es6/Cookies.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var Cookies = function() {
  function Cookies2(cookies, options) {
    var _this = this;
    this.changeListeners = [];
    this.HAS_DOCUMENT_COOKIE = false;
    this.cookies = parseCookies(cookies, options);
    new Promise(function() {
      _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
    }).catch(function() {
    });
  }
  Cookies2.prototype._updateBrowserValues = function(parseOptions) {
    if (!this.HAS_DOCUMENT_COOKIE) {
      return;
    }
    this.cookies = cookie2.parse(document.cookie, parseOptions);
  };
  Cookies2.prototype._emitChange = function(params) {
    for (var i = 0; i < this.changeListeners.length; ++i) {
      this.changeListeners[i](params);
    }
  };
  Cookies2.prototype.get = function(name, options, parseOptions) {
    if (options === void 0) {
      options = {};
    }
    this._updateBrowserValues(parseOptions);
    return readCookie(this.cookies[name], options);
  };
  Cookies2.prototype.getAll = function(options, parseOptions) {
    if (options === void 0) {
      options = {};
    }
    this._updateBrowserValues(parseOptions);
    var result = {};
    for (var name_1 in this.cookies) {
      result[name_1] = readCookie(this.cookies[name_1], options);
    }
    return result;
  };
  Cookies2.prototype.set = function(name, value, options) {
    var _a;
    if (typeof value === "object") {
      value = JSON.stringify(value);
    }
    this.cookies = __assign7(__assign7({}, this.cookies), (_a = {}, _a[name] = value, _a));
    if (this.HAS_DOCUMENT_COOKIE) {
      document.cookie = cookie2.serialize(name, value, options);
    }
    this._emitChange({ name, value, options });
  };
  Cookies2.prototype.remove = function(name, options) {
    var finalOptions = options = __assign7(__assign7({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 });
    this.cookies = __assign7({}, this.cookies);
    delete this.cookies[name];
    if (this.HAS_DOCUMENT_COOKIE) {
      document.cookie = cookie2.serialize(name, "", finalOptions);
    }
    this._emitChange({ name, value: void 0, options });
  };
  Cookies2.prototype.addChangeListener = function(callback) {
    this.changeListeners.push(callback);
  };
  Cookies2.prototype.removeChangeListener = function(callback) {
    var idx = this.changeListeners.indexOf(callback);
    if (idx >= 0) {
      this.changeListeners.splice(idx, 1);
    }
  };
  return Cookies2;
}();
var Cookies_default = Cookies;

// node_modules/universal-cookie/es6/index.js
var es6_default = Cookies_default;

// node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
var isBrowser = browserOrNode().isBrowser;
var UniversalStorage = function() {
  function UniversalStorage2(context) {
    if (context === void 0) {
      context = {};
    }
    this.cookies = new es6_default();
    this.store = isBrowser ? window.localStorage : /* @__PURE__ */ Object.create(null);
    this.cookies = context.req ? new es6_default(context.req.headers.cookie) : new es6_default();
    Object.assign(this.store, this.cookies.getAll());
  }
  Object.defineProperty(UniversalStorage2.prototype, "length", {
    get: function() {
      return Object.entries(this.store).length;
    },
    enumerable: true,
    configurable: true
  });
  UniversalStorage2.prototype.clear = function() {
    var _this = this;
    Array.from(new Array(this.length)).map(function(_, i) {
      return _this.key(i);
    }).forEach(function(key) {
      return _this.removeItem(key);
    });
  };
  UniversalStorage2.prototype.getItem = function(key) {
    return this.getLocalItem(key);
  };
  UniversalStorage2.prototype.getLocalItem = function(key) {
    return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
  };
  UniversalStorage2.prototype.getUniversalItem = function(key) {
    return this.cookies.get(key);
  };
  UniversalStorage2.prototype.key = function(index) {
    return Object.keys(this.store)[index];
  };
  UniversalStorage2.prototype.removeItem = function(key) {
    this.removeLocalItem(key);
    this.removeUniversalItem(key);
  };
  UniversalStorage2.prototype.removeLocalItem = function(key) {
    delete this.store[key];
  };
  UniversalStorage2.prototype.removeUniversalItem = function(key) {
    this.cookies.remove(key, {
      path: "/"
    });
  };
  UniversalStorage2.prototype.setItem = function(key, value) {
    this.setLocalItem(key, value);
    var tokenType = key.split(".").pop();
    switch (tokenType) {
      case "LastAuthUser":
      case "accessToken":
      case "refreshToken":
      case "idToken":
        isBrowser ? this.setUniversalItem(key, value) : this.setLocalItem(key, value);
    }
  };
  UniversalStorage2.prototype.setLocalItem = function(key, value) {
    this.store[key] = value;
  };
  UniversalStorage2.prototype.setUniversalItem = function(key, value) {
    this.cookies.set(key, value, {
      path: "/",
      sameSite: true,
      secure: window.location.hostname === "localhost" ? false : true
    });
  };
  return UniversalStorage2;
}();

// node_modules/@aws-amplify/core/lib-esm/constants.js
var hasSymbol = typeof Symbol !== "undefined" && typeof Symbol.for === "function";
var INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER";
var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER";
var USER_AGENT_HEADER = "x-amz-user-agent";

// node_modules/@aws-amplify/core/lib-esm/index.js
var Constants = {
  userAgent: Platform.userAgent
};

// node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable = __toESM(require_zen_observable());
var Observable = import_zen_observable.default;
var bundle_esm_default = Observable;

// node_modules/@aws-amplify/core/lib-esm/Util/Reachability.js
var __values3 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ReachabilityNavigator = function() {
  function ReachabilityNavigator2() {
  }
  ReachabilityNavigator2.prototype.networkMonitor = function(netInfo) {
    if (browserOrNode().isNode) {
      return bundle_esm_default.from([{ online: true }]);
    }
    var globalObj = isWebWorker() ? self : window;
    return new bundle_esm_default(function(observer) {
      observer.next({ online: globalObj.navigator.onLine });
      var notifyOnline = function() {
        return observer.next({ online: true });
      };
      var notifyOffline = function() {
        return observer.next({ online: false });
      };
      globalObj.addEventListener("online", notifyOnline);
      globalObj.addEventListener("offline", notifyOffline);
      ReachabilityNavigator2._observers.push(observer);
      return function() {
        globalObj.removeEventListener("online", notifyOnline);
        globalObj.removeEventListener("offline", notifyOffline);
        ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
          return _observer !== observer;
        });
      };
    });
  };
  ReachabilityNavigator2._observerOverride = function(status) {
    var e_1, _a;
    var _loop_1 = function(observer2) {
      if (observer2.closed) {
        ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
          return _observer !== observer2;
        });
        return "continue";
      }
      observer2.next(status);
    };
    try {
      for (var _b = __values3(ReachabilityNavigator2._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
        var observer = _c.value;
        _loop_1(observer);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  ReachabilityNavigator2._observers = [];
  return ReachabilityNavigator2;
}();
var Reachability_default = ReachabilityNavigator;

// node_modules/@aws-amplify/core/lib-esm/Util/DateUtils.js
var __read9 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;
var DateUtils = {
  clockOffset: 0,
  getDateWithClockOffset: function() {
    if (DateUtils.clockOffset) {
      return new Date(new Date().getTime() + DateUtils.clockOffset);
    } else {
      return new Date();
    }
  },
  getClockOffset: function() {
    return DateUtils.clockOffset;
  },
  getHeaderStringFromDate: function(date) {
    if (date === void 0) {
      date = DateUtils.getDateWithClockOffset();
    }
    return date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  },
  getDateFromHeaderString: function(header) {
    var _a = __read9(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
  },
  isClockSkewed: function(serverDate) {
    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
  },
  isClockSkewError: function(error) {
    if (!error.response || !error.response.headers) {
      return false;
    }
    var headers = error.response.headers;
    return Boolean(["BadRequestException", "InvalidSignatureException"].includes(headers["x-amzn-errortype"]) && (headers.date || headers.Date));
  },
  setClockOffset: function(offset) {
    DateUtils.clockOffset = offset;
  }
};

// node_modules/@aws-amplify/core/lib-esm/Util/StringUtils.js
function urlSafeEncode(str) {
  return str.split("").map(function(char) {
    return char.charCodeAt(0).toString(16).padStart(2, "0");
  }).join("");
}
function urlSafeDecode(hex) {
  return hex.match(/.{2}/g).map(function(char) {
    return String.fromCharCode(parseInt(char, 16));
  }).join("");
}

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var logger12 = new ConsoleLogger("Signer");
var DEFAULT_ALGORITHM = "AWS4-HMAC-SHA256";
var IOT_SERVICE_NAME = "iotdevicegateway";
var encrypt = function(key, src) {
  var hash2 = new import_sha256_js.Sha256(key);
  hash2.update(src);
  return hash2.digestSync();
};
var hash = function(src) {
  var arg = src || "";
  var hash2 = new import_sha256_js.Sha256();
  hash2.update(arg);
  return toHex(hash2.digestSync());
};
var escape_RFC3986 = function(component) {
  return component.replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
};
var canonical_query = function(query) {
  if (!query || query.length === 0) {
    return "";
  }
  return query.split("&").map(function(e) {
    var key_val = e.split("=");
    if (key_val.length === 1) {
      return e;
    } else {
      var reencoded_val = escape_RFC3986(key_val[1]);
      return key_val[0] + "=" + reencoded_val;
    }
  }).sort(function(a, b) {
    var key_a = a.split("=")[0];
    var key_b = b.split("=")[0];
    if (key_a === key_b) {
      return a < b ? -1 : 1;
    } else {
      return key_a < key_b ? -1 : 1;
    }
  }).join("&");
};
var canonical_headers = function(headers) {
  if (!headers || Object.keys(headers).length === 0) {
    return "";
  }
  return Object.keys(headers).map(function(key) {
    return {
      key: key.toLowerCase(),
      value: headers[key] ? headers[key].trim().replace(/\s+/g, " ") : ""
    };
  }).sort(function(a, b) {
    return a.key < b.key ? -1 : 1;
  }).map(function(item) {
    return item.key + ":" + item.value;
  }).join("\n") + "\n";
};
var signed_headers = function(headers) {
  return Object.keys(headers).map(function(key) {
    return key.toLowerCase();
  }).sort().join(";");
};
var canonical_request = function(request) {
  var url_info = (0, import_url.parse)(request.url);
  return [
    request.method || "/",
    encodeURIComponent(url_info.pathname).replace(/%2F/gi, "/"),
    canonical_query(url_info.query),
    canonical_headers(request.headers),
    signed_headers(request.headers),
    hash(request.data)
  ].join("\n");
};
var parse_service_info = function(request) {
  var url_info = (0, import_url.parse)(request.url), host = url_info.host;
  var matched = host.match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
  var parsed = (matched || []).slice(1, 3);
  if (parsed[1] === "es") {
    parsed = parsed.reverse();
  }
  return {
    service: request.service || parsed[0],
    region: request.region || parsed[1]
  };
};
var credential_scope = function(d_str, region, service) {
  return [d_str, region, service, "aws4_request"].join("/");
};
var string_to_sign = function(algorithm, canonical_request2, dt_str, scope) {
  return [algorithm, dt_str, scope, hash(canonical_request2)].join("\n");
};
var get_signing_key = function(secret_key, d_str, service_info) {
  logger12.debug(service_info);
  var k = "AWS4" + secret_key, k_date = encrypt(k, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, "aws4_request");
  return k_signing;
};
var get_signature = function(signing_key, str_to_sign) {
  return toHex(encrypt(signing_key, str_to_sign));
};
var get_authorization_header = function(algorithm, access_key, scope, signed_headers2, signature) {
  return [
    algorithm + " Credential=" + access_key + "/" + scope,
    "SignedHeaders=" + signed_headers2,
    "Signature=" + signature
  ].join(", ");
};
var Signer = function() {
  function Signer2() {
  }
  Signer2.sign = function(request, access_info, service_info) {
    if (service_info === void 0) {
      service_info = null;
    }
    request.headers = request.headers || {};
    if (request.body && !request.data) {
      throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
    }
    var dt = DateUtils.getDateWithClockOffset(), dt_str = dt.toISOString().replace(/[:\-]|\.\d{3}/g, ""), d_str = dt_str.substr(0, 8);
    var url_info = (0, import_url.parse)(request.url);
    request.headers["host"] = url_info.host;
    request.headers["x-amz-date"] = dt_str;
    if (access_info.session_token) {
      request.headers["X-Amz-Security-Token"] = access_info.session_token;
    }
    var request_str = canonical_request(request);
    logger12.debug(request_str);
    var serviceInfo = service_info || parse_service_info(request), scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service), str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);
    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo), signature = get_signature(signing_key, str_to_sign);
    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);
    request.headers["Authorization"] = authorization_header;
    return request;
  };
  Signer2.signUrl = function(urlOrRequest, accessInfo, serviceInfo, expiration) {
    var urlToSign = typeof urlOrRequest === "object" ? urlOrRequest.url : urlOrRequest;
    var method = typeof urlOrRequest === "object" ? urlOrRequest.method : "GET";
    var body = typeof urlOrRequest === "object" ? urlOrRequest.body : void 0;
    var now = DateUtils.getDateWithClockOffset().toISOString().replace(/[:\-]|\.\d{3}/g, "");
    var today = now.substr(0, 8);
    var _a = (0, import_url.parse)(urlToSign, true, true), search = _a.search, parsedUrl = __rest2(_a, ["search"]);
    var host = parsedUrl.host;
    var signedHeaders = { host };
    var _b = serviceInfo || parse_service_info({ url: (0, import_url.format)(parsedUrl) }), region = _b.region, service = _b.service;
    var credentialScope = credential_scope(today, region, service);
    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;
    var queryParams = __assign8(__assign8(__assign8({ "X-Amz-Algorithm": DEFAULT_ALGORITHM, "X-Amz-Credential": [accessInfo.access_key, credentialScope].join("/"), "X-Amz-Date": now.substr(0, 16) }, sessionTokenRequired ? { "X-Amz-Security-Token": "" + accessInfo.session_token } : {}), expiration ? { "X-Amz-Expires": "" + expiration } : {}), { "X-Amz-SignedHeaders": Object.keys(signedHeaders).join(",") });
    var canonicalRequest = canonical_request({
      method,
      url: (0, import_url.format)(__assign8(__assign8({}, parsedUrl), { query: __assign8(__assign8({}, parsedUrl.query), queryParams) })),
      headers: signedHeaders,
      data: body
    });
    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);
    var signing_key = get_signing_key(accessInfo.secret_key, today, {
      region,
      service
    });
    var signature = get_signature(signing_key, stringToSign);
    var additionalQueryParams = __assign8({ "X-Amz-Signature": signature }, accessInfo.session_token && {
      "X-Amz-Security-Token": accessInfo.session_token
    });
    var result = (0, import_url.format)({
      protocol: parsedUrl.protocol,
      slashes: true,
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      pathname: parsedUrl.pathname,
      query: __assign8(__assign8(__assign8({}, parsedUrl.query), queryParams), additionalQueryParams)
    });
    return result;
  };
  return Signer2;
}();

// node_modules/@aws-amplify/geo/lib-esm/Providers/AmazonLocationServiceProvider.js
var import_camelcase_keys = __toESM(require_camelcase_keys());

// node_modules/@aws-sdk/client-location/node_modules/tslib/tslib.es6.js
var extendStatics4 = function(d, b) {
  extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics4(d, b);
};
function __extends5(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics4(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign9 = function() {
  __assign9 = Object.assign || function __assign10(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter9(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator9(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values4(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read10(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js
var deserializerMiddleware2 = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter9(void 0, void 0, void 0, function() {
        var response, parsed, error_1;
        return __generator9(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              _a.label = 2;
            case 2:
              _a.trys.push([2, 4, , 5]);
              return [4, deserializer(response, options)];
            case 3:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
            case 4:
              error_1 = _a.sent();
              throw Object.assign(error_1, { $response: response });
            case 5:
              return [2];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js
var serializerMiddleware2 = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter9(void 0, void 0, void 0, function() {
        var request;
        return __generator9(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign9(__assign9({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js
var deserializerMiddlewareOption2 = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption2 = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin2(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware2(config, deserializer), deserializerMiddlewareOption2);
      commandStack.add(serializerMiddleware2(config, serializer), serializerMiddlewareOption2);
    }
  };
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js
var constructStack2 = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = /* @__PURE__ */ new Set();
  var sort = function(entries) {
    return entries.sort(function(a, b) {
      return stepWeights2[b.step] - stepWeights2[a.step] || priorityWeights2[b.priority || "normal"] - priorityWeights2[a.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign9({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign9({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spreadArray([], __read10(expandRelativeMiddlewareList(entry))));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spreadArray([], __read10(expandRelativeMiddlewareList(entry))));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign9(__assign9({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign9(__assign9({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spreadArray([], __read10(expendedMiddlewareList)));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name = options.name, override = options.override;
      var entry = __assign9({ step: "initialize", priority: "normal", middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name = options.name, override = options.override;
      var entry = __assign9({ middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack2());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name)
            entriesNameSet.delete(name);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack2());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values4(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights2 = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights2 = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/client.js
var Client2 = function() {
  function Client3(config) {
    this.middlewareStack = constructStack2();
    this.config = config;
  }
  Client3.prototype.send = function(command, optionsOrCb, cb) {
    var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
    var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
    if (callback) {
      handler(command).then(function(result) {
        return callback(null, result.output);
      }, function(err) {
        return callback(err);
      }).catch(function() {
      });
    } else {
      return handler(command).then(function(result) {
        return result.output;
      });
    }
  };
  Client3.prototype.destroy = function() {
    if (this.config.requestHandler.destroy)
      this.config.requestHandler.destroy();
  };
  return Client3;
}();

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/command.js
var Command2 = function() {
  function Command3() {
    this.middlewareStack = constructStack2();
  }
  return Command3;
}();

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/constants.js
var SENSITIVE_STRING2 = "***SensitiveInformation***";

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js
var expectBoolean = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "boolean") {
    return value;
  }
  throw new TypeError("Expected boolean, got " + typeof value);
};
var expectNumber = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "number") {
    return value;
  }
  throw new TypeError("Expected number, got " + typeof value);
};
var MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));
var expectFloat32 = function(value) {
  var expected = expectNumber(value);
  if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
    if (Math.abs(expected) > MAX_FLOAT) {
      throw new TypeError("Expected 32-bit float, got " + value);
    }
  }
  return expected;
};
var expectLong = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (Number.isInteger(value) && !Number.isNaN(value)) {
    return value;
  }
  throw new TypeError("Expected integer, got " + typeof value);
};
var expectInt32 = function(value) {
  return expectSizedInt(value, 32);
};
var expectShort = function(value) {
  return expectSizedInt(value, 16);
};
var expectByte = function(value) {
  return expectSizedInt(value, 8);
};
var expectSizedInt = function(value, size) {
  var expected = expectLong(value);
  if (expected !== void 0 && castInt(expected, size) !== expected) {
    throw new TypeError("Expected " + size + "-bit integer, got " + value);
  }
  return expected;
};
var castInt = function(value, size) {
  switch (size) {
    case 32:
      return Int32Array.of(value)[0];
    case 16:
      return Int16Array.of(value)[0];
    case 8:
      return Int8Array.of(value)[0];
  }
};
var expectNonNull = function(value, location) {
  if (value === null || value === void 0) {
    if (location) {
      throw new TypeError("Expected a non-null value for " + location);
    }
    throw new TypeError("Expected a non-null value");
  }
  return value;
};
var expectObject = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "object" && !Array.isArray(value)) {
    return value;
  }
  throw new TypeError("Expected object, got " + typeof value);
};
var expectString = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value === "string") {
    return value;
  }
  throw new TypeError("Expected string, got " + typeof value);
};
var strictParseFloat32 = function(value) {
  if (typeof value == "string") {
    return expectFloat32(parseNumber(value));
  }
  return expectFloat32(value);
};
var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
var parseNumber = function(value) {
  var matches = value.match(NUMBER_REGEX);
  if (matches === null || matches[0].length !== value.length) {
    throw new TypeError("Expected real number, got implicit NaN");
  }
  return parseFloat(value);
};
var limitedParseDouble = function(value) {
  if (typeof value == "string") {
    return parseFloatString(value);
  }
  return expectNumber(value);
};
var parseFloatString = function(value) {
  switch (value) {
    case "NaN":
      return NaN;
    case "Infinity":
      return Infinity;
    case "-Infinity":
      return -Infinity;
    default:
      throw new Error("Unable to parse float value: " + value);
  }
};
var strictParseShort = function(value) {
  if (typeof value === "string") {
    return expectShort(parseNumber(value));
  }
  return expectShort(value);
};
var strictParseByte = function(value) {
  if (typeof value === "string") {
    return expectByte(parseNumber(value));
  }
  return expectByte(value);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js
var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
var parseRfc3339DateTime = function(value) {
  if (value === null || value === void 0) {
    return void 0;
  }
  if (typeof value !== "string") {
    throw new TypeError("RFC-3339 date-times must be expressed as strings");
  }
  var match = RFC3339.exec(value);
  if (!match) {
    throw new TypeError("Invalid RFC-3339 date-time value");
  }
  var _a = __read10(match, 8), _ = _a[0], yearStr = _a[1], monthStr = _a[2], dayStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];
  var year = strictParseShort(stripLeadingZeroes(yearStr));
  var month = parseDateValue(monthStr, "month", 1, 12);
  var day = parseDateValue(dayStr, "day", 1, 31);
  return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
};
var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
var buildDate = function(year, month, day, time) {
  var adjustedMonth = month - 1;
  validateDayOfMonth(year, adjustedMonth, day);
  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var validateDayOfMonth = function(year, month, day) {
  var maxDays = DAYS_IN_MONTH[month];
  if (month === 1 && isLeapYear(year)) {
    maxDays = 29;
  }
  if (day > maxDays) {
    throw new TypeError("Invalid day for " + MONTHS[month] + " in " + year + ": " + day);
  }
};
var isLeapYear = function(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
var parseDateValue = function(value, type, lower, upper) {
  var dateVal = strictParseByte(stripLeadingZeroes(value));
  if (dateVal < lower || dateVal > upper) {
    throw new TypeError(type + " must be between " + lower + " and " + upper + ", inclusive");
  }
  return dateVal;
};
var parseMilliseconds = function(value) {
  if (value === null || value === void 0) {
    return 0;
  }
  return strictParseFloat32("0." + value) * 1e3;
};
var stripLeadingZeroes = function(value) {
  var idx = 0;
  while (idx < value.length - 1 && value.charAt(idx) === "0") {
    idx++;
  }
  if (idx === 0) {
    return value;
  }
  return value.slice(idx);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js
var loadConfigsForDefaultMode = function(mode) {
  switch (mode) {
    case "standard":
      return {
        retryMode: "standard",
        connectionTimeout: 3100
      };
    case "in-region":
      return {
        retryMode: "standard",
        connectionTimeout: 1100
      };
    case "cross-region":
      return {
        retryMode: "standard",
        connectionTimeout: 3100
      };
    case "mobile":
      return {
        retryMode: "standard",
        connectionTimeout: 3e4
      };
    default:
      return {};
  }
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js
function extendedEncodeURIComponent2(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js
var StringWrapper2 = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spreadArray([null], __read10(arguments)));
  var instance = new Constructor();
  Object.setPrototypeOf(instance, Class.prototype);
  return instance;
};
StringWrapper2.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper2,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper2, String);
var LazyJsonString2 = function(_super) {
  __extends5(LazyJsonString3, _super);
  function LazyJsonString3() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LazyJsonString3.prototype.deserializeJSON = function() {
    return JSON.parse(_super.prototype.toString.call(this));
  };
  LazyJsonString3.prototype.toJSON = function() {
    return _super.prototype.toString.call(this);
  };
  LazyJsonString3.fromObject = function(object) {
    if (object instanceof LazyJsonString3) {
      return object;
    } else if (object instanceof String || typeof object === "string") {
      return new LazyJsonString3(object);
    }
    return new LazyJsonString3(JSON.stringify(object));
  };
  return LazyJsonString3;
}(StringWrapper2);

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js
var serializeFloat = function(value) {
  if (value !== value) {
    return "NaN";
  }
  switch (value) {
    case Infinity:
      return "Infinity";
    case -Infinity:
      return "-Infinity";
    default:
      return value;
  }
};

// node_modules/@aws-sdk/client-location/dist-es/models/models_0.js
var AssociateTrackerConsumerRequest;
(function(AssociateTrackerConsumerRequest2) {
  AssociateTrackerConsumerRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(AssociateTrackerConsumerRequest || (AssociateTrackerConsumerRequest = {}));
var AssociateTrackerConsumerResponse;
(function(AssociateTrackerConsumerResponse2) {
  AssociateTrackerConsumerResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(AssociateTrackerConsumerResponse || (AssociateTrackerConsumerResponse = {}));
var ValidationExceptionField;
(function(ValidationExceptionField2) {
  ValidationExceptionField2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ValidationExceptionField || (ValidationExceptionField = {}));
var BatchDeleteDevicePositionHistoryRequest;
(function(BatchDeleteDevicePositionHistoryRequest2) {
  BatchDeleteDevicePositionHistoryRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchDeleteDevicePositionHistoryRequest || (BatchDeleteDevicePositionHistoryRequest = {}));
var BatchItemError;
(function(BatchItemError2) {
  BatchItemError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchItemError || (BatchItemError = {}));
var BatchDeleteDevicePositionHistoryError;
(function(BatchDeleteDevicePositionHistoryError2) {
  BatchDeleteDevicePositionHistoryError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchDeleteDevicePositionHistoryError || (BatchDeleteDevicePositionHistoryError = {}));
var BatchDeleteDevicePositionHistoryResponse;
(function(BatchDeleteDevicePositionHistoryResponse2) {
  BatchDeleteDevicePositionHistoryResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchDeleteDevicePositionHistoryResponse || (BatchDeleteDevicePositionHistoryResponse = {}));
var BatchDeleteGeofenceRequest;
(function(BatchDeleteGeofenceRequest2) {
  BatchDeleteGeofenceRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchDeleteGeofenceRequest || (BatchDeleteGeofenceRequest = {}));
var BatchDeleteGeofenceError;
(function(BatchDeleteGeofenceError2) {
  BatchDeleteGeofenceError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchDeleteGeofenceError || (BatchDeleteGeofenceError = {}));
var BatchDeleteGeofenceResponse;
(function(BatchDeleteGeofenceResponse2) {
  BatchDeleteGeofenceResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchDeleteGeofenceResponse || (BatchDeleteGeofenceResponse = {}));
var PositionalAccuracy;
(function(PositionalAccuracy2) {
  PositionalAccuracy2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PositionalAccuracy || (PositionalAccuracy = {}));
var DevicePositionUpdate;
(function(DevicePositionUpdate2) {
  DevicePositionUpdate2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Position && { Position: SENSITIVE_STRING2 }), obj.PositionProperties && { PositionProperties: SENSITIVE_STRING2 });
  };
})(DevicePositionUpdate || (DevicePositionUpdate = {}));
var BatchEvaluateGeofencesRequest;
(function(BatchEvaluateGeofencesRequest2) {
  BatchEvaluateGeofencesRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.DevicePositionUpdates && {
      DevicePositionUpdates: obj.DevicePositionUpdates.map(function(item) {
        return DevicePositionUpdate.filterSensitiveLog(item);
      })
    });
  };
})(BatchEvaluateGeofencesRequest || (BatchEvaluateGeofencesRequest = {}));
var BatchEvaluateGeofencesError;
(function(BatchEvaluateGeofencesError2) {
  BatchEvaluateGeofencesError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchEvaluateGeofencesError || (BatchEvaluateGeofencesError = {}));
var BatchEvaluateGeofencesResponse;
(function(BatchEvaluateGeofencesResponse2) {
  BatchEvaluateGeofencesResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchEvaluateGeofencesResponse || (BatchEvaluateGeofencesResponse = {}));
var BatchGetDevicePositionRequest;
(function(BatchGetDevicePositionRequest2) {
  BatchGetDevicePositionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchGetDevicePositionRequest || (BatchGetDevicePositionRequest = {}));
var DevicePosition;
(function(DevicePosition2) {
  DevicePosition2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Position && { Position: SENSITIVE_STRING2 }), obj.PositionProperties && { PositionProperties: SENSITIVE_STRING2 });
  };
})(DevicePosition || (DevicePosition = {}));
var BatchGetDevicePositionError;
(function(BatchGetDevicePositionError2) {
  BatchGetDevicePositionError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchGetDevicePositionError || (BatchGetDevicePositionError = {}));
var BatchGetDevicePositionResponse;
(function(BatchGetDevicePositionResponse2) {
  BatchGetDevicePositionResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.DevicePositions && {
      DevicePositions: obj.DevicePositions.map(function(item) {
        return DevicePosition.filterSensitiveLog(item);
      })
    });
  };
})(BatchGetDevicePositionResponse || (BatchGetDevicePositionResponse = {}));
var GeofenceGeometry;
(function(GeofenceGeometry2) {
  GeofenceGeometry2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Polygon && { Polygon: obj.Polygon.map(function(item) {
      return SENSITIVE_STRING2;
    }) });
  };
})(GeofenceGeometry || (GeofenceGeometry = {}));
var BatchPutGeofenceRequestEntry;
(function(BatchPutGeofenceRequestEntry2) {
  BatchPutGeofenceRequestEntry2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Geometry && { Geometry: GeofenceGeometry.filterSensitiveLog(obj.Geometry) });
  };
})(BatchPutGeofenceRequestEntry || (BatchPutGeofenceRequestEntry = {}));
var BatchPutGeofenceRequest;
(function(BatchPutGeofenceRequest2) {
  BatchPutGeofenceRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Entries && { Entries: obj.Entries.map(function(item) {
      return BatchPutGeofenceRequestEntry.filterSensitiveLog(item);
    }) });
  };
})(BatchPutGeofenceRequest || (BatchPutGeofenceRequest = {}));
var BatchPutGeofenceError;
(function(BatchPutGeofenceError2) {
  BatchPutGeofenceError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchPutGeofenceError || (BatchPutGeofenceError = {}));
var BatchPutGeofenceSuccess;
(function(BatchPutGeofenceSuccess2) {
  BatchPutGeofenceSuccess2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchPutGeofenceSuccess || (BatchPutGeofenceSuccess = {}));
var BatchPutGeofenceResponse;
(function(BatchPutGeofenceResponse2) {
  BatchPutGeofenceResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchPutGeofenceResponse || (BatchPutGeofenceResponse = {}));
var BatchUpdateDevicePositionRequest;
(function(BatchUpdateDevicePositionRequest2) {
  BatchUpdateDevicePositionRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Updates && { Updates: obj.Updates.map(function(item) {
      return DevicePositionUpdate.filterSensitiveLog(item);
    }) });
  };
})(BatchUpdateDevicePositionRequest || (BatchUpdateDevicePositionRequest = {}));
var BatchUpdateDevicePositionError;
(function(BatchUpdateDevicePositionError2) {
  BatchUpdateDevicePositionError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchUpdateDevicePositionError || (BatchUpdateDevicePositionError = {}));
var BatchUpdateDevicePositionResponse;
(function(BatchUpdateDevicePositionResponse2) {
  BatchUpdateDevicePositionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(BatchUpdateDevicePositionResponse || (BatchUpdateDevicePositionResponse = {}));
var CalculateRouteCarModeOptions;
(function(CalculateRouteCarModeOptions2) {
  CalculateRouteCarModeOptions2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CalculateRouteCarModeOptions || (CalculateRouteCarModeOptions = {}));
var TruckDimensions;
(function(TruckDimensions2) {
  TruckDimensions2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TruckDimensions || (TruckDimensions = {}));
var TruckWeight;
(function(TruckWeight2) {
  TruckWeight2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TruckWeight || (TruckWeight = {}));
var CalculateRouteTruckModeOptions;
(function(CalculateRouteTruckModeOptions2) {
  CalculateRouteTruckModeOptions2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CalculateRouteTruckModeOptions || (CalculateRouteTruckModeOptions = {}));
var CalculateRouteRequest;
(function(CalculateRouteRequest2) {
  CalculateRouteRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9(__assign9({}, obj), obj.DeparturePosition && { DeparturePosition: SENSITIVE_STRING2 }), obj.DestinationPosition && { DestinationPosition: SENSITIVE_STRING2 }), obj.WaypointPositions && { WaypointPositions: SENSITIVE_STRING2 });
  };
})(CalculateRouteRequest || (CalculateRouteRequest = {}));
var LegGeometry;
(function(LegGeometry2) {
  LegGeometry2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.LineString && { LineString: SENSITIVE_STRING2 });
  };
})(LegGeometry || (LegGeometry = {}));
var Step;
(function(Step2) {
  Step2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.StartPosition && { StartPosition: SENSITIVE_STRING2 }), obj.EndPosition && { EndPosition: SENSITIVE_STRING2 });
  };
})(Step || (Step = {}));
var Leg;
(function(Leg2) {
  Leg2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9(__assign9(__assign9({}, obj), obj.StartPosition && { StartPosition: SENSITIVE_STRING2 }), obj.EndPosition && { EndPosition: SENSITIVE_STRING2 }), obj.Geometry && { Geometry: LegGeometry.filterSensitiveLog(obj.Geometry) }), obj.Steps && { Steps: obj.Steps.map(function(item) {
      return Step.filterSensitiveLog(item);
    }) });
  };
})(Leg || (Leg = {}));
var CalculateRouteSummary;
(function(CalculateRouteSummary2) {
  CalculateRouteSummary2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.RouteBBox && { RouteBBox: SENSITIVE_STRING2 });
  };
})(CalculateRouteSummary || (CalculateRouteSummary = {}));
var CalculateRouteResponse;
(function(CalculateRouteResponse2) {
  CalculateRouteResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Legs && { Legs: obj.Legs.map(function(item) {
      return Leg.filterSensitiveLog(item);
    }) }), obj.Summary && { Summary: CalculateRouteSummary.filterSensitiveLog(obj.Summary) });
  };
})(CalculateRouteResponse || (CalculateRouteResponse = {}));
var CalculateRouteMatrixRequest;
(function(CalculateRouteMatrixRequest2) {
  CalculateRouteMatrixRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.DeparturePositions && { DeparturePositions: SENSITIVE_STRING2 }), obj.DestinationPositions && { DestinationPositions: SENSITIVE_STRING2 });
  };
})(CalculateRouteMatrixRequest || (CalculateRouteMatrixRequest = {}));
var RouteMatrixEntryError;
(function(RouteMatrixEntryError2) {
  RouteMatrixEntryError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(RouteMatrixEntryError || (RouteMatrixEntryError = {}));
var RouteMatrixEntry;
(function(RouteMatrixEntry2) {
  RouteMatrixEntry2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(RouteMatrixEntry || (RouteMatrixEntry = {}));
var CalculateRouteMatrixSummary;
(function(CalculateRouteMatrixSummary2) {
  CalculateRouteMatrixSummary2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CalculateRouteMatrixSummary || (CalculateRouteMatrixSummary = {}));
var CalculateRouteMatrixResponse;
(function(CalculateRouteMatrixResponse2) {
  CalculateRouteMatrixResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.SnappedDeparturePositions && { SnappedDeparturePositions: SENSITIVE_STRING2 }), obj.SnappedDestinationPositions && { SnappedDestinationPositions: SENSITIVE_STRING2 });
  };
})(CalculateRouteMatrixResponse || (CalculateRouteMatrixResponse = {}));
var CreateGeofenceCollectionRequest;
(function(CreateGeofenceCollectionRequest2) {
  CreateGeofenceCollectionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateGeofenceCollectionRequest || (CreateGeofenceCollectionRequest = {}));
var CreateGeofenceCollectionResponse;
(function(CreateGeofenceCollectionResponse2) {
  CreateGeofenceCollectionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateGeofenceCollectionResponse || (CreateGeofenceCollectionResponse = {}));
var MapConfiguration;
(function(MapConfiguration2) {
  MapConfiguration2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(MapConfiguration || (MapConfiguration = {}));
var CreateMapRequest;
(function(CreateMapRequest2) {
  CreateMapRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateMapRequest || (CreateMapRequest = {}));
var CreateMapResponse;
(function(CreateMapResponse2) {
  CreateMapResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateMapResponse || (CreateMapResponse = {}));
var DataSourceConfiguration;
(function(DataSourceConfiguration2) {
  DataSourceConfiguration2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DataSourceConfiguration || (DataSourceConfiguration = {}));
var CreatePlaceIndexRequest;
(function(CreatePlaceIndexRequest2) {
  CreatePlaceIndexRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreatePlaceIndexRequest || (CreatePlaceIndexRequest = {}));
var CreatePlaceIndexResponse;
(function(CreatePlaceIndexResponse2) {
  CreatePlaceIndexResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreatePlaceIndexResponse || (CreatePlaceIndexResponse = {}));
var CreateRouteCalculatorRequest;
(function(CreateRouteCalculatorRequest2) {
  CreateRouteCalculatorRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateRouteCalculatorRequest || (CreateRouteCalculatorRequest = {}));
var CreateRouteCalculatorResponse;
(function(CreateRouteCalculatorResponse2) {
  CreateRouteCalculatorResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateRouteCalculatorResponse || (CreateRouteCalculatorResponse = {}));
var CreateTrackerRequest;
(function(CreateTrackerRequest2) {
  CreateTrackerRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateTrackerRequest || (CreateTrackerRequest = {}));
var CreateTrackerResponse;
(function(CreateTrackerResponse2) {
  CreateTrackerResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateTrackerResponse || (CreateTrackerResponse = {}));
var DeleteGeofenceCollectionRequest;
(function(DeleteGeofenceCollectionRequest2) {
  DeleteGeofenceCollectionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteGeofenceCollectionRequest || (DeleteGeofenceCollectionRequest = {}));
var DeleteGeofenceCollectionResponse;
(function(DeleteGeofenceCollectionResponse2) {
  DeleteGeofenceCollectionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteGeofenceCollectionResponse || (DeleteGeofenceCollectionResponse = {}));
var DeleteMapRequest;
(function(DeleteMapRequest2) {
  DeleteMapRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteMapRequest || (DeleteMapRequest = {}));
var DeleteMapResponse;
(function(DeleteMapResponse2) {
  DeleteMapResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteMapResponse || (DeleteMapResponse = {}));
var DeletePlaceIndexRequest;
(function(DeletePlaceIndexRequest2) {
  DeletePlaceIndexRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeletePlaceIndexRequest || (DeletePlaceIndexRequest = {}));
var DeletePlaceIndexResponse;
(function(DeletePlaceIndexResponse2) {
  DeletePlaceIndexResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeletePlaceIndexResponse || (DeletePlaceIndexResponse = {}));
var DeleteRouteCalculatorRequest;
(function(DeleteRouteCalculatorRequest2) {
  DeleteRouteCalculatorRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteRouteCalculatorRequest || (DeleteRouteCalculatorRequest = {}));
var DeleteRouteCalculatorResponse;
(function(DeleteRouteCalculatorResponse2) {
  DeleteRouteCalculatorResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteRouteCalculatorResponse || (DeleteRouteCalculatorResponse = {}));
var DeleteTrackerRequest;
(function(DeleteTrackerRequest2) {
  DeleteTrackerRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteTrackerRequest || (DeleteTrackerRequest = {}));
var DeleteTrackerResponse;
(function(DeleteTrackerResponse2) {
  DeleteTrackerResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteTrackerResponse || (DeleteTrackerResponse = {}));
var DescribeGeofenceCollectionRequest;
(function(DescribeGeofenceCollectionRequest2) {
  DescribeGeofenceCollectionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeGeofenceCollectionRequest || (DescribeGeofenceCollectionRequest = {}));
var DescribeGeofenceCollectionResponse;
(function(DescribeGeofenceCollectionResponse2) {
  DescribeGeofenceCollectionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeGeofenceCollectionResponse || (DescribeGeofenceCollectionResponse = {}));
var DescribeMapRequest;
(function(DescribeMapRequest2) {
  DescribeMapRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeMapRequest || (DescribeMapRequest = {}));
var DescribeMapResponse;
(function(DescribeMapResponse2) {
  DescribeMapResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeMapResponse || (DescribeMapResponse = {}));
var DescribePlaceIndexRequest;
(function(DescribePlaceIndexRequest2) {
  DescribePlaceIndexRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribePlaceIndexRequest || (DescribePlaceIndexRequest = {}));
var DescribePlaceIndexResponse;
(function(DescribePlaceIndexResponse2) {
  DescribePlaceIndexResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribePlaceIndexResponse || (DescribePlaceIndexResponse = {}));
var DescribeRouteCalculatorRequest;
(function(DescribeRouteCalculatorRequest2) {
  DescribeRouteCalculatorRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeRouteCalculatorRequest || (DescribeRouteCalculatorRequest = {}));
var DescribeRouteCalculatorResponse;
(function(DescribeRouteCalculatorResponse2) {
  DescribeRouteCalculatorResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeRouteCalculatorResponse || (DescribeRouteCalculatorResponse = {}));
var DescribeTrackerRequest;
(function(DescribeTrackerRequest2) {
  DescribeTrackerRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeTrackerRequest || (DescribeTrackerRequest = {}));
var DescribeTrackerResponse;
(function(DescribeTrackerResponse2) {
  DescribeTrackerResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeTrackerResponse || (DescribeTrackerResponse = {}));
var DisassociateTrackerConsumerRequest;
(function(DisassociateTrackerConsumerRequest2) {
  DisassociateTrackerConsumerRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DisassociateTrackerConsumerRequest || (DisassociateTrackerConsumerRequest = {}));
var DisassociateTrackerConsumerResponse;
(function(DisassociateTrackerConsumerResponse2) {
  DisassociateTrackerConsumerResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DisassociateTrackerConsumerResponse || (DisassociateTrackerConsumerResponse = {}));
var ListTagsForResourceRequest;
(function(ListTagsForResourceRequest2) {
  ListTagsForResourceRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTagsForResourceRequest || (ListTagsForResourceRequest = {}));
var ListTagsForResourceResponse2;
(function(ListTagsForResourceResponse3) {
  ListTagsForResourceResponse3.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTagsForResourceResponse2 || (ListTagsForResourceResponse2 = {}));
var TagResourceRequest;
(function(TagResourceRequest2) {
  TagResourceRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TagResourceRequest || (TagResourceRequest = {}));
var TagResourceResponse2;
(function(TagResourceResponse3) {
  TagResourceResponse3.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TagResourceResponse2 || (TagResourceResponse2 = {}));
var UntagResourceRequest;
(function(UntagResourceRequest2) {
  UntagResourceRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UntagResourceRequest || (UntagResourceRequest = {}));
var UntagResourceResponse2;
(function(UntagResourceResponse3) {
  UntagResourceResponse3.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UntagResourceResponse2 || (UntagResourceResponse2 = {}));
var GetGeofenceRequest;
(function(GetGeofenceRequest2) {
  GetGeofenceRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetGeofenceRequest || (GetGeofenceRequest = {}));
var GetGeofenceResponse;
(function(GetGeofenceResponse2) {
  GetGeofenceResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Geometry && { Geometry: GeofenceGeometry.filterSensitiveLog(obj.Geometry) });
  };
})(GetGeofenceResponse || (GetGeofenceResponse = {}));
var ListGeofenceCollectionsRequest;
(function(ListGeofenceCollectionsRequest2) {
  ListGeofenceCollectionsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListGeofenceCollectionsRequest || (ListGeofenceCollectionsRequest = {}));
var ListGeofenceCollectionsResponseEntry;
(function(ListGeofenceCollectionsResponseEntry2) {
  ListGeofenceCollectionsResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListGeofenceCollectionsResponseEntry || (ListGeofenceCollectionsResponseEntry = {}));
var ListGeofenceCollectionsResponse;
(function(ListGeofenceCollectionsResponse2) {
  ListGeofenceCollectionsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListGeofenceCollectionsResponse || (ListGeofenceCollectionsResponse = {}));
var ListGeofencesRequest;
(function(ListGeofencesRequest2) {
  ListGeofencesRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListGeofencesRequest || (ListGeofencesRequest = {}));
var ListGeofenceResponseEntry;
(function(ListGeofenceResponseEntry2) {
  ListGeofenceResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Geometry && { Geometry: GeofenceGeometry.filterSensitiveLog(obj.Geometry) });
  };
})(ListGeofenceResponseEntry || (ListGeofenceResponseEntry = {}));
var ListGeofencesResponse;
(function(ListGeofencesResponse2) {
  ListGeofencesResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Entries && { Entries: obj.Entries.map(function(item) {
      return ListGeofenceResponseEntry.filterSensitiveLog(item);
    }) });
  };
})(ListGeofencesResponse || (ListGeofencesResponse = {}));
var PutGeofenceRequest;
(function(PutGeofenceRequest2) {
  PutGeofenceRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Geometry && { Geometry: GeofenceGeometry.filterSensitiveLog(obj.Geometry) });
  };
})(PutGeofenceRequest || (PutGeofenceRequest = {}));
var PutGeofenceResponse;
(function(PutGeofenceResponse2) {
  PutGeofenceResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutGeofenceResponse || (PutGeofenceResponse = {}));
var UpdateGeofenceCollectionRequest;
(function(UpdateGeofenceCollectionRequest2) {
  UpdateGeofenceCollectionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateGeofenceCollectionRequest || (UpdateGeofenceCollectionRequest = {}));
var UpdateGeofenceCollectionResponse;
(function(UpdateGeofenceCollectionResponse2) {
  UpdateGeofenceCollectionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateGeofenceCollectionResponse || (UpdateGeofenceCollectionResponse = {}));
var GetDevicePositionRequest;
(function(GetDevicePositionRequest2) {
  GetDevicePositionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetDevicePositionRequest || (GetDevicePositionRequest = {}));
var GetDevicePositionResponse;
(function(GetDevicePositionResponse2) {
  GetDevicePositionResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Position && { Position: SENSITIVE_STRING2 }), obj.PositionProperties && { PositionProperties: SENSITIVE_STRING2 });
  };
})(GetDevicePositionResponse || (GetDevicePositionResponse = {}));
var GetDevicePositionHistoryRequest;
(function(GetDevicePositionHistoryRequest2) {
  GetDevicePositionHistoryRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetDevicePositionHistoryRequest || (GetDevicePositionHistoryRequest = {}));
var GetDevicePositionHistoryResponse;
(function(GetDevicePositionHistoryResponse2) {
  GetDevicePositionHistoryResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.DevicePositions && {
      DevicePositions: obj.DevicePositions.map(function(item) {
        return DevicePosition.filterSensitiveLog(item);
      })
    });
  };
})(GetDevicePositionHistoryResponse || (GetDevicePositionHistoryResponse = {}));
var GetMapGlyphsRequest;
(function(GetMapGlyphsRequest2) {
  GetMapGlyphsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapGlyphsRequest || (GetMapGlyphsRequest = {}));
var GetMapGlyphsResponse;
(function(GetMapGlyphsResponse2) {
  GetMapGlyphsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapGlyphsResponse || (GetMapGlyphsResponse = {}));
var GetMapSpritesRequest;
(function(GetMapSpritesRequest2) {
  GetMapSpritesRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapSpritesRequest || (GetMapSpritesRequest = {}));
var GetMapSpritesResponse;
(function(GetMapSpritesResponse2) {
  GetMapSpritesResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapSpritesResponse || (GetMapSpritesResponse = {}));
var GetMapStyleDescriptorRequest;
(function(GetMapStyleDescriptorRequest2) {
  GetMapStyleDescriptorRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapStyleDescriptorRequest || (GetMapStyleDescriptorRequest = {}));
var GetMapStyleDescriptorResponse;
(function(GetMapStyleDescriptorResponse2) {
  GetMapStyleDescriptorResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapStyleDescriptorResponse || (GetMapStyleDescriptorResponse = {}));
var GetMapTileRequest;
(function(GetMapTileRequest2) {
  GetMapTileRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapTileRequest || (GetMapTileRequest = {}));
var GetMapTileResponse;
(function(GetMapTileResponse2) {
  GetMapTileResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetMapTileResponse || (GetMapTileResponse = {}));
var ListDevicePositionsRequest;
(function(ListDevicePositionsRequest2) {
  ListDevicePositionsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListDevicePositionsRequest || (ListDevicePositionsRequest = {}));
var ListDevicePositionsResponseEntry;
(function(ListDevicePositionsResponseEntry2) {
  ListDevicePositionsResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Position && { Position: SENSITIVE_STRING2 }), obj.PositionProperties && { PositionProperties: SENSITIVE_STRING2 });
  };
})(ListDevicePositionsResponseEntry || (ListDevicePositionsResponseEntry = {}));
var ListDevicePositionsResponse;
(function(ListDevicePositionsResponse2) {
  ListDevicePositionsResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Entries && {
      Entries: obj.Entries.map(function(item) {
        return ListDevicePositionsResponseEntry.filterSensitiveLog(item);
      })
    });
  };
})(ListDevicePositionsResponse || (ListDevicePositionsResponse = {}));
var ListMapsRequest;
(function(ListMapsRequest2) {
  ListMapsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListMapsRequest || (ListMapsRequest = {}));
var ListMapsResponseEntry;
(function(ListMapsResponseEntry2) {
  ListMapsResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListMapsResponseEntry || (ListMapsResponseEntry = {}));
var ListMapsResponse;
(function(ListMapsResponse2) {
  ListMapsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListMapsResponse || (ListMapsResponse = {}));
var ListPlaceIndexesRequest;
(function(ListPlaceIndexesRequest2) {
  ListPlaceIndexesRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListPlaceIndexesRequest || (ListPlaceIndexesRequest = {}));
var ListPlaceIndexesResponseEntry;
(function(ListPlaceIndexesResponseEntry2) {
  ListPlaceIndexesResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListPlaceIndexesResponseEntry || (ListPlaceIndexesResponseEntry = {}));
var ListPlaceIndexesResponse;
(function(ListPlaceIndexesResponse2) {
  ListPlaceIndexesResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListPlaceIndexesResponse || (ListPlaceIndexesResponse = {}));
var ListRouteCalculatorsRequest;
(function(ListRouteCalculatorsRequest2) {
  ListRouteCalculatorsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListRouteCalculatorsRequest || (ListRouteCalculatorsRequest = {}));
var ListRouteCalculatorsResponseEntry;
(function(ListRouteCalculatorsResponseEntry2) {
  ListRouteCalculatorsResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListRouteCalculatorsResponseEntry || (ListRouteCalculatorsResponseEntry = {}));
var ListRouteCalculatorsResponse;
(function(ListRouteCalculatorsResponse2) {
  ListRouteCalculatorsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListRouteCalculatorsResponse || (ListRouteCalculatorsResponse = {}));
var ListTrackerConsumersRequest;
(function(ListTrackerConsumersRequest2) {
  ListTrackerConsumersRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTrackerConsumersRequest || (ListTrackerConsumersRequest = {}));
var ListTrackerConsumersResponse;
(function(ListTrackerConsumersResponse2) {
  ListTrackerConsumersResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTrackerConsumersResponse || (ListTrackerConsumersResponse = {}));
var ListTrackersRequest;
(function(ListTrackersRequest2) {
  ListTrackersRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTrackersRequest || (ListTrackersRequest = {}));
var ListTrackersResponseEntry;
(function(ListTrackersResponseEntry2) {
  ListTrackersResponseEntry2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTrackersResponseEntry || (ListTrackersResponseEntry = {}));
var ListTrackersResponse;
(function(ListTrackersResponse2) {
  ListTrackersResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTrackersResponse || (ListTrackersResponse = {}));
var UpdateMapRequest;
(function(UpdateMapRequest2) {
  UpdateMapRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateMapRequest || (UpdateMapRequest = {}));
var UpdateMapResponse;
(function(UpdateMapResponse2) {
  UpdateMapResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateMapResponse || (UpdateMapResponse = {}));
var SearchPlaceIndexForPositionRequest;
(function(SearchPlaceIndexForPositionRequest2) {
  SearchPlaceIndexForPositionRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Position && { Position: SENSITIVE_STRING2 });
  };
})(SearchPlaceIndexForPositionRequest || (SearchPlaceIndexForPositionRequest = {}));
var PlaceGeometry;
(function(PlaceGeometry2) {
  PlaceGeometry2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Point && { Point: SENSITIVE_STRING2 });
  };
})(PlaceGeometry || (PlaceGeometry = {}));
var TimeZone;
(function(TimeZone2) {
  TimeZone2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TimeZone || (TimeZone = {}));
var Place;
(function(Place2) {
  Place2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Geometry && { Geometry: PlaceGeometry.filterSensitiveLog(obj.Geometry) });
  };
})(Place || (Place = {}));
var SearchForPositionResult;
(function(SearchForPositionResult2) {
  SearchForPositionResult2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Place && { Place: Place.filterSensitiveLog(obj.Place) });
  };
})(SearchForPositionResult || (SearchForPositionResult = {}));
var SearchPlaceIndexForPositionSummary;
(function(SearchPlaceIndexForPositionSummary2) {
  SearchPlaceIndexForPositionSummary2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Position && { Position: SENSITIVE_STRING2 });
  };
})(SearchPlaceIndexForPositionSummary || (SearchPlaceIndexForPositionSummary = {}));
var SearchPlaceIndexForPositionResponse;
(function(SearchPlaceIndexForPositionResponse2) {
  SearchPlaceIndexForPositionResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Summary && { Summary: SearchPlaceIndexForPositionSummary.filterSensitiveLog(obj.Summary) }), obj.Results && { Results: obj.Results.map(function(item) {
      return SearchForPositionResult.filterSensitiveLog(item);
    }) });
  };
})(SearchPlaceIndexForPositionResponse || (SearchPlaceIndexForPositionResponse = {}));
var SearchPlaceIndexForSuggestionsRequest;
(function(SearchPlaceIndexForSuggestionsRequest2) {
  SearchPlaceIndexForSuggestionsRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9(__assign9({}, obj), obj.Text && { Text: SENSITIVE_STRING2 }), obj.BiasPosition && { BiasPosition: SENSITIVE_STRING2 }), obj.FilterBBox && { FilterBBox: SENSITIVE_STRING2 });
  };
})(SearchPlaceIndexForSuggestionsRequest || (SearchPlaceIndexForSuggestionsRequest = {}));
var SearchForSuggestionsResult;
(function(SearchForSuggestionsResult2) {
  SearchForSuggestionsResult2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(SearchForSuggestionsResult || (SearchForSuggestionsResult = {}));
var SearchPlaceIndexForSuggestionsSummary;
(function(SearchPlaceIndexForSuggestionsSummary2) {
  SearchPlaceIndexForSuggestionsSummary2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9(__assign9({}, obj), obj.Text && { Text: SENSITIVE_STRING2 }), obj.BiasPosition && { BiasPosition: SENSITIVE_STRING2 }), obj.FilterBBox && { FilterBBox: SENSITIVE_STRING2 });
  };
})(SearchPlaceIndexForSuggestionsSummary || (SearchPlaceIndexForSuggestionsSummary = {}));
var SearchPlaceIndexForSuggestionsResponse;
(function(SearchPlaceIndexForSuggestionsResponse2) {
  SearchPlaceIndexForSuggestionsResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Summary && { Summary: SearchPlaceIndexForSuggestionsSummary.filterSensitiveLog(obj.Summary) });
  };
})(SearchPlaceIndexForSuggestionsResponse || (SearchPlaceIndexForSuggestionsResponse = {}));
var SearchPlaceIndexForTextRequest;
(function(SearchPlaceIndexForTextRequest2) {
  SearchPlaceIndexForTextRequest2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9(__assign9({}, obj), obj.Text && { Text: SENSITIVE_STRING2 }), obj.BiasPosition && { BiasPosition: SENSITIVE_STRING2 }), obj.FilterBBox && { FilterBBox: SENSITIVE_STRING2 });
  };
})(SearchPlaceIndexForTextRequest || (SearchPlaceIndexForTextRequest = {}));
var SearchForTextResult;
(function(SearchForTextResult2) {
  SearchForTextResult2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9({}, obj), obj.Place && { Place: Place.filterSensitiveLog(obj.Place) });
  };
})(SearchForTextResult || (SearchForTextResult = {}));
var SearchPlaceIndexForTextSummary;
(function(SearchPlaceIndexForTextSummary2) {
  SearchPlaceIndexForTextSummary2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9(__assign9(__assign9({}, obj), obj.Text && { Text: SENSITIVE_STRING2 }), obj.BiasPosition && { BiasPosition: SENSITIVE_STRING2 }), obj.FilterBBox && { FilterBBox: SENSITIVE_STRING2 }), obj.ResultBBox && { ResultBBox: SENSITIVE_STRING2 });
  };
})(SearchPlaceIndexForTextSummary || (SearchPlaceIndexForTextSummary = {}));
var SearchPlaceIndexForTextResponse;
(function(SearchPlaceIndexForTextResponse2) {
  SearchPlaceIndexForTextResponse2.filterSensitiveLog = function(obj) {
    return __assign9(__assign9(__assign9({}, obj), obj.Summary && { Summary: SearchPlaceIndexForTextSummary.filterSensitiveLog(obj.Summary) }), obj.Results && { Results: obj.Results.map(function(item) {
      return SearchForTextResult.filterSensitiveLog(item);
    }) });
  };
})(SearchPlaceIndexForTextResponse || (SearchPlaceIndexForTextResponse = {}));
var UpdatePlaceIndexRequest;
(function(UpdatePlaceIndexRequest2) {
  UpdatePlaceIndexRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdatePlaceIndexRequest || (UpdatePlaceIndexRequest = {}));
var UpdatePlaceIndexResponse;
(function(UpdatePlaceIndexResponse2) {
  UpdatePlaceIndexResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdatePlaceIndexResponse || (UpdatePlaceIndexResponse = {}));
var UpdateRouteCalculatorRequest;
(function(UpdateRouteCalculatorRequest2) {
  UpdateRouteCalculatorRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateRouteCalculatorRequest || (UpdateRouteCalculatorRequest = {}));
var UpdateRouteCalculatorResponse;
(function(UpdateRouteCalculatorResponse2) {
  UpdateRouteCalculatorResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateRouteCalculatorResponse || (UpdateRouteCalculatorResponse = {}));
var UpdateTrackerRequest;
(function(UpdateTrackerRequest2) {
  UpdateTrackerRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateTrackerRequest || (UpdateTrackerRequest = {}));
var UpdateTrackerResponse;
(function(UpdateTrackerResponse2) {
  UpdateTrackerResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UpdateTrackerResponse || (UpdateTrackerResponse = {}));

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js
var HttpRequest2 = function() {
  function HttpRequest3(options) {
    this.method = options.method || "GET";
    this.hostname = options.hostname || "localhost";
    this.port = options.port;
    this.query = options.query || {};
    this.headers = options.headers || {};
    this.body = options.body;
    this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
    this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
  }
  HttpRequest3.isInstance = function(request) {
    if (!request)
      return false;
    var req = request;
    return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
  };
  HttpRequest3.prototype.clone = function() {
    var cloned = new HttpRequest3(__assign9(__assign9({}, this), { headers: __assign9({}, this.headers) }));
    if (cloned.query)
      cloned.query = cloneQuery3(cloned.query);
    return cloned;
  };
  return HttpRequest3;
}();
function cloneQuery3(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign9(__assign9({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spreadArray([], __read10(param)) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js
var HttpResponse2 = function() {
  function HttpResponse3(options) {
    this.statusCode = options.statusCode;
    this.headers = options.headers || {};
    this.body = options.body;
  }
  HttpResponse3.isInstance = function(response) {
    if (!response)
      return false;
    var resp = response;
    return typeof resp.statusCode === "number" && typeof resp.headers === "object";
  };
  return HttpResponse3;
}();

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js
function isValidHostname(hostname) {
  var hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
  return hostPattern.test(hostname);
}

// node_modules/@aws-sdk/client-location/dist-es/protocols/Aws_restJson1.js
var serializeAws_restJson1AssociateTrackerConsumerCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/consumers";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9({}, input.ConsumerArn !== void 0 && input.ConsumerArn !== null && { ConsumerArn: input.ConsumerArn }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/delete-positions";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9({}, input.DeviceIds !== void 0 && input.DeviceIds !== null && { DeviceIds: serializeAws_restJson1DeviceIdsList(input.DeviceIds, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1BatchDeleteGeofenceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}/delete-geofences";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          body = JSON.stringify(__assign9({}, input.GeofenceIds !== void 0 && input.GeofenceIds !== null && { GeofenceIds: serializeAws_restJson1IdList(input.GeofenceIds, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1BatchEvaluateGeofencesCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}/positions";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          body = JSON.stringify(__assign9({}, input.DevicePositionUpdates !== void 0 && input.DevicePositionUpdates !== null && {
            DevicePositionUpdates: serializeAws_restJson1DevicePositionUpdateList(input.DevicePositionUpdates, context)
          }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1BatchGetDevicePositionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/get-positions";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9({}, input.DeviceIds !== void 0 && input.DeviceIds !== null && { DeviceIds: serializeAws_restJson1IdList(input.DeviceIds, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1BatchPutGeofenceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}/put-geofences";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          body = JSON.stringify(__assign9({}, input.Entries !== void 0 && input.Entries !== null && {
            Entries: serializeAws_restJson1BatchPutGeofenceRequestEntryList(input.Entries, context)
          }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1BatchUpdateDevicePositionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/positions";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9({}, input.Updates !== void 0 && input.Updates !== null && { Updates: serializeAws_restJson1DevicePositionUpdateList(input.Updates, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CalculateRouteCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/calculators/{CalculatorName}/calculate/route";
          if (input.CalculatorName !== void 0) {
            labelValue = input.CalculatorName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CalculatorName.");
            }
            resolvedPath = resolvedPath.replace("{CalculatorName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CalculatorName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.CarModeOptions !== void 0 && input.CarModeOptions !== null && {
            CarModeOptions: serializeAws_restJson1CalculateRouteCarModeOptions(input.CarModeOptions, context)
          }), input.DepartNow !== void 0 && input.DepartNow !== null && { DepartNow: input.DepartNow }), input.DeparturePosition !== void 0 && input.DeparturePosition !== null && {
            DeparturePosition: serializeAws_restJson1Position(input.DeparturePosition, context)
          }), input.DepartureTime !== void 0 && input.DepartureTime !== null && { DepartureTime: input.DepartureTime.toISOString().split(".")[0] + "Z" }), input.DestinationPosition !== void 0 && input.DestinationPosition !== null && {
            DestinationPosition: serializeAws_restJson1Position(input.DestinationPosition, context)
          }), input.DistanceUnit !== void 0 && input.DistanceUnit !== null && { DistanceUnit: input.DistanceUnit }), input.IncludeLegGeometry !== void 0 && input.IncludeLegGeometry !== null && { IncludeLegGeometry: input.IncludeLegGeometry }), input.TravelMode !== void 0 && input.TravelMode !== null && { TravelMode: input.TravelMode }), input.TruckModeOptions !== void 0 && input.TruckModeOptions !== null && {
            TruckModeOptions: serializeAws_restJson1CalculateRouteTruckModeOptions(input.TruckModeOptions, context)
          }), input.WaypointPositions !== void 0 && input.WaypointPositions !== null && {
            WaypointPositions: serializeAws_restJson1WaypointPositionList(input.WaypointPositions, context)
          }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CalculateRouteMatrixCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/calculators/{CalculatorName}/calculate/route-matrix";
          if (input.CalculatorName !== void 0) {
            labelValue = input.CalculatorName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CalculatorName.");
            }
            resolvedPath = resolvedPath.replace("{CalculatorName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CalculatorName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.CarModeOptions !== void 0 && input.CarModeOptions !== null && {
            CarModeOptions: serializeAws_restJson1CalculateRouteCarModeOptions(input.CarModeOptions, context)
          }), input.DepartNow !== void 0 && input.DepartNow !== null && { DepartNow: input.DepartNow }), input.DeparturePositions !== void 0 && input.DeparturePositions !== null && {
            DeparturePositions: serializeAws_restJson1PositionList(input.DeparturePositions, context)
          }), input.DepartureTime !== void 0 && input.DepartureTime !== null && { DepartureTime: input.DepartureTime.toISOString().split(".")[0] + "Z" }), input.DestinationPositions !== void 0 && input.DestinationPositions !== null && {
            DestinationPositions: serializeAws_restJson1PositionList(input.DestinationPositions, context)
          }), input.DistanceUnit !== void 0 && input.DistanceUnit !== null && { DistanceUnit: input.DistanceUnit }), input.TravelMode !== void 0 && input.TravelMode !== null && { TravelMode: input.TravelMode }), input.TruckModeOptions !== void 0 && input.TruckModeOptions !== null && {
            TruckModeOptions: serializeAws_restJson1CalculateRouteTruckModeOptions(input.TruckModeOptions, context)
          }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CreateGeofenceCollectionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections";
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.CollectionName !== void 0 && input.CollectionName !== null && { CollectionName: input.CollectionName }), input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.KmsKeyId !== void 0 && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.PricingPlanDataSource !== void 0 && input.PricingPlanDataSource !== null && { PricingPlanDataSource: input.PricingPlanDataSource }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CreateMapCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps";
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.Configuration !== void 0 && input.Configuration !== null && {
            Configuration: serializeAws_restJson1MapConfiguration(input.Configuration, context)
          }), input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.MapName !== void 0 && input.MapName !== null && { MapName: input.MapName }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CreatePlaceIndexCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes";
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.DataSource !== void 0 && input.DataSource !== null && { DataSource: input.DataSource }), input.DataSourceConfiguration !== void 0 && input.DataSourceConfiguration !== null && {
            DataSourceConfiguration: serializeAws_restJson1DataSourceConfiguration(input.DataSourceConfiguration, context)
          }), input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CreateRouteCalculatorCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/calculators";
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.CalculatorName !== void 0 && input.CalculatorName !== null && { CalculatorName: input.CalculatorName }), input.DataSource !== void 0 && input.DataSource !== null && { DataSource: input.DataSource }), input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1CreateTrackerCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers";
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.KmsKeyId !== void 0 && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }), input.PositionFiltering !== void 0 && input.PositionFiltering !== null && { PositionFiltering: input.PositionFiltering }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.PricingPlanDataSource !== void 0 && input.PricingPlanDataSource !== null && { PricingPlanDataSource: input.PricingPlanDataSource }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }), input.TrackerName !== void 0 && input.TrackerName !== null && { TrackerName: input.TrackerName }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DeleteGeofenceCollectionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DeleteMapCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DeletePlaceIndexCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes/{IndexName}";
          if (input.IndexName !== void 0) {
            labelValue = input.IndexName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: IndexName.");
            }
            resolvedPath = resolvedPath.replace("{IndexName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: IndexName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DeleteRouteCalculatorCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/calculators/{CalculatorName}";
          if (input.CalculatorName !== void 0) {
            labelValue = input.CalculatorName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CalculatorName.");
            }
            resolvedPath = resolvedPath.replace("{CalculatorName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CalculatorName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DeleteTrackerCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DescribeGeofenceCollectionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DescribeMapCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DescribePlaceIndexCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes/{IndexName}";
          if (input.IndexName !== void 0) {
            labelValue = input.IndexName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: IndexName.");
            }
            resolvedPath = resolvedPath.replace("{IndexName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: IndexName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DescribeRouteCalculatorCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/calculators/{CalculatorName}";
          if (input.CalculatorName !== void 0) {
            labelValue = input.CalculatorName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CalculatorName.");
            }
            resolvedPath = resolvedPath.replace("{CalculatorName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CalculatorName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DescribeTrackerCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1DisassociateTrackerConsumerCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          if (input.ConsumerArn !== void 0) {
            labelValue = input.ConsumerArn;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: ConsumerArn.");
            }
            resolvedPath = resolvedPath.replace("{ConsumerArn}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: ConsumerArn.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetDevicePositionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          if (input.DeviceId !== void 0) {
            labelValue = input.DeviceId;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: DeviceId.");
            }
            resolvedPath = resolvedPath.replace("{DeviceId}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: DeviceId.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetDevicePositionHistoryCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          if (input.DeviceId !== void 0) {
            labelValue = input.DeviceId;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: DeviceId.");
            }
            resolvedPath = resolvedPath.replace("{DeviceId}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: DeviceId.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9({}, input.EndTimeExclusive !== void 0 && input.EndTimeExclusive !== null && {
            EndTimeExclusive: input.EndTimeExclusive.toISOString().split(".")[0] + "Z"
          }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.StartTimeInclusive !== void 0 && input.StartTimeInclusive !== null && {
            StartTimeInclusive: input.StartTimeInclusive.toISOString().split(".")[0] + "Z"
          }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetGeofenceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          if (input.GeofenceId !== void 0) {
            labelValue = input.GeofenceId;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: GeofenceId.");
            }
            resolvedPath = resolvedPath.replace("{GeofenceId}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: GeofenceId.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetMapGlyphsCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          if (input.FontStack !== void 0) {
            labelValue = input.FontStack;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: FontStack.");
            }
            resolvedPath = resolvedPath.replace("{FontStack}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: FontStack.");
          }
          if (input.FontUnicodeRange !== void 0) {
            labelValue = input.FontUnicodeRange;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: FontUnicodeRange.");
            }
            resolvedPath = resolvedPath.replace("{FontUnicodeRange}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: FontUnicodeRange.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetMapSpritesCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}/sprites/{FileName}";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          if (input.FileName !== void 0) {
            labelValue = input.FileName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: FileName.");
            }
            resolvedPath = resolvedPath.replace("{FileName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: FileName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetMapStyleDescriptorCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}/style-descriptor";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1GetMapTileCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          if (input.Z !== void 0) {
            labelValue = input.Z;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Z.");
            }
            resolvedPath = resolvedPath.replace("{Z}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Z.");
          }
          if (input.X !== void 0) {
            labelValue = input.X;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: X.");
            }
            resolvedPath = resolvedPath.replace("{X}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: X.");
          }
          if (input.Y !== void 0) {
            labelValue = input.Y;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: Y.");
            }
            resolvedPath = resolvedPath.replace("{Y}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: Y.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListDevicePositionsCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/list-positions";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListGeofenceCollectionsCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/list-collections";
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListGeofencesCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}/list-geofences";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          body = JSON.stringify(__assign9({}, input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListMapsCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/list-maps";
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListPlaceIndexesCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/list-indexes";
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListRouteCalculatorsCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/list-calculators";
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListTagsForResourceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tags/{ResourceArn}";
          if (input.ResourceArn !== void 0) {
            labelValue = input.ResourceArn;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: ResourceArn.");
            }
            resolvedPath = resolvedPath.replace("{ResourceArn}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: ResourceArn.");
          }
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "metadata." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "GET",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListTrackerConsumersCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}/list-consumers";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1ListTrackersCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/list-trackers";
          body = JSON.stringify(__assign9(__assign9({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1PutGeofenceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          if (input.GeofenceId !== void 0) {
            labelValue = input.GeofenceId;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: GeofenceId.");
            }
            resolvedPath = resolvedPath.replace("{GeofenceId}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: GeofenceId.");
          }
          body = JSON.stringify(__assign9({}, input.Geometry !== void 0 && input.Geometry !== null && { Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "PUT",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1SearchPlaceIndexForPositionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes/{IndexName}/search/position";
          if (input.IndexName !== void 0) {
            labelValue = input.IndexName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: IndexName.");
            }
            resolvedPath = resolvedPath.replace("{IndexName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: IndexName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9({}, input.Language !== void 0 && input.Language !== null && { Language: input.Language }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.Position !== void 0 && input.Position !== null && { Position: serializeAws_restJson1Position(input.Position, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1SearchPlaceIndexForSuggestionsCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes/{IndexName}/search/suggestions";
          if (input.IndexName !== void 0) {
            labelValue = input.IndexName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: IndexName.");
            }
            resolvedPath = resolvedPath.replace("{IndexName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: IndexName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.BiasPosition !== void 0 && input.BiasPosition !== null && { BiasPosition: serializeAws_restJson1Position(input.BiasPosition, context) }), input.FilterBBox !== void 0 && input.FilterBBox !== null && { FilterBBox: serializeAws_restJson1BoundingBox(input.FilterBBox, context) }), input.FilterCountries !== void 0 && input.FilterCountries !== null && {
            FilterCountries: serializeAws_restJson1CountryCodeList(input.FilterCountries, context)
          }), input.Language !== void 0 && input.Language !== null && { Language: input.Language }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.Text !== void 0 && input.Text !== null && { Text: input.Text }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1SearchPlaceIndexForTextCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes/{IndexName}/search/text";
          if (input.IndexName !== void 0) {
            labelValue = input.IndexName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: IndexName.");
            }
            resolvedPath = resolvedPath.replace("{IndexName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: IndexName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.BiasPosition !== void 0 && input.BiasPosition !== null && { BiasPosition: serializeAws_restJson1Position(input.BiasPosition, context) }), input.FilterBBox !== void 0 && input.FilterBBox !== null && { FilterBBox: serializeAws_restJson1BoundingBox(input.FilterBBox, context) }), input.FilterCountries !== void 0 && input.FilterCountries !== null && {
            FilterCountries: serializeAws_restJson1CountryCodeList(input.FilterCountries, context)
          }), input.Language !== void 0 && input.Language !== null && { Language: input.Language }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.Text !== void 0 && input.Text !== null && { Text: input.Text }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1TagResourceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tags/{ResourceArn}";
          if (input.ResourceArn !== void 0) {
            labelValue = input.ResourceArn;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: ResourceArn.");
            }
            resolvedPath = resolvedPath.replace("{ResourceArn}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: ResourceArn.");
          }
          body = JSON.stringify(__assign9({}, input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "metadata." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "POST",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1UntagResourceCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {};
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tags/{ResourceArn}";
          if (input.ResourceArn !== void 0) {
            labelValue = input.ResourceArn;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: ResourceArn.");
            }
            resolvedPath = resolvedPath.replace("{ResourceArn}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: ResourceArn.");
          }
          query = __assign9({}, input.TagKeys !== void 0 && { tagKeys: (input.TagKeys || []).map(function(_entry) {
            return _entry;
          }) });
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "metadata." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "DELETE",
            headers,
            path: resolvedPath,
            query,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1UpdateGeofenceCollectionCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/geofencing/v0/collections/{CollectionName}";
          if (input.CollectionName !== void 0) {
            labelValue = input.CollectionName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CollectionName.");
            }
            resolvedPath = resolvedPath.replace("{CollectionName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CollectionName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9({}, input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.PricingPlanDataSource !== void 0 && input.PricingPlanDataSource !== null && { PricingPlanDataSource: input.PricingPlanDataSource }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "geofencing." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "PATCH",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1UpdateMapCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/maps/v0/maps/{MapName}";
          if (input.MapName !== void 0) {
            labelValue = input.MapName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: MapName.");
            }
            resolvedPath = resolvedPath.replace("{MapName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: MapName.");
          }
          body = JSON.stringify(__assign9(__assign9({}, input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "maps." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "PATCH",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1UpdatePlaceIndexCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/places/v0/indexes/{IndexName}";
          if (input.IndexName !== void 0) {
            labelValue = input.IndexName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: IndexName.");
            }
            resolvedPath = resolvedPath.replace("{IndexName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: IndexName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9({}, input.DataSourceConfiguration !== void 0 && input.DataSourceConfiguration !== null && {
            DataSourceConfiguration: serializeAws_restJson1DataSourceConfiguration(input.DataSourceConfiguration, context)
          }), input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "places." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "PATCH",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1UpdateRouteCalculatorCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/routes/v0/calculators/{CalculatorName}";
          if (input.CalculatorName !== void 0) {
            labelValue = input.CalculatorName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: CalculatorName.");
            }
            resolvedPath = resolvedPath.replace("{CalculatorName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: CalculatorName.");
          }
          body = JSON.stringify(__assign9(__assign9({}, input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "routes." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "PATCH",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var serializeAws_restJson1UpdateTrackerCommand = function(input, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body, resolvedHostname;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
          headers = {
            "content-type": "application/json"
          };
          resolvedPath = "" + ((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tracking/v0/trackers/{TrackerName}";
          if (input.TrackerName !== void 0) {
            labelValue = input.TrackerName;
            if (labelValue.length <= 0) {
              throw new Error("Empty value provided for input HTTP label: TrackerName.");
            }
            resolvedPath = resolvedPath.replace("{TrackerName}", extendedEncodeURIComponent2(labelValue));
          } else {
            throw new Error("No value provided for input HTTP label: TrackerName.");
          }
          body = JSON.stringify(__assign9(__assign9(__assign9(__assign9({}, input.Description !== void 0 && input.Description !== null && { Description: input.Description }), input.PositionFiltering !== void 0 && input.PositionFiltering !== null && { PositionFiltering: input.PositionFiltering }), input.PricingPlan !== void 0 && input.PricingPlan !== null && { PricingPlan: input.PricingPlan }), input.PricingPlanDataSource !== void 0 && input.PricingPlanDataSource !== null && { PricingPlanDataSource: input.PricingPlanDataSource }));
          return [4, context.endpoint()];
        case 2:
          resolvedHostname = _c.sent().hostname;
          if (context.disableHostPrefix !== true) {
            resolvedHostname = "tracking." + resolvedHostname;
            if (!isValidHostname(resolvedHostname)) {
              throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
            }
          }
          return [2, new HttpRequest2({
            protocol,
            hostname: resolvedHostname,
            port,
            method: "PATCH",
            headers,
            path: resolvedPath,
            body
          })];
      }
    });
  });
};
var deserializeAws_restJson1AssociateTrackerConsumerCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1AssociateTrackerConsumerCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1AssociateTrackerConsumerCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator9(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign9({}, output)];
          _k = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 8];
            case "ServiceQuotaExceededException":
              return [3, 10];
            case "com.amazonaws.location#ServiceQuotaExceededException":
              return [3, 10];
            case "ThrottlingException":
              return [3, 12];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 12];
            case "ValidationException":
              return [3, 14];
            case "com.amazonaws.location#ValidationException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ServiceQuotaExceededExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Errors: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Errors !== void 0 && data.Errors !== null) {
            contents.Errors = deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList(data.Errors, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1BatchDeleteGeofenceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1BatchDeleteGeofenceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Errors: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Errors !== void 0 && data.Errors !== null) {
            contents.Errors = deserializeAws_restJson1BatchDeleteGeofenceErrorList(data.Errors, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1BatchDeleteGeofenceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1BatchEvaluateGeofencesCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1BatchEvaluateGeofencesCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Errors: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Errors !== void 0 && data.Errors !== null) {
            contents.Errors = deserializeAws_restJson1BatchEvaluateGeofencesErrorList(data.Errors, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1BatchEvaluateGeofencesCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1BatchGetDevicePositionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1BatchGetDevicePositionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            DevicePositions: void 0,
            Errors: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.DevicePositions !== void 0 && data.DevicePositions !== null) {
            contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);
          }
          if (data.Errors !== void 0 && data.Errors !== null) {
            contents.Errors = deserializeAws_restJson1BatchGetDevicePositionErrorList(data.Errors, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1BatchGetDevicePositionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1BatchPutGeofenceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1BatchPutGeofenceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Errors: void 0,
            Successes: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Errors !== void 0 && data.Errors !== null) {
            contents.Errors = deserializeAws_restJson1BatchPutGeofenceErrorList(data.Errors, context);
          }
          if (data.Successes !== void 0 && data.Successes !== null) {
            contents.Successes = deserializeAws_restJson1BatchPutGeofenceSuccessList(data.Successes, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1BatchPutGeofenceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1BatchUpdateDevicePositionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1BatchUpdateDevicePositionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Errors: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Errors !== void 0 && data.Errors !== null) {
            contents.Errors = deserializeAws_restJson1BatchUpdateDevicePositionErrorList(data.Errors, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1BatchUpdateDevicePositionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CalculateRouteCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CalculateRouteCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Legs: void 0,
            Summary: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Legs !== void 0 && data.Legs !== null) {
            contents.Legs = deserializeAws_restJson1LegList(data.Legs, context);
          }
          if (data.Summary !== void 0 && data.Summary !== null) {
            contents.Summary = deserializeAws_restJson1CalculateRouteSummary(data.Summary, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CalculateRouteCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CalculateRouteMatrixCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CalculateRouteMatrixCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            RouteMatrix: void 0,
            SnappedDeparturePositions: void 0,
            SnappedDestinationPositions: void 0,
            Summary: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.RouteMatrix !== void 0 && data.RouteMatrix !== null) {
            contents.RouteMatrix = deserializeAws_restJson1RouteMatrix(data.RouteMatrix, context);
          }
          if (data.SnappedDeparturePositions !== void 0 && data.SnappedDeparturePositions !== null) {
            contents.SnappedDeparturePositions = deserializeAws_restJson1PositionList(data.SnappedDeparturePositions, context);
          }
          if (data.SnappedDestinationPositions !== void 0 && data.SnappedDestinationPositions !== null) {
            contents.SnappedDestinationPositions = deserializeAws_restJson1PositionList(data.SnappedDestinationPositions, context);
          }
          if (data.Summary !== void 0 && data.Summary !== null) {
            contents.Summary = deserializeAws_restJson1CalculateRouteMatrixSummary(data.Summary, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CalculateRouteMatrixCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CreateGeofenceCollectionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CreateGeofenceCollectionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CollectionArn: void 0,
            CollectionName: void 0,
            CreateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CollectionArn !== void 0 && data.CollectionArn !== null) {
            contents.CollectionArn = expectString(data.CollectionArn);
          }
          if (data.CollectionName !== void 0 && data.CollectionName !== null) {
            contents.CollectionName = expectString(data.CollectionName);
          }
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CreateGeofenceCollectionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CreateMapCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CreateMapCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            MapArn: void 0,
            MapName: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.MapArn !== void 0 && data.MapArn !== null) {
            contents.MapArn = expectString(data.MapArn);
          }
          if (data.MapName !== void 0 && data.MapName !== null) {
            contents.MapName = expectString(data.MapName);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CreateMapCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CreatePlaceIndexCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CreatePlaceIndexCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            IndexArn: void 0,
            IndexName: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.IndexArn !== void 0 && data.IndexArn !== null) {
            contents.IndexArn = expectString(data.IndexArn);
          }
          if (data.IndexName !== void 0 && data.IndexName !== null) {
            contents.IndexName = expectString(data.IndexName);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CreatePlaceIndexCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CreateRouteCalculatorCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CreateRouteCalculatorCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CalculatorArn: void 0,
            CalculatorName: void 0,
            CreateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CalculatorArn !== void 0 && data.CalculatorArn !== null) {
            contents.CalculatorArn = expectString(data.CalculatorArn);
          }
          if (data.CalculatorName !== void 0 && data.CalculatorName !== null) {
            contents.CalculatorName = expectString(data.CalculatorName);
          }
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CreateRouteCalculatorCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1CreateTrackerCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1CreateTrackerCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            TrackerArn: void 0,
            TrackerName: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.TrackerArn !== void 0 && data.TrackerArn !== null) {
            contents.TrackerArn = expectString(data.TrackerArn);
          }
          if (data.TrackerName !== void 0 && data.TrackerName !== null) {
            contents.TrackerName = expectString(data.TrackerName);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1CreateTrackerCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DeleteGeofenceCollectionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DeleteGeofenceCollectionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DeleteGeofenceCollectionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DeleteMapCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DeleteMapCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DeleteMapCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DeletePlaceIndexCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DeletePlaceIndexCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DeletePlaceIndexCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DeleteRouteCalculatorCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DeleteRouteCalculatorCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DeleteRouteCalculatorCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DeleteTrackerCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DeleteTrackerCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DeleteTrackerCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DescribeGeofenceCollectionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DescribeGeofenceCollectionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CollectionArn: void 0,
            CollectionName: void 0,
            CreateTime: void 0,
            Description: void 0,
            KmsKeyId: void 0,
            PricingPlan: void 0,
            PricingPlanDataSource: void 0,
            Tags: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CollectionArn !== void 0 && data.CollectionArn !== null) {
            contents.CollectionArn = expectString(data.CollectionArn);
          }
          if (data.CollectionName !== void 0 && data.CollectionName !== null) {
            contents.CollectionName = expectString(data.CollectionName);
          }
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.Description !== void 0 && data.Description !== null) {
            contents.Description = expectString(data.Description);
          }
          if (data.KmsKeyId !== void 0 && data.KmsKeyId !== null) {
            contents.KmsKeyId = expectString(data.KmsKeyId);
          }
          if (data.PricingPlan !== void 0 && data.PricingPlan !== null) {
            contents.PricingPlan = expectString(data.PricingPlan);
          }
          if (data.PricingPlanDataSource !== void 0 && data.PricingPlanDataSource !== null) {
            contents.PricingPlanDataSource = expectString(data.PricingPlanDataSource);
          }
          if (data.Tags !== void 0 && data.Tags !== null) {
            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DescribeGeofenceCollectionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DescribeMapCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DescribeMapCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Configuration: void 0,
            CreateTime: void 0,
            DataSource: void 0,
            Description: void 0,
            MapArn: void 0,
            MapName: void 0,
            PricingPlan: void 0,
            Tags: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Configuration !== void 0 && data.Configuration !== null) {
            contents.Configuration = deserializeAws_restJson1MapConfiguration(data.Configuration, context);
          }
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.DataSource !== void 0 && data.DataSource !== null) {
            contents.DataSource = expectString(data.DataSource);
          }
          if (data.Description !== void 0 && data.Description !== null) {
            contents.Description = expectString(data.Description);
          }
          if (data.MapArn !== void 0 && data.MapArn !== null) {
            contents.MapArn = expectString(data.MapArn);
          }
          if (data.MapName !== void 0 && data.MapName !== null) {
            contents.MapName = expectString(data.MapName);
          }
          if (data.PricingPlan !== void 0 && data.PricingPlan !== null) {
            contents.PricingPlan = expectString(data.PricingPlan);
          }
          if (data.Tags !== void 0 && data.Tags !== null) {
            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DescribeMapCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DescribePlaceIndexCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DescribePlaceIndexCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            DataSource: void 0,
            DataSourceConfiguration: void 0,
            Description: void 0,
            IndexArn: void 0,
            IndexName: void 0,
            PricingPlan: void 0,
            Tags: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.DataSource !== void 0 && data.DataSource !== null) {
            contents.DataSource = expectString(data.DataSource);
          }
          if (data.DataSourceConfiguration !== void 0 && data.DataSourceConfiguration !== null) {
            contents.DataSourceConfiguration = deserializeAws_restJson1DataSourceConfiguration(data.DataSourceConfiguration, context);
          }
          if (data.Description !== void 0 && data.Description !== null) {
            contents.Description = expectString(data.Description);
          }
          if (data.IndexArn !== void 0 && data.IndexArn !== null) {
            contents.IndexArn = expectString(data.IndexArn);
          }
          if (data.IndexName !== void 0 && data.IndexName !== null) {
            contents.IndexName = expectString(data.IndexName);
          }
          if (data.PricingPlan !== void 0 && data.PricingPlan !== null) {
            contents.PricingPlan = expectString(data.PricingPlan);
          }
          if (data.Tags !== void 0 && data.Tags !== null) {
            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DescribePlaceIndexCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DescribeRouteCalculatorCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DescribeRouteCalculatorCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CalculatorArn: void 0,
            CalculatorName: void 0,
            CreateTime: void 0,
            DataSource: void 0,
            Description: void 0,
            PricingPlan: void 0,
            Tags: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CalculatorArn !== void 0 && data.CalculatorArn !== null) {
            contents.CalculatorArn = expectString(data.CalculatorArn);
          }
          if (data.CalculatorName !== void 0 && data.CalculatorName !== null) {
            contents.CalculatorName = expectString(data.CalculatorName);
          }
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.DataSource !== void 0 && data.DataSource !== null) {
            contents.DataSource = expectString(data.DataSource);
          }
          if (data.Description !== void 0 && data.Description !== null) {
            contents.Description = expectString(data.Description);
          }
          if (data.PricingPlan !== void 0 && data.PricingPlan !== null) {
            contents.PricingPlan = expectString(data.PricingPlan);
          }
          if (data.Tags !== void 0 && data.Tags !== null) {
            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DescribeRouteCalculatorCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DescribeTrackerCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DescribeTrackerCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            Description: void 0,
            KmsKeyId: void 0,
            PositionFiltering: void 0,
            PricingPlan: void 0,
            PricingPlanDataSource: void 0,
            Tags: void 0,
            TrackerArn: void 0,
            TrackerName: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.Description !== void 0 && data.Description !== null) {
            contents.Description = expectString(data.Description);
          }
          if (data.KmsKeyId !== void 0 && data.KmsKeyId !== null) {
            contents.KmsKeyId = expectString(data.KmsKeyId);
          }
          if (data.PositionFiltering !== void 0 && data.PositionFiltering !== null) {
            contents.PositionFiltering = expectString(data.PositionFiltering);
          }
          if (data.PricingPlan !== void 0 && data.PricingPlan !== null) {
            contents.PricingPlan = expectString(data.PricingPlan);
          }
          if (data.PricingPlanDataSource !== void 0 && data.PricingPlanDataSource !== null) {
            contents.PricingPlanDataSource = expectString(data.PricingPlanDataSource);
          }
          if (data.Tags !== void 0 && data.Tags !== null) {
            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
          }
          if (data.TrackerArn !== void 0 && data.TrackerArn !== null) {
            contents.TrackerArn = expectString(data.TrackerArn);
          }
          if (data.TrackerName !== void 0 && data.TrackerName !== null) {
            contents.TrackerName = expectString(data.TrackerName);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DescribeTrackerCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1DisassociateTrackerConsumerCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1DisassociateTrackerConsumerCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1DisassociateTrackerConsumerCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetDevicePositionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetDevicePositionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Accuracy: void 0,
            DeviceId: void 0,
            Position: void 0,
            PositionProperties: void 0,
            ReceivedTime: void 0,
            SampleTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Accuracy !== void 0 && data.Accuracy !== null) {
            contents.Accuracy = deserializeAws_restJson1PositionalAccuracy(data.Accuracy, context);
          }
          if (data.DeviceId !== void 0 && data.DeviceId !== null) {
            contents.DeviceId = expectString(data.DeviceId);
          }
          if (data.Position !== void 0 && data.Position !== null) {
            contents.Position = deserializeAws_restJson1Position(data.Position, context);
          }
          if (data.PositionProperties !== void 0 && data.PositionProperties !== null) {
            contents.PositionProperties = deserializeAws_restJson1PropertyMap(data.PositionProperties, context);
          }
          if (data.ReceivedTime !== void 0 && data.ReceivedTime !== null) {
            contents.ReceivedTime = expectNonNull(parseRfc3339DateTime(data.ReceivedTime));
          }
          if (data.SampleTime !== void 0 && data.SampleTime !== null) {
            contents.SampleTime = expectNonNull(parseRfc3339DateTime(data.SampleTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetDevicePositionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetDevicePositionHistoryCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetDevicePositionHistoryCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            DevicePositions: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.DevicePositions !== void 0 && data.DevicePositions !== null) {
            contents.DevicePositions = deserializeAws_restJson1DevicePositionList(data.DevicePositions, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetDevicePositionHistoryCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetGeofenceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetGeofenceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            GeofenceId: void 0,
            Geometry: void 0,
            Status: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.GeofenceId !== void 0 && data.GeofenceId !== null) {
            contents.GeofenceId = expectString(data.GeofenceId);
          }
          if (data.Geometry !== void 0 && data.Geometry !== null) {
            contents.Geometry = deserializeAws_restJson1GeofenceGeometry(data.Geometry, context);
          }
          if (data.Status !== void 0 && data.Status !== null) {
            contents.Status = expectString(data.Status);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetGeofenceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetMapGlyphsCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetMapGlyphsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Blob: void 0,
            ContentType: void 0
          };
          if (output.headers["content-type"] !== void 0) {
            contents.ContentType = output.headers["content-type"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents.Blob = data;
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetMapGlyphsCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetMapSpritesCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetMapSpritesCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Blob: void 0,
            ContentType: void 0
          };
          if (output.headers["content-type"] !== void 0) {
            contents.ContentType = output.headers["content-type"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents.Blob = data;
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetMapSpritesCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetMapStyleDescriptorCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetMapStyleDescriptorCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Blob: void 0,
            ContentType: void 0
          };
          if (output.headers["content-type"] !== void 0) {
            contents.ContentType = output.headers["content-type"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents.Blob = data;
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetMapStyleDescriptorCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1GetMapTileCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1GetMapTileCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Blob: void 0,
            ContentType: void 0
          };
          if (output.headers["content-type"] !== void 0) {
            contents.ContentType = output.headers["content-type"];
          }
          return [4, collectBody3(output.body, context)];
        case 1:
          data = _a.sent();
          contents.Blob = data;
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1GetMapTileCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListDevicePositionsCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListDevicePositionsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListDevicePositionsResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListDevicePositionsCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator9(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ThrottlingException":
              return [3, 6];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 6];
            case "ValidationException":
              return [3, 8];
            case "com.amazonaws.location#ValidationException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListGeofenceCollectionsCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListGeofenceCollectionsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListGeofenceCollectionsCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator9(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ThrottlingException":
              return [3, 6];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 6];
            case "ValidationException":
              return [3, 8];
            case "com.amazonaws.location#ValidationException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListGeofencesCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListGeofencesCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListGeofenceResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListGeofencesCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListMapsCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListMapsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListMapsResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListMapsCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator9(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ThrottlingException":
              return [3, 6];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 6];
            case "ValidationException":
              return [3, 8];
            case "com.amazonaws.location#ValidationException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListPlaceIndexesCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListPlaceIndexesCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListPlaceIndexesResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListPlaceIndexesCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator9(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ThrottlingException":
              return [3, 6];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 6];
            case "ValidationException":
              return [3, 8];
            case "com.amazonaws.location#ValidationException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListRouteCalculatorsCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListRouteCalculatorsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListRouteCalculatorsResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListRouteCalculatorsCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator9(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ThrottlingException":
              return [3, 6];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 6];
            case "ValidationException":
              return [3, 8];
            case "com.amazonaws.location#ValidationException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListTagsForResourceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Tags: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Tags !== void 0 && data.Tags !== null) {
            contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListTagsForResourceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListTrackerConsumersCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListTrackerConsumersCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            ConsumerArns: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.ConsumerArns !== void 0 && data.ConsumerArns !== null) {
            contents.ConsumerArns = deserializeAws_restJson1ArnList(data.ConsumerArns, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListTrackerConsumersCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1ListTrackersCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1ListTrackersCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Entries: void 0,
            NextToken: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Entries !== void 0 && data.Entries !== null) {
            contents.Entries = deserializeAws_restJson1ListTrackersResponseEntryList(data.Entries, context);
          }
          if (data.NextToken !== void 0 && data.NextToken !== null) {
            contents.NextToken = expectString(data.NextToken);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1ListTrackersCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator9(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ThrottlingException":
              return [3, 6];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 6];
            case "ValidationException":
              return [3, 8];
            case "com.amazonaws.location#ValidationException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1PutGeofenceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1PutGeofenceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CreateTime: void 0,
            GeofenceId: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CreateTime !== void 0 && data.CreateTime !== null) {
            contents.CreateTime = expectNonNull(parseRfc3339DateTime(data.CreateTime));
          }
          if (data.GeofenceId !== void 0 && data.GeofenceId !== null) {
            contents.GeofenceId = expectString(data.GeofenceId);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1PutGeofenceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator9(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign9({}, output)];
          _j = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "ConflictException":
              return [3, 4];
            case "com.amazonaws.location#ConflictException":
              return [3, 4];
            case "InternalServerException":
              return [3, 6];
            case "com.amazonaws.location#InternalServerException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 8];
            case "ThrottlingException":
              return [3, 10];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 10];
            case "ValidationException":
              return [3, 12];
            case "com.amazonaws.location#ValidationException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1SearchPlaceIndexForPositionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1SearchPlaceIndexForPositionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Results: void 0,
            Summary: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Results !== void 0 && data.Results !== null) {
            contents.Results = deserializeAws_restJson1SearchForPositionResultList(data.Results, context);
          }
          if (data.Summary !== void 0 && data.Summary !== null) {
            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForPositionSummary(data.Summary, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1SearchPlaceIndexForPositionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Results: void 0,
            Summary: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Results !== void 0 && data.Results !== null) {
            contents.Results = deserializeAws_restJson1SearchForSuggestionsResultList(data.Results, context);
          }
          if (data.Summary !== void 0 && data.Summary !== null) {
            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForSuggestionsSummary(data.Summary, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1SearchPlaceIndexForTextCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1SearchPlaceIndexForTextCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            Results: void 0,
            Summary: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.Results !== void 0 && data.Results !== null) {
            contents.Results = deserializeAws_restJson1SearchForTextResultList(data.Results, context);
          }
          if (data.Summary !== void 0 && data.Summary !== null) {
            contents.Summary = deserializeAws_restJson1SearchPlaceIndexForTextSummary(data.Summary, context);
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1SearchPlaceIndexForTextCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1TagResourceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1TagResourceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1TagResourceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1UntagResourceCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1UntagResourceCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output)
          };
          return [4, collectBody3(output.body, context)];
        case 1:
          _a.sent();
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1UntagResourceCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1UpdateGeofenceCollectionCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1UpdateGeofenceCollectionCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CollectionArn: void 0,
            CollectionName: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CollectionArn !== void 0 && data.CollectionArn !== null) {
            contents.CollectionArn = expectString(data.CollectionArn);
          }
          if (data.CollectionName !== void 0 && data.CollectionName !== null) {
            contents.CollectionName = expectString(data.CollectionName);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1UpdateGeofenceCollectionCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1UpdateMapCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1UpdateMapCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            MapArn: void 0,
            MapName: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.MapArn !== void 0 && data.MapArn !== null) {
            contents.MapArn = expectString(data.MapArn);
          }
          if (data.MapName !== void 0 && data.MapName !== null) {
            contents.MapName = expectString(data.MapName);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1UpdateMapCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1UpdatePlaceIndexCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1UpdatePlaceIndexCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            IndexArn: void 0,
            IndexName: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.IndexArn !== void 0 && data.IndexArn !== null) {
            contents.IndexArn = expectString(data.IndexArn);
          }
          if (data.IndexName !== void 0 && data.IndexName !== null) {
            contents.IndexName = expectString(data.IndexName);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1UpdatePlaceIndexCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1UpdateRouteCalculatorCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1UpdateRouteCalculatorCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            CalculatorArn: void 0,
            CalculatorName: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.CalculatorArn !== void 0 && data.CalculatorArn !== null) {
            contents.CalculatorArn = expectString(data.CalculatorArn);
          }
          if (data.CalculatorName !== void 0 && data.CalculatorName !== null) {
            contents.CalculatorName = expectString(data.CalculatorName);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1UpdateRouteCalculatorCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1UpdateTrackerCommand = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data, _a, _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2, deserializeAws_restJson1UpdateTrackerCommandError(output, context)];
          }
          contents = {
            $metadata: deserializeMetadata3(output),
            TrackerArn: void 0,
            TrackerName: void 0,
            UpdateTime: void 0
          };
          _a = expectNonNull;
          _b = expectObject;
          return [4, parseBody3(output.body, context)];
        case 1:
          data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
          if (data.TrackerArn !== void 0 && data.TrackerArn !== null) {
            contents.TrackerArn = expectString(data.TrackerArn);
          }
          if (data.TrackerName !== void 0 && data.TrackerName !== null) {
            contents.TrackerName = expectString(data.TrackerName);
          }
          if (data.UpdateTime !== void 0 && data.UpdateTime !== null) {
            contents.UpdateTime = expectNonNull(parseRfc3339DateTime(data.UpdateTime));
          }
          return [2, Promise.resolve(contents)];
      }
    });
  });
};
var deserializeAws_restJson1UpdateTrackerCommandError = function(output, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator9(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody3(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode3(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "AccessDeniedException":
              return [3, 2];
            case "com.amazonaws.location#AccessDeniedException":
              return [3, 2];
            case "InternalServerException":
              return [3, 4];
            case "com.amazonaws.location#InternalServerException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.location#ResourceNotFoundException":
              return [3, 6];
            case "ThrottlingException":
              return [3, 8];
            case "com.amazonaws.location#ThrottlingException":
              return [3, 8];
            case "ValidationException":
              return [3, 10];
            case "com.amazonaws.location#ValidationException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata3(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata3(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_restJson1AccessDeniedExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "AccessDeniedException",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput),
        Message: void 0
      };
      data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restJson1ConflictExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "ConflictException",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput),
        Message: void 0
      };
      data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restJson1InternalServerExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "InternalServerException",
        $fault: "server",
        $retryable: {},
        $metadata: deserializeMetadata3(parsedOutput),
        Message: void 0
      };
      data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restJson1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "ResourceNotFoundException",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput),
        Message: void 0
      };
      data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restJson1ServiceQuotaExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "ServiceQuotaExceededException",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput),
        Message: void 0
      };
      data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restJson1ThrottlingExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "ThrottlingException",
        $fault: "client",
        $retryable: {},
        $metadata: deserializeMetadata3(parsedOutput),
        Message: void 0
      };
      data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      return [2, contents];
    });
  });
};
var deserializeAws_restJson1ValidationExceptionResponse = function(parsedOutput, context) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var contents, data;
    return __generator9(this, function(_a) {
      contents = {
        name: "ValidationException",
        $fault: "client",
        $metadata: deserializeMetadata3(parsedOutput),
        FieldList: void 0,
        Message: void 0,
        Reason: void 0
      };
      data = parsedOutput.body;
      if (data.fieldList !== void 0 && data.fieldList !== null) {
        contents.FieldList = deserializeAws_restJson1ValidationExceptionFieldList(data.fieldList, context);
      }
      if (data.message !== void 0 && data.message !== null) {
        contents.Message = expectString(data.message);
      }
      if (data.reason !== void 0 && data.reason !== null) {
        contents.Reason = expectString(data.reason);
      }
      return [2, contents];
    });
  });
};
var serializeAws_restJson1BatchPutGeofenceRequestEntry = function(input, context) {
  return __assign9(__assign9({}, input.GeofenceId !== void 0 && input.GeofenceId !== null && { GeofenceId: input.GeofenceId }), input.Geometry !== void 0 && input.Geometry !== null && { Geometry: serializeAws_restJson1GeofenceGeometry(input.Geometry, context) });
};
var serializeAws_restJson1BatchPutGeofenceRequestEntryList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_restJson1BatchPutGeofenceRequestEntry(entry, context);
  });
};
var serializeAws_restJson1BoundingBox = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeFloat(entry);
  });
};
var serializeAws_restJson1CalculateRouteCarModeOptions = function(input, context) {
  return __assign9(__assign9({}, input.AvoidFerries !== void 0 && input.AvoidFerries !== null && { AvoidFerries: input.AvoidFerries }), input.AvoidTolls !== void 0 && input.AvoidTolls !== null && { AvoidTolls: input.AvoidTolls });
};
var serializeAws_restJson1CalculateRouteTruckModeOptions = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.AvoidFerries !== void 0 && input.AvoidFerries !== null && { AvoidFerries: input.AvoidFerries }), input.AvoidTolls !== void 0 && input.AvoidTolls !== null && { AvoidTolls: input.AvoidTolls }), input.Dimensions !== void 0 && input.Dimensions !== null && { Dimensions: serializeAws_restJson1TruckDimensions(input.Dimensions, context) }), input.Weight !== void 0 && input.Weight !== null && { Weight: serializeAws_restJson1TruckWeight(input.Weight, context) });
};
var serializeAws_restJson1CountryCodeList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_restJson1DataSourceConfiguration = function(input, context) {
  return __assign9({}, input.IntendedUse !== void 0 && input.IntendedUse !== null && { IntendedUse: input.IntendedUse });
};
var serializeAws_restJson1DeviceIdsList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_restJson1DevicePositionUpdate = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9({}, input.Accuracy !== void 0 && input.Accuracy !== null && { Accuracy: serializeAws_restJson1PositionalAccuracy(input.Accuracy, context) }), input.DeviceId !== void 0 && input.DeviceId !== null && { DeviceId: input.DeviceId }), input.Position !== void 0 && input.Position !== null && { Position: serializeAws_restJson1Position(input.Position, context) }), input.PositionProperties !== void 0 && input.PositionProperties !== null && {
    PositionProperties: serializeAws_restJson1PropertyMap(input.PositionProperties, context)
  }), input.SampleTime !== void 0 && input.SampleTime !== null && { SampleTime: input.SampleTime.toISOString().split(".")[0] + "Z" });
};
var serializeAws_restJson1DevicePositionUpdateList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_restJson1DevicePositionUpdate(entry, context);
  });
};
var serializeAws_restJson1GeofenceGeometry = function(input, context) {
  return __assign9({}, input.Polygon !== void 0 && input.Polygon !== null && { Polygon: serializeAws_restJson1LinearRings(input.Polygon, context) });
};
var serializeAws_restJson1IdList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_restJson1LinearRing = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_restJson1Position(entry, context);
  });
};
var serializeAws_restJson1LinearRings = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_restJson1LinearRing(entry, context);
  });
};
var serializeAws_restJson1MapConfiguration = function(input, context) {
  return __assign9({}, input.Style !== void 0 && input.Style !== null && { Style: input.Style });
};
var serializeAws_restJson1Position = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeFloat(entry);
  });
};
var serializeAws_restJson1PositionalAccuracy = function(input, context) {
  return __assign9({}, input.Horizontal !== void 0 && input.Horizontal !== null && { Horizontal: serializeFloat(input.Horizontal) });
};
var serializeAws_restJson1PositionList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_restJson1Position(entry, context);
  });
};
var serializeAws_restJson1PropertyMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_restJson1TagMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_restJson1TruckDimensions = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.Height !== void 0 && input.Height !== null && { Height: serializeFloat(input.Height) }), input.Length !== void 0 && input.Length !== null && { Length: serializeFloat(input.Length) }), input.Unit !== void 0 && input.Unit !== null && { Unit: input.Unit }), input.Width !== void 0 && input.Width !== null && { Width: serializeFloat(input.Width) });
};
var serializeAws_restJson1TruckWeight = function(input, context) {
  return __assign9(__assign9({}, input.Total !== void 0 && input.Total !== null && { Total: serializeFloat(input.Total) }), input.Unit !== void 0 && input.Unit !== null && { Unit: input.Unit });
};
var serializeAws_restJson1WaypointPositionList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_restJson1Position(entry, context);
  });
};
var deserializeAws_restJson1ArnList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restJson1BatchDeleteDevicePositionHistoryError = function(output, context) {
  return {
    DeviceId: expectString(output.DeviceId),
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : void 0
  };
};
var deserializeAws_restJson1BatchDeleteDevicePositionHistoryErrorList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchDeleteDevicePositionHistoryError(entry, context);
  });
};
var deserializeAws_restJson1BatchDeleteGeofenceError = function(output, context) {
  return {
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : void 0,
    GeofenceId: expectString(output.GeofenceId)
  };
};
var deserializeAws_restJson1BatchDeleteGeofenceErrorList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchDeleteGeofenceError(entry, context);
  });
};
var deserializeAws_restJson1BatchEvaluateGeofencesError = function(output, context) {
  return {
    DeviceId: expectString(output.DeviceId),
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : void 0,
    SampleTime: output.SampleTime !== void 0 && output.SampleTime !== null ? expectNonNull(parseRfc3339DateTime(output.SampleTime)) : void 0
  };
};
var deserializeAws_restJson1BatchEvaluateGeofencesErrorList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchEvaluateGeofencesError(entry, context);
  });
};
var deserializeAws_restJson1BatchGetDevicePositionError = function(output, context) {
  return {
    DeviceId: expectString(output.DeviceId),
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : void 0
  };
};
var deserializeAws_restJson1BatchGetDevicePositionErrorList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchGetDevicePositionError(entry, context);
  });
};
var deserializeAws_restJson1BatchItemError = function(output, context) {
  return {
    Code: expectString(output.Code),
    Message: expectString(output.Message)
  };
};
var deserializeAws_restJson1BatchPutGeofenceError = function(output, context) {
  return {
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : void 0,
    GeofenceId: expectString(output.GeofenceId)
  };
};
var deserializeAws_restJson1BatchPutGeofenceErrorList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchPutGeofenceError(entry, context);
  });
};
var deserializeAws_restJson1BatchPutGeofenceSuccess = function(output, context) {
  return {
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    GeofenceId: expectString(output.GeofenceId),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1BatchPutGeofenceSuccessList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchPutGeofenceSuccess(entry, context);
  });
};
var deserializeAws_restJson1BatchUpdateDevicePositionError = function(output, context) {
  return {
    DeviceId: expectString(output.DeviceId),
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1BatchItemError(output.Error, context) : void 0,
    SampleTime: output.SampleTime !== void 0 && output.SampleTime !== null ? expectNonNull(parseRfc3339DateTime(output.SampleTime)) : void 0
  };
};
var deserializeAws_restJson1BatchUpdateDevicePositionErrorList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1BatchUpdateDevicePositionError(entry, context);
  });
};
var deserializeAws_restJson1BoundingBox = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return limitedParseDouble(entry);
  });
};
var deserializeAws_restJson1CalculateRouteMatrixSummary = function(output, context) {
  return {
    DataSource: expectString(output.DataSource),
    DistanceUnit: expectString(output.DistanceUnit),
    ErrorCount: expectInt32(output.ErrorCount),
    RouteCount: expectInt32(output.RouteCount)
  };
};
var deserializeAws_restJson1CalculateRouteSummary = function(output, context) {
  return {
    DataSource: expectString(output.DataSource),
    Distance: limitedParseDouble(output.Distance),
    DistanceUnit: expectString(output.DistanceUnit),
    DurationSeconds: limitedParseDouble(output.DurationSeconds),
    RouteBBox: output.RouteBBox !== void 0 && output.RouteBBox !== null ? deserializeAws_restJson1BoundingBox(output.RouteBBox, context) : void 0
  };
};
var deserializeAws_restJson1CountryCodeList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return expectString(entry);
  });
};
var deserializeAws_restJson1DataSourceConfiguration = function(output, context) {
  return {
    IntendedUse: expectString(output.IntendedUse)
  };
};
var deserializeAws_restJson1DevicePosition = function(output, context) {
  return {
    Accuracy: output.Accuracy !== void 0 && output.Accuracy !== null ? deserializeAws_restJson1PositionalAccuracy(output.Accuracy, context) : void 0,
    DeviceId: expectString(output.DeviceId),
    Position: output.Position !== void 0 && output.Position !== null ? deserializeAws_restJson1Position(output.Position, context) : void 0,
    PositionProperties: output.PositionProperties !== void 0 && output.PositionProperties !== null ? deserializeAws_restJson1PropertyMap(output.PositionProperties, context) : void 0,
    ReceivedTime: output.ReceivedTime !== void 0 && output.ReceivedTime !== null ? expectNonNull(parseRfc3339DateTime(output.ReceivedTime)) : void 0,
    SampleTime: output.SampleTime !== void 0 && output.SampleTime !== null ? expectNonNull(parseRfc3339DateTime(output.SampleTime)) : void 0
  };
};
var deserializeAws_restJson1DevicePositionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1DevicePosition(entry, context);
  });
};
var deserializeAws_restJson1GeofenceGeometry = function(output, context) {
  return {
    Polygon: output.Polygon !== void 0 && output.Polygon !== null ? deserializeAws_restJson1LinearRings(output.Polygon, context) : void 0
  };
};
var deserializeAws_restJson1Leg = function(output, context) {
  return {
    Distance: limitedParseDouble(output.Distance),
    DurationSeconds: limitedParseDouble(output.DurationSeconds),
    EndPosition: output.EndPosition !== void 0 && output.EndPosition !== null ? deserializeAws_restJson1Position(output.EndPosition, context) : void 0,
    Geometry: output.Geometry !== void 0 && output.Geometry !== null ? deserializeAws_restJson1LegGeometry(output.Geometry, context) : void 0,
    StartPosition: output.StartPosition !== void 0 && output.StartPosition !== null ? deserializeAws_restJson1Position(output.StartPosition, context) : void 0,
    Steps: output.Steps !== void 0 && output.Steps !== null ? deserializeAws_restJson1StepList(output.Steps, context) : void 0
  };
};
var deserializeAws_restJson1LegGeometry = function(output, context) {
  return {
    LineString: output.LineString !== void 0 && output.LineString !== null ? deserializeAws_restJson1LineString(output.LineString, context) : void 0
  };
};
var deserializeAws_restJson1LegList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1Leg(entry, context);
  });
};
var deserializeAws_restJson1LinearRing = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1Position(entry, context);
  });
};
var deserializeAws_restJson1LinearRings = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1LinearRing(entry, context);
  });
};
var deserializeAws_restJson1LineString = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1Position(entry, context);
  });
};
var deserializeAws_restJson1ListDevicePositionsResponseEntry = function(output, context) {
  return {
    Accuracy: output.Accuracy !== void 0 && output.Accuracy !== null ? deserializeAws_restJson1PositionalAccuracy(output.Accuracy, context) : void 0,
    DeviceId: expectString(output.DeviceId),
    Position: output.Position !== void 0 && output.Position !== null ? deserializeAws_restJson1Position(output.Position, context) : void 0,
    PositionProperties: output.PositionProperties !== void 0 && output.PositionProperties !== null ? deserializeAws_restJson1PropertyMap(output.PositionProperties, context) : void 0,
    SampleTime: output.SampleTime !== void 0 && output.SampleTime !== null ? expectNonNull(parseRfc3339DateTime(output.SampleTime)) : void 0
  };
};
var deserializeAws_restJson1ListDevicePositionsResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListDevicePositionsResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1ListGeofenceCollectionsResponseEntry = function(output, context) {
  return {
    CollectionName: expectString(output.CollectionName),
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    Description: expectString(output.Description),
    PricingPlan: expectString(output.PricingPlan),
    PricingPlanDataSource: expectString(output.PricingPlanDataSource),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1ListGeofenceCollectionsResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListGeofenceCollectionsResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1ListGeofenceResponseEntry = function(output, context) {
  return {
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    GeofenceId: expectString(output.GeofenceId),
    Geometry: output.Geometry !== void 0 && output.Geometry !== null ? deserializeAws_restJson1GeofenceGeometry(output.Geometry, context) : void 0,
    Status: expectString(output.Status),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1ListGeofenceResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListGeofenceResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1ListMapsResponseEntry = function(output, context) {
  return {
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    DataSource: expectString(output.DataSource),
    Description: expectString(output.Description),
    MapName: expectString(output.MapName),
    PricingPlan: expectString(output.PricingPlan),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1ListMapsResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListMapsResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1ListPlaceIndexesResponseEntry = function(output, context) {
  return {
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    DataSource: expectString(output.DataSource),
    Description: expectString(output.Description),
    IndexName: expectString(output.IndexName),
    PricingPlan: expectString(output.PricingPlan),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1ListPlaceIndexesResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListPlaceIndexesResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1ListRouteCalculatorsResponseEntry = function(output, context) {
  return {
    CalculatorName: expectString(output.CalculatorName),
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    DataSource: expectString(output.DataSource),
    Description: expectString(output.Description),
    PricingPlan: expectString(output.PricingPlan),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1ListRouteCalculatorsResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListRouteCalculatorsResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1ListTrackersResponseEntry = function(output, context) {
  return {
    CreateTime: output.CreateTime !== void 0 && output.CreateTime !== null ? expectNonNull(parseRfc3339DateTime(output.CreateTime)) : void 0,
    Description: expectString(output.Description),
    PricingPlan: expectString(output.PricingPlan),
    PricingPlanDataSource: expectString(output.PricingPlanDataSource),
    TrackerName: expectString(output.TrackerName),
    UpdateTime: output.UpdateTime !== void 0 && output.UpdateTime !== null ? expectNonNull(parseRfc3339DateTime(output.UpdateTime)) : void 0
  };
};
var deserializeAws_restJson1ListTrackersResponseEntryList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ListTrackersResponseEntry(entry, context);
  });
};
var deserializeAws_restJson1MapConfiguration = function(output, context) {
  return {
    Style: expectString(output.Style)
  };
};
var deserializeAws_restJson1Place = function(output, context) {
  return {
    AddressNumber: expectString(output.AddressNumber),
    Country: expectString(output.Country),
    Geometry: output.Geometry !== void 0 && output.Geometry !== null ? deserializeAws_restJson1PlaceGeometry(output.Geometry, context) : void 0,
    Interpolated: expectBoolean(output.Interpolated),
    Label: expectString(output.Label),
    Municipality: expectString(output.Municipality),
    Neighborhood: expectString(output.Neighborhood),
    PostalCode: expectString(output.PostalCode),
    Region: expectString(output.Region),
    Street: expectString(output.Street),
    SubRegion: expectString(output.SubRegion),
    TimeZone: output.TimeZone !== void 0 && output.TimeZone !== null ? deserializeAws_restJson1TimeZone(output.TimeZone, context) : void 0
  };
};
var deserializeAws_restJson1PlaceGeometry = function(output, context) {
  return {
    Point: output.Point !== void 0 && output.Point !== null ? deserializeAws_restJson1Position(output.Point, context) : void 0
  };
};
var deserializeAws_restJson1Position = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return limitedParseDouble(entry);
  });
};
var deserializeAws_restJson1PositionalAccuracy = function(output, context) {
  return {
    Horizontal: limitedParseDouble(output.Horizontal)
  };
};
var deserializeAws_restJson1PositionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1Position(entry, context);
  });
};
var deserializeAws_restJson1PropertyMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = expectString(value), _b));
  }, {});
};
var deserializeAws_restJson1RouteMatrix = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1RouteMatrixRow(entry, context);
  });
};
var deserializeAws_restJson1RouteMatrixEntry = function(output, context) {
  return {
    Distance: limitedParseDouble(output.Distance),
    DurationSeconds: limitedParseDouble(output.DurationSeconds),
    Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_restJson1RouteMatrixEntryError(output.Error, context) : void 0
  };
};
var deserializeAws_restJson1RouteMatrixEntryError = function(output, context) {
  return {
    Code: expectString(output.Code),
    Message: expectString(output.Message)
  };
};
var deserializeAws_restJson1RouteMatrixRow = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1RouteMatrixEntry(entry, context);
  });
};
var deserializeAws_restJson1SearchForPositionResult = function(output, context) {
  return {
    Distance: limitedParseDouble(output.Distance),
    Place: output.Place !== void 0 && output.Place !== null ? deserializeAws_restJson1Place(output.Place, context) : void 0
  };
};
var deserializeAws_restJson1SearchForPositionResultList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1SearchForPositionResult(entry, context);
  });
};
var deserializeAws_restJson1SearchForSuggestionsResult = function(output, context) {
  return {
    Text: expectString(output.Text)
  };
};
var deserializeAws_restJson1SearchForSuggestionsResultList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1SearchForSuggestionsResult(entry, context);
  });
};
var deserializeAws_restJson1SearchForTextResult = function(output, context) {
  return {
    Distance: limitedParseDouble(output.Distance),
    Place: output.Place !== void 0 && output.Place !== null ? deserializeAws_restJson1Place(output.Place, context) : void 0,
    Relevance: limitedParseDouble(output.Relevance)
  };
};
var deserializeAws_restJson1SearchForTextResultList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1SearchForTextResult(entry, context);
  });
};
var deserializeAws_restJson1SearchPlaceIndexForPositionSummary = function(output, context) {
  return {
    DataSource: expectString(output.DataSource),
    Language: expectString(output.Language),
    MaxResults: expectInt32(output.MaxResults),
    Position: output.Position !== void 0 && output.Position !== null ? deserializeAws_restJson1Position(output.Position, context) : void 0
  };
};
var deserializeAws_restJson1SearchPlaceIndexForSuggestionsSummary = function(output, context) {
  return {
    BiasPosition: output.BiasPosition !== void 0 && output.BiasPosition !== null ? deserializeAws_restJson1Position(output.BiasPosition, context) : void 0,
    DataSource: expectString(output.DataSource),
    FilterBBox: output.FilterBBox !== void 0 && output.FilterBBox !== null ? deserializeAws_restJson1BoundingBox(output.FilterBBox, context) : void 0,
    FilterCountries: output.FilterCountries !== void 0 && output.FilterCountries !== null ? deserializeAws_restJson1CountryCodeList(output.FilterCountries, context) : void 0,
    Language: expectString(output.Language),
    MaxResults: expectInt32(output.MaxResults),
    Text: expectString(output.Text)
  };
};
var deserializeAws_restJson1SearchPlaceIndexForTextSummary = function(output, context) {
  return {
    BiasPosition: output.BiasPosition !== void 0 && output.BiasPosition !== null ? deserializeAws_restJson1Position(output.BiasPosition, context) : void 0,
    DataSource: expectString(output.DataSource),
    FilterBBox: output.FilterBBox !== void 0 && output.FilterBBox !== null ? deserializeAws_restJson1BoundingBox(output.FilterBBox, context) : void 0,
    FilterCountries: output.FilterCountries !== void 0 && output.FilterCountries !== null ? deserializeAws_restJson1CountryCodeList(output.FilterCountries, context) : void 0,
    Language: expectString(output.Language),
    MaxResults: expectInt32(output.MaxResults),
    ResultBBox: output.ResultBBox !== void 0 && output.ResultBBox !== null ? deserializeAws_restJson1BoundingBox(output.ResultBBox, context) : void 0,
    Text: expectString(output.Text)
  };
};
var deserializeAws_restJson1Step = function(output, context) {
  return {
    Distance: limitedParseDouble(output.Distance),
    DurationSeconds: limitedParseDouble(output.DurationSeconds),
    EndPosition: output.EndPosition !== void 0 && output.EndPosition !== null ? deserializeAws_restJson1Position(output.EndPosition, context) : void 0,
    GeometryOffset: expectInt32(output.GeometryOffset),
    StartPosition: output.StartPosition !== void 0 && output.StartPosition !== null ? deserializeAws_restJson1Position(output.StartPosition, context) : void 0
  };
};
var deserializeAws_restJson1StepList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1Step(entry, context);
  });
};
var deserializeAws_restJson1TagMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read10(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = expectString(value), _b));
  }, {});
};
var deserializeAws_restJson1TimeZone = function(output, context) {
  return {
    Name: expectString(output.Name),
    Offset: expectInt32(output.Offset)
  };
};
var deserializeAws_restJson1ValidationExceptionField = function(output, context) {
  return {
    Message: expectString(output.message),
    Name: expectString(output.name)
  };
};
var deserializeAws_restJson1ValidationExceptionFieldList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_restJson1ValidationExceptionField(entry, context);
  });
};
var deserializeMetadata3 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody3 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString3 = function(streamBody, context) {
  return collectBody3(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var parseBody3 = function(streamBody, context) {
  return collectBodyString3(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode3 = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/client-location/dist-es/commands/AssociateTrackerConsumerCommand.js
var AssociateTrackerConsumerCommand = function(_super) {
  __extends5(AssociateTrackerConsumerCommand2, _super);
  function AssociateTrackerConsumerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  AssociateTrackerConsumerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "AssociateTrackerConsumerCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: AssociateTrackerConsumerRequest.filterSensitiveLog,
      outputFilterSensitiveLog: AssociateTrackerConsumerResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  AssociateTrackerConsumerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1AssociateTrackerConsumerCommand(input, context);
  };
  AssociateTrackerConsumerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1AssociateTrackerConsumerCommand(output, context);
  };
  return AssociateTrackerConsumerCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/BatchDeleteDevicePositionHistoryCommand.js
var BatchDeleteDevicePositionHistoryCommand = function(_super) {
  __extends5(BatchDeleteDevicePositionHistoryCommand2, _super);
  function BatchDeleteDevicePositionHistoryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchDeleteDevicePositionHistoryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "BatchDeleteDevicePositionHistoryCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchDeleteDevicePositionHistoryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: BatchDeleteDevicePositionHistoryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchDeleteDevicePositionHistoryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1BatchDeleteDevicePositionHistoryCommand(input, context);
  };
  BatchDeleteDevicePositionHistoryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1BatchDeleteDevicePositionHistoryCommand(output, context);
  };
  return BatchDeleteDevicePositionHistoryCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/BatchDeleteGeofenceCommand.js
var BatchDeleteGeofenceCommand = function(_super) {
  __extends5(BatchDeleteGeofenceCommand2, _super);
  function BatchDeleteGeofenceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchDeleteGeofenceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "BatchDeleteGeofenceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchDeleteGeofenceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: BatchDeleteGeofenceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchDeleteGeofenceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1BatchDeleteGeofenceCommand(input, context);
  };
  BatchDeleteGeofenceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1BatchDeleteGeofenceCommand(output, context);
  };
  return BatchDeleteGeofenceCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/BatchEvaluateGeofencesCommand.js
var BatchEvaluateGeofencesCommand = function(_super) {
  __extends5(BatchEvaluateGeofencesCommand2, _super);
  function BatchEvaluateGeofencesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchEvaluateGeofencesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "BatchEvaluateGeofencesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchEvaluateGeofencesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: BatchEvaluateGeofencesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchEvaluateGeofencesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1BatchEvaluateGeofencesCommand(input, context);
  };
  BatchEvaluateGeofencesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1BatchEvaluateGeofencesCommand(output, context);
  };
  return BatchEvaluateGeofencesCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/BatchGetDevicePositionCommand.js
var BatchGetDevicePositionCommand = function(_super) {
  __extends5(BatchGetDevicePositionCommand2, _super);
  function BatchGetDevicePositionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchGetDevicePositionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "BatchGetDevicePositionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchGetDevicePositionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: BatchGetDevicePositionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchGetDevicePositionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1BatchGetDevicePositionCommand(input, context);
  };
  BatchGetDevicePositionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1BatchGetDevicePositionCommand(output, context);
  };
  return BatchGetDevicePositionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/BatchPutGeofenceCommand.js
var BatchPutGeofenceCommand = function(_super) {
  __extends5(BatchPutGeofenceCommand2, _super);
  function BatchPutGeofenceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchPutGeofenceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "BatchPutGeofenceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchPutGeofenceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: BatchPutGeofenceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchPutGeofenceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1BatchPutGeofenceCommand(input, context);
  };
  BatchPutGeofenceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1BatchPutGeofenceCommand(output, context);
  };
  return BatchPutGeofenceCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/BatchUpdateDevicePositionCommand.js
var BatchUpdateDevicePositionCommand = function(_super) {
  __extends5(BatchUpdateDevicePositionCommand2, _super);
  function BatchUpdateDevicePositionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  BatchUpdateDevicePositionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "BatchUpdateDevicePositionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: BatchUpdateDevicePositionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: BatchUpdateDevicePositionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  BatchUpdateDevicePositionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1BatchUpdateDevicePositionCommand(input, context);
  };
  BatchUpdateDevicePositionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1BatchUpdateDevicePositionCommand(output, context);
  };
  return BatchUpdateDevicePositionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CalculateRouteCommand.js
var CalculateRouteCommand = function(_super) {
  __extends5(CalculateRouteCommand2, _super);
  function CalculateRouteCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CalculateRouteCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CalculateRouteCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CalculateRouteRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CalculateRouteResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CalculateRouteCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CalculateRouteCommand(input, context);
  };
  CalculateRouteCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CalculateRouteCommand(output, context);
  };
  return CalculateRouteCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CalculateRouteMatrixCommand.js
var CalculateRouteMatrixCommand = function(_super) {
  __extends5(CalculateRouteMatrixCommand2, _super);
  function CalculateRouteMatrixCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CalculateRouteMatrixCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CalculateRouteMatrixCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CalculateRouteMatrixRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CalculateRouteMatrixResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CalculateRouteMatrixCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CalculateRouteMatrixCommand(input, context);
  };
  CalculateRouteMatrixCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CalculateRouteMatrixCommand(output, context);
  };
  return CalculateRouteMatrixCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CreateGeofenceCollectionCommand.js
var CreateGeofenceCollectionCommand = function(_super) {
  __extends5(CreateGeofenceCollectionCommand2, _super);
  function CreateGeofenceCollectionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateGeofenceCollectionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CreateGeofenceCollectionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateGeofenceCollectionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateGeofenceCollectionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateGeofenceCollectionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CreateGeofenceCollectionCommand(input, context);
  };
  CreateGeofenceCollectionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CreateGeofenceCollectionCommand(output, context);
  };
  return CreateGeofenceCollectionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CreateMapCommand.js
var CreateMapCommand = function(_super) {
  __extends5(CreateMapCommand2, _super);
  function CreateMapCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateMapCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CreateMapCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateMapRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateMapResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateMapCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CreateMapCommand(input, context);
  };
  CreateMapCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CreateMapCommand(output, context);
  };
  return CreateMapCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CreatePlaceIndexCommand.js
var CreatePlaceIndexCommand = function(_super) {
  __extends5(CreatePlaceIndexCommand2, _super);
  function CreatePlaceIndexCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreatePlaceIndexCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CreatePlaceIndexCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreatePlaceIndexRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreatePlaceIndexResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreatePlaceIndexCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CreatePlaceIndexCommand(input, context);
  };
  CreatePlaceIndexCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CreatePlaceIndexCommand(output, context);
  };
  return CreatePlaceIndexCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CreateRouteCalculatorCommand.js
var CreateRouteCalculatorCommand = function(_super) {
  __extends5(CreateRouteCalculatorCommand2, _super);
  function CreateRouteCalculatorCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateRouteCalculatorCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CreateRouteCalculatorCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateRouteCalculatorRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateRouteCalculatorResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateRouteCalculatorCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CreateRouteCalculatorCommand(input, context);
  };
  CreateRouteCalculatorCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CreateRouteCalculatorCommand(output, context);
  };
  return CreateRouteCalculatorCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/CreateTrackerCommand.js
var CreateTrackerCommand = function(_super) {
  __extends5(CreateTrackerCommand2, _super);
  function CreateTrackerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  CreateTrackerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "CreateTrackerCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: CreateTrackerRequest.filterSensitiveLog,
      outputFilterSensitiveLog: CreateTrackerResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  CreateTrackerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1CreateTrackerCommand(input, context);
  };
  CreateTrackerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1CreateTrackerCommand(output, context);
  };
  return CreateTrackerCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DeleteGeofenceCollectionCommand.js
var DeleteGeofenceCollectionCommand = function(_super) {
  __extends5(DeleteGeofenceCollectionCommand2, _super);
  function DeleteGeofenceCollectionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteGeofenceCollectionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DeleteGeofenceCollectionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteGeofenceCollectionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteGeofenceCollectionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteGeofenceCollectionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DeleteGeofenceCollectionCommand(input, context);
  };
  DeleteGeofenceCollectionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DeleteGeofenceCollectionCommand(output, context);
  };
  return DeleteGeofenceCollectionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DeleteMapCommand.js
var DeleteMapCommand = function(_super) {
  __extends5(DeleteMapCommand2, _super);
  function DeleteMapCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteMapCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DeleteMapCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteMapRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteMapResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteMapCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DeleteMapCommand(input, context);
  };
  DeleteMapCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DeleteMapCommand(output, context);
  };
  return DeleteMapCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DeletePlaceIndexCommand.js
var DeletePlaceIndexCommand = function(_super) {
  __extends5(DeletePlaceIndexCommand2, _super);
  function DeletePlaceIndexCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeletePlaceIndexCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DeletePlaceIndexCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeletePlaceIndexRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeletePlaceIndexResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeletePlaceIndexCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DeletePlaceIndexCommand(input, context);
  };
  DeletePlaceIndexCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DeletePlaceIndexCommand(output, context);
  };
  return DeletePlaceIndexCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DeleteRouteCalculatorCommand.js
var DeleteRouteCalculatorCommand = function(_super) {
  __extends5(DeleteRouteCalculatorCommand2, _super);
  function DeleteRouteCalculatorCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteRouteCalculatorCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DeleteRouteCalculatorCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteRouteCalculatorRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteRouteCalculatorResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteRouteCalculatorCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DeleteRouteCalculatorCommand(input, context);
  };
  DeleteRouteCalculatorCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DeleteRouteCalculatorCommand(output, context);
  };
  return DeleteRouteCalculatorCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DeleteTrackerCommand.js
var DeleteTrackerCommand = function(_super) {
  __extends5(DeleteTrackerCommand2, _super);
  function DeleteTrackerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DeleteTrackerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DeleteTrackerCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteTrackerRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DeleteTrackerResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DeleteTrackerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DeleteTrackerCommand(input, context);
  };
  DeleteTrackerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DeleteTrackerCommand(output, context);
  };
  return DeleteTrackerCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DescribeGeofenceCollectionCommand.js
var DescribeGeofenceCollectionCommand = function(_super) {
  __extends5(DescribeGeofenceCollectionCommand2, _super);
  function DescribeGeofenceCollectionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeGeofenceCollectionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DescribeGeofenceCollectionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeGeofenceCollectionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeGeofenceCollectionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeGeofenceCollectionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DescribeGeofenceCollectionCommand(input, context);
  };
  DescribeGeofenceCollectionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DescribeGeofenceCollectionCommand(output, context);
  };
  return DescribeGeofenceCollectionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DescribeMapCommand.js
var DescribeMapCommand = function(_super) {
  __extends5(DescribeMapCommand2, _super);
  function DescribeMapCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeMapCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DescribeMapCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeMapRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeMapResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeMapCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DescribeMapCommand(input, context);
  };
  DescribeMapCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DescribeMapCommand(output, context);
  };
  return DescribeMapCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DescribePlaceIndexCommand.js
var DescribePlaceIndexCommand = function(_super) {
  __extends5(DescribePlaceIndexCommand2, _super);
  function DescribePlaceIndexCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribePlaceIndexCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DescribePlaceIndexCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribePlaceIndexRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribePlaceIndexResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribePlaceIndexCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DescribePlaceIndexCommand(input, context);
  };
  DescribePlaceIndexCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DescribePlaceIndexCommand(output, context);
  };
  return DescribePlaceIndexCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DescribeRouteCalculatorCommand.js
var DescribeRouteCalculatorCommand = function(_super) {
  __extends5(DescribeRouteCalculatorCommand2, _super);
  function DescribeRouteCalculatorCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeRouteCalculatorCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DescribeRouteCalculatorCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeRouteCalculatorRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeRouteCalculatorResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeRouteCalculatorCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DescribeRouteCalculatorCommand(input, context);
  };
  DescribeRouteCalculatorCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DescribeRouteCalculatorCommand(output, context);
  };
  return DescribeRouteCalculatorCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DescribeTrackerCommand.js
var DescribeTrackerCommand = function(_super) {
  __extends5(DescribeTrackerCommand2, _super);
  function DescribeTrackerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DescribeTrackerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DescribeTrackerCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DescribeTrackerRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DescribeTrackerResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DescribeTrackerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DescribeTrackerCommand(input, context);
  };
  DescribeTrackerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DescribeTrackerCommand(output, context);
  };
  return DescribeTrackerCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/DisassociateTrackerConsumerCommand.js
var DisassociateTrackerConsumerCommand = function(_super) {
  __extends5(DisassociateTrackerConsumerCommand2, _super);
  function DisassociateTrackerConsumerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  DisassociateTrackerConsumerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "DisassociateTrackerConsumerCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: DisassociateTrackerConsumerRequest.filterSensitiveLog,
      outputFilterSensitiveLog: DisassociateTrackerConsumerResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  DisassociateTrackerConsumerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1DisassociateTrackerConsumerCommand(input, context);
  };
  DisassociateTrackerConsumerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1DisassociateTrackerConsumerCommand(output, context);
  };
  return DisassociateTrackerConsumerCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetDevicePositionCommand.js
var GetDevicePositionCommand = function(_super) {
  __extends5(GetDevicePositionCommand2, _super);
  function GetDevicePositionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetDevicePositionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetDevicePositionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetDevicePositionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetDevicePositionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetDevicePositionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetDevicePositionCommand(input, context);
  };
  GetDevicePositionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetDevicePositionCommand(output, context);
  };
  return GetDevicePositionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetDevicePositionHistoryCommand.js
var GetDevicePositionHistoryCommand = function(_super) {
  __extends5(GetDevicePositionHistoryCommand2, _super);
  function GetDevicePositionHistoryCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetDevicePositionHistoryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetDevicePositionHistoryCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetDevicePositionHistoryRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetDevicePositionHistoryResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetDevicePositionHistoryCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetDevicePositionHistoryCommand(input, context);
  };
  GetDevicePositionHistoryCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetDevicePositionHistoryCommand(output, context);
  };
  return GetDevicePositionHistoryCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetGeofenceCommand.js
var GetGeofenceCommand = function(_super) {
  __extends5(GetGeofenceCommand2, _super);
  function GetGeofenceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetGeofenceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetGeofenceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetGeofenceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetGeofenceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetGeofenceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetGeofenceCommand(input, context);
  };
  GetGeofenceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetGeofenceCommand(output, context);
  };
  return GetGeofenceCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetMapGlyphsCommand.js
var GetMapGlyphsCommand = function(_super) {
  __extends5(GetMapGlyphsCommand2, _super);
  function GetMapGlyphsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetMapGlyphsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetMapGlyphsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetMapGlyphsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetMapGlyphsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetMapGlyphsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetMapGlyphsCommand(input, context);
  };
  GetMapGlyphsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetMapGlyphsCommand(output, context);
  };
  return GetMapGlyphsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetMapSpritesCommand.js
var GetMapSpritesCommand = function(_super) {
  __extends5(GetMapSpritesCommand2, _super);
  function GetMapSpritesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetMapSpritesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetMapSpritesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetMapSpritesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetMapSpritesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetMapSpritesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetMapSpritesCommand(input, context);
  };
  GetMapSpritesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetMapSpritesCommand(output, context);
  };
  return GetMapSpritesCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetMapStyleDescriptorCommand.js
var GetMapStyleDescriptorCommand = function(_super) {
  __extends5(GetMapStyleDescriptorCommand2, _super);
  function GetMapStyleDescriptorCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetMapStyleDescriptorCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetMapStyleDescriptorCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetMapStyleDescriptorRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetMapStyleDescriptorResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetMapStyleDescriptorCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetMapStyleDescriptorCommand(input, context);
  };
  GetMapStyleDescriptorCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetMapStyleDescriptorCommand(output, context);
  };
  return GetMapStyleDescriptorCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/GetMapTileCommand.js
var GetMapTileCommand = function(_super) {
  __extends5(GetMapTileCommand2, _super);
  function GetMapTileCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  GetMapTileCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "GetMapTileCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetMapTileRequest.filterSensitiveLog,
      outputFilterSensitiveLog: GetMapTileResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  GetMapTileCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1GetMapTileCommand(input, context);
  };
  GetMapTileCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1GetMapTileCommand(output, context);
  };
  return GetMapTileCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListDevicePositionsCommand.js
var ListDevicePositionsCommand = function(_super) {
  __extends5(ListDevicePositionsCommand2, _super);
  function ListDevicePositionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListDevicePositionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListDevicePositionsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListDevicePositionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListDevicePositionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListDevicePositionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListDevicePositionsCommand(input, context);
  };
  ListDevicePositionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListDevicePositionsCommand(output, context);
  };
  return ListDevicePositionsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListGeofenceCollectionsCommand.js
var ListGeofenceCollectionsCommand = function(_super) {
  __extends5(ListGeofenceCollectionsCommand2, _super);
  function ListGeofenceCollectionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListGeofenceCollectionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListGeofenceCollectionsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListGeofenceCollectionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListGeofenceCollectionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListGeofenceCollectionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListGeofenceCollectionsCommand(input, context);
  };
  ListGeofenceCollectionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListGeofenceCollectionsCommand(output, context);
  };
  return ListGeofenceCollectionsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListGeofencesCommand.js
var ListGeofencesCommand = function(_super) {
  __extends5(ListGeofencesCommand2, _super);
  function ListGeofencesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListGeofencesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListGeofencesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListGeofencesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListGeofencesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListGeofencesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListGeofencesCommand(input, context);
  };
  ListGeofencesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListGeofencesCommand(output, context);
  };
  return ListGeofencesCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListMapsCommand.js
var ListMapsCommand = function(_super) {
  __extends5(ListMapsCommand2, _super);
  function ListMapsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListMapsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListMapsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListMapsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListMapsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListMapsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListMapsCommand(input, context);
  };
  ListMapsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListMapsCommand(output, context);
  };
  return ListMapsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListPlaceIndexesCommand.js
var ListPlaceIndexesCommand = function(_super) {
  __extends5(ListPlaceIndexesCommand2, _super);
  function ListPlaceIndexesCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListPlaceIndexesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListPlaceIndexesCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListPlaceIndexesRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListPlaceIndexesResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListPlaceIndexesCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListPlaceIndexesCommand(input, context);
  };
  ListPlaceIndexesCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListPlaceIndexesCommand(output, context);
  };
  return ListPlaceIndexesCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListRouteCalculatorsCommand.js
var ListRouteCalculatorsCommand = function(_super) {
  __extends5(ListRouteCalculatorsCommand2, _super);
  function ListRouteCalculatorsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListRouteCalculatorsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListRouteCalculatorsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListRouteCalculatorsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListRouteCalculatorsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListRouteCalculatorsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListRouteCalculatorsCommand(input, context);
  };
  ListRouteCalculatorsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListRouteCalculatorsCommand(output, context);
  };
  return ListRouteCalculatorsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand2 = function(_super) {
  __extends5(ListTagsForResourceCommand3, _super);
  function ListTagsForResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTagsForResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListTagsForResourceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTagsForResourceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTagsForResourceResponse2.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTagsForResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListTagsForResourceCommand(input, context);
  };
  ListTagsForResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListTagsForResourceCommand(output, context);
  };
  return ListTagsForResourceCommand3;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListTrackerConsumersCommand.js
var ListTrackerConsumersCommand = function(_super) {
  __extends5(ListTrackerConsumersCommand2, _super);
  function ListTrackerConsumersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTrackerConsumersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListTrackerConsumersCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTrackerConsumersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTrackerConsumersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTrackerConsumersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListTrackerConsumersCommand(input, context);
  };
  ListTrackerConsumersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListTrackerConsumersCommand(output, context);
  };
  return ListTrackerConsumersCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/ListTrackersCommand.js
var ListTrackersCommand = function(_super) {
  __extends5(ListTrackersCommand2, _super);
  function ListTrackersCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  ListTrackersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "ListTrackersCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: ListTrackersRequest.filterSensitiveLog,
      outputFilterSensitiveLog: ListTrackersResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  ListTrackersCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1ListTrackersCommand(input, context);
  };
  ListTrackersCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1ListTrackersCommand(output, context);
  };
  return ListTrackersCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/PutGeofenceCommand.js
var PutGeofenceCommand = function(_super) {
  __extends5(PutGeofenceCommand2, _super);
  function PutGeofenceCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  PutGeofenceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "PutGeofenceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutGeofenceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: PutGeofenceResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  PutGeofenceCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1PutGeofenceCommand(input, context);
  };
  PutGeofenceCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1PutGeofenceCommand(output, context);
  };
  return PutGeofenceCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/SearchPlaceIndexForPositionCommand.js
var SearchPlaceIndexForPositionCommand = function(_super) {
  __extends5(SearchPlaceIndexForPositionCommand2, _super);
  function SearchPlaceIndexForPositionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SearchPlaceIndexForPositionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "SearchPlaceIndexForPositionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: SearchPlaceIndexForPositionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SearchPlaceIndexForPositionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SearchPlaceIndexForPositionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1SearchPlaceIndexForPositionCommand(input, context);
  };
  SearchPlaceIndexForPositionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1SearchPlaceIndexForPositionCommand(output, context);
  };
  return SearchPlaceIndexForPositionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/SearchPlaceIndexForSuggestionsCommand.js
var SearchPlaceIndexForSuggestionsCommand = function(_super) {
  __extends5(SearchPlaceIndexForSuggestionsCommand2, _super);
  function SearchPlaceIndexForSuggestionsCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SearchPlaceIndexForSuggestionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "SearchPlaceIndexForSuggestionsCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: SearchPlaceIndexForSuggestionsRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SearchPlaceIndexForSuggestionsResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SearchPlaceIndexForSuggestionsCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1SearchPlaceIndexForSuggestionsCommand(input, context);
  };
  SearchPlaceIndexForSuggestionsCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1SearchPlaceIndexForSuggestionsCommand(output, context);
  };
  return SearchPlaceIndexForSuggestionsCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/SearchPlaceIndexForTextCommand.js
var SearchPlaceIndexForTextCommand = function(_super) {
  __extends5(SearchPlaceIndexForTextCommand2, _super);
  function SearchPlaceIndexForTextCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  SearchPlaceIndexForTextCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "SearchPlaceIndexForTextCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: SearchPlaceIndexForTextRequest.filterSensitiveLog,
      outputFilterSensitiveLog: SearchPlaceIndexForTextResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  SearchPlaceIndexForTextCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1SearchPlaceIndexForTextCommand(input, context);
  };
  SearchPlaceIndexForTextCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1SearchPlaceIndexForTextCommand(output, context);
  };
  return SearchPlaceIndexForTextCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/TagResourceCommand.js
var TagResourceCommand2 = function(_super) {
  __extends5(TagResourceCommand3, _super);
  function TagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  TagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "TagResourceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: TagResourceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: TagResourceResponse2.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  TagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_restJson1TagResourceCommand(input, context);
  };
  TagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1TagResourceCommand(output, context);
  };
  return TagResourceCommand3;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand2 = function(_super) {
  __extends5(UntagResourceCommand3, _super);
  function UntagResourceCommand3(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UntagResourceCommand3.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "UntagResourceCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UntagResourceRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UntagResourceResponse2.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UntagResourceCommand3.prototype.serialize = function(input, context) {
    return serializeAws_restJson1UntagResourceCommand(input, context);
  };
  UntagResourceCommand3.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1UntagResourceCommand(output, context);
  };
  return UntagResourceCommand3;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/UpdateGeofenceCollectionCommand.js
var UpdateGeofenceCollectionCommand = function(_super) {
  __extends5(UpdateGeofenceCollectionCommand2, _super);
  function UpdateGeofenceCollectionCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateGeofenceCollectionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "UpdateGeofenceCollectionCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateGeofenceCollectionRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateGeofenceCollectionResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateGeofenceCollectionCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1UpdateGeofenceCollectionCommand(input, context);
  };
  UpdateGeofenceCollectionCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1UpdateGeofenceCollectionCommand(output, context);
  };
  return UpdateGeofenceCollectionCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/UpdateMapCommand.js
var UpdateMapCommand = function(_super) {
  __extends5(UpdateMapCommand2, _super);
  function UpdateMapCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateMapCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "UpdateMapCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateMapRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateMapResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateMapCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1UpdateMapCommand(input, context);
  };
  UpdateMapCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1UpdateMapCommand(output, context);
  };
  return UpdateMapCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/UpdatePlaceIndexCommand.js
var UpdatePlaceIndexCommand = function(_super) {
  __extends5(UpdatePlaceIndexCommand2, _super);
  function UpdatePlaceIndexCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdatePlaceIndexCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "UpdatePlaceIndexCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdatePlaceIndexRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdatePlaceIndexResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdatePlaceIndexCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1UpdatePlaceIndexCommand(input, context);
  };
  UpdatePlaceIndexCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1UpdatePlaceIndexCommand(output, context);
  };
  return UpdatePlaceIndexCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/UpdateRouteCalculatorCommand.js
var UpdateRouteCalculatorCommand = function(_super) {
  __extends5(UpdateRouteCalculatorCommand2, _super);
  function UpdateRouteCalculatorCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateRouteCalculatorCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "UpdateRouteCalculatorCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateRouteCalculatorRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateRouteCalculatorResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateRouteCalculatorCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1UpdateRouteCalculatorCommand(input, context);
  };
  UpdateRouteCalculatorCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1UpdateRouteCalculatorCommand(output, context);
  };
  return UpdateRouteCalculatorCommand2;
}(Command2);

// node_modules/@aws-sdk/client-location/dist-es/commands/UpdateTrackerCommand.js
var UpdateTrackerCommand = function(_super) {
  __extends5(UpdateTrackerCommand2, _super);
  function UpdateTrackerCommand2(input) {
    var _this = _super.call(this) || this;
    _this.input = input;
    return _this;
  }
  UpdateTrackerCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin2(configuration, this.serialize, this.deserialize));
    var stack = clientStack.concat(this.middlewareStack);
    var logger15 = configuration.logger;
    var clientName = "LocationClient";
    var commandName = "UpdateTrackerCommand";
    var handlerExecutionContext = {
      logger: logger15,
      clientName,
      commandName,
      inputFilterSensitiveLog: UpdateTrackerRequest.filterSensitiveLog,
      outputFilterSensitiveLog: UpdateTrackerResponse.filterSensitiveLog
    };
    var requestHandler = configuration.requestHandler;
    return stack.resolve(function(request) {
      return requestHandler.handle(request.request, options || {});
    }, handlerExecutionContext);
  };
  UpdateTrackerCommand2.prototype.serialize = function(input, context) {
    return serializeAws_restJson1UpdateTrackerCommand(input, context);
  };
  UpdateTrackerCommand2.prototype.deserialize = function(output, context) {
    return deserializeAws_restJson1UpdateTrackerCommand(output, context);
  };
  return UpdateTrackerCommand2;
}(Command2);

// node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js
var SelectorType;
(function(SelectorType2) {
  SelectorType2["ENV"] = "env";
  SelectorType2["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var DEFAULT_USE_DUALSTACK_ENDPOINT = false;

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var DEFAULT_USE_FIPS_ENDPOINT = false;

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/normalizeBoolean.js
var normalizeBoolean = function(value) {
  if (typeof value === "boolean") {
    var promisified_1 = Promise.resolve(value);
    return function() {
      return promisified_1;
    };
  }
  return value;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/normalizeEndpoint.js
var normalizeEndpoint2 = function(_a) {
  var endpoint = _a.endpoint, urlParser = _a.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js
var getEndpointFromRegion = function(input) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, useDualstackEndpoint, useFipsEndpoint, hostname;
    var _b;
    return __generator9(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.useDualstackEndpoint()];
        case 2:
          useDualstackEndpoint = _c.sent();
          return [4, input.useFipsEndpoint()];
        case 3:
          useFipsEndpoint = _c.sent();
          return [4, input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })];
        case 4:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js
var resolveEndpointsConfig2 = function(input) {
  var _a;
  var useDualstackEndpoint = normalizeBoolean(input.useDualstackEndpoint);
  var endpoint = input.endpoint, useFipsEndpoint = input.useFipsEndpoint;
  return __assign9(__assign9({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: endpoint ? normalizeEndpoint2(__assign9(__assign9({}, input), { endpoint })) : function() {
    return getEndpointFromRegion(__assign9(__assign9({}, input), { useDualstackEndpoint, useFipsEndpoint }));
  }, isCustomEndpoint: endpoint ? true : false, useDualstackEndpoint });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js
var isFipsRegion = function(region) {
  return typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js
var getRealRegion = function(region) {
  return isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js
var resolveRegionConfig2 = function(input) {
  var region = input.region, useFipsEndpoint = input.useFipsEndpoint;
  if (!region) {
    throw new Error("Region is missing");
  }
  return __assign9(__assign9({}, input), { region: function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      var providedRegion;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (typeof region === "string") {
              return [2, getRealRegion(region)];
            }
            return [4, region()];
          case 1:
            providedRegion = _a.sent();
            return [2, getRealRegion(providedRegion)];
        }
      });
    });
  }, useFipsEndpoint: function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      var providedRegion, _a;
      return __generator9(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!(typeof region === "string"))
              return [3, 1];
            _a = region;
            return [3, 3];
          case 1:
            return [4, region()];
          case 2:
            _a = _b.sent();
            _b.label = 3;
          case 3:
            providedRegion = _a;
            if (isFipsRegion(providedRegion)) {
              return [2, true];
            }
            return [2, typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint()];
        }
      });
    });
  } });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js
var getHostnameFromVariants = function(variants, _a) {
  var _b;
  if (variants === void 0) {
    variants = [];
  }
  var useFipsEndpoint = _a.useFipsEndpoint, useDualstackEndpoint = _a.useDualstackEndpoint;
  return (_b = variants.find(function(_a2) {
    var tags = _a2.tags;
    return useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack");
  })) === null || _b === void 0 ? void 0 : _b.hostname;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js
var getResolvedHostname = function(resolvedRegion, _a) {
  var regionHostname = _a.regionHostname, partitionHostname = _a.partitionHostname;
  return regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js
var getResolvedPartition = function(region, _a) {
  var _b;
  var partitionHash2 = _a.partitionHash;
  return (_b = Object.keys(partitionHash2 || {}).find(function(key) {
    return partitionHash2[key].regions.includes(region);
  })) !== null && _b !== void 0 ? _b : "aws";
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js
var getResolvedSigningRegion = function(hostname, _a) {
  var signingRegion = _a.signingRegion, regionRegex = _a.regionRegex, useFipsEndpoint = _a.useFipsEndpoint;
  if (signingRegion) {
    return signingRegion;
  } else if (useFipsEndpoint) {
    var regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
    var regionRegexmatchArray = hostname.match(regionRegexJs);
    if (regionRegexmatchArray) {
      return regionRegexmatchArray[0].slice(1, -1);
    }
  }
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js
var getRegionInfo = function(region, _a) {
  var _b, _c, _d, _e, _f, _g;
  var _h = _a.useFipsEndpoint, useFipsEndpoint = _h === void 0 ? false : _h, _j = _a.useDualstackEndpoint, useDualstackEndpoint = _j === void 0 ? false : _j, signingService = _a.signingService, regionHash2 = _a.regionHash, partitionHash2 = _a.partitionHash;
  var partition = getResolvedPartition(region, { partitionHash: partitionHash2 });
  var resolvedRegion = region in regionHash2 ? region : (_c = (_b = partitionHash2[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;
  var hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
  var regionHostname = getHostnameFromVariants((_d = regionHash2[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
  var partitionHostname = getHostnameFromVariants((_e = partitionHash2[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);
  var hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
  if (hostname === void 0) {
    throw new Error("Endpoint resolution failed for: " + { resolvedRegion, useFipsEndpoint, useDualstackEndpoint });
  }
  var signingRegion = getResolvedSigningRegion(hostname, {
    signingRegion: (_f = regionHash2[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,
    regionRegex: partitionHash2[partition].regionRegex,
    useFipsEndpoint
  });
  return __assign9(__assign9({ partition, signingService, hostname }, signingRegion && { signingRegion }), ((_g = regionHash2[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {
    signingService: regionHash2[resolvedRegion].signingService
  });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-content-length/dist-es/index.js
var CONTENT_LENGTH_HEADER2 = "content-length";
function contentLengthMiddleware2(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter9(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator9(this, function(_b) {
          request = args.request;
          if (HttpRequest2.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER2) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign9(__assign9({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER2] = String(length), _a));
              }
            }
          }
          return [2, next(__assign9(__assign9({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions2 = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware2(options.bodyLengthChecker), contentLengthMiddlewareOptions2);
    }
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig2(input) {
  return input;
}
var hostHeaderMiddleware2 = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter9(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator9(this, function(_b) {
          if (!HttpRequest2.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions2 = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware2(options), hostHeaderMiddlewareOptions2);
    }
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware2 = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter9(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger15, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator9(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger15 = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger15) {
                return [2, response];
              }
              if (typeof logger15.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest3(_a, ["$metadata"]);
                logger15.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions2 = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware2(), loggerMiddlewareOptions2);
    }
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/config.js
var RETRY_MODES;
(function(RETRY_MODES2) {
  RETRY_MODES2["STANDARD"] = "standard";
  RETRY_MODES2["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
var DEFAULT_MAX_ATTEMPTS2 = 3;
var DEFAULT_RETRY_MODE2 = RETRY_MODES.STANDARD;

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/service-error-classification/dist-es/constants.js
var CLOCK_SKEW_ERROR_CODES2 = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES2 = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES2 = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES2 = [500, 502, 503, 504];

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/service-error-classification/dist-es/index.js
var isRetryableByTrait2 = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError2 = function(error) {
  return CLOCK_SKEW_ERROR_CODES2.includes(error.name);
};
var isThrottlingError2 = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES2.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError2 = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES2.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES2.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js
var DefaultRateLimiter = function() {
  function DefaultRateLimiter2(options) {
    var _a, _b, _c, _d, _e;
    this.currentCapacity = 0;
    this.enabled = false;
    this.lastMaxRate = 0;
    this.measuredTxRate = 0;
    this.requestCount = 0;
    this.lastTimestamp = 0;
    this.timeWindow = 0;
    this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
    this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
    this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
    this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
    this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
    var currentTimeInSeconds = this.getCurrentTimeInSeconds();
    this.lastThrottleTime = currentTimeInSeconds;
    this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
    this.fillRate = this.minFillRate;
    this.maxCapacity = this.minCapacity;
  }
  DefaultRateLimiter2.prototype.getCurrentTimeInSeconds = function() {
    return Date.now() / 1e3;
  };
  DefaultRateLimiter2.prototype.getSendToken = function() {
    return __awaiter9(this, void 0, void 0, function() {
      return __generator9(this, function(_a) {
        return [2, this.acquireTokenBucket(1)];
      });
    });
  };
  DefaultRateLimiter2.prototype.acquireTokenBucket = function(amount) {
    return __awaiter9(this, void 0, void 0, function() {
      var delay_1;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!this.enabled) {
              return [2];
            }
            this.refillTokenBucket();
            if (!(amount > this.currentCapacity))
              return [3, 2];
            delay_1 = (amount - this.currentCapacity) / this.fillRate * 1e3;
            return [4, new Promise(function(resolve) {
              return setTimeout(resolve, delay_1);
            })];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            this.currentCapacity = this.currentCapacity - amount;
            return [2];
        }
      });
    });
  };
  DefaultRateLimiter2.prototype.refillTokenBucket = function() {
    var timestamp = this.getCurrentTimeInSeconds();
    if (!this.lastTimestamp) {
      this.lastTimestamp = timestamp;
      return;
    }
    var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
    this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
    this.lastTimestamp = timestamp;
  };
  DefaultRateLimiter2.prototype.updateClientSendingRate = function(response) {
    var calculatedRate;
    this.updateMeasuredRate();
    if (isThrottlingError2(response)) {
      var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
      this.lastMaxRate = rateToUse;
      this.calculateTimeWindow();
      this.lastThrottleTime = this.getCurrentTimeInSeconds();
      calculatedRate = this.cubicThrottle(rateToUse);
      this.enableTokenBucket();
    } else {
      this.calculateTimeWindow();
      calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
    }
    var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
    this.updateTokenBucketRate(newRate);
  };
  DefaultRateLimiter2.prototype.calculateTimeWindow = function() {
    this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
  };
  DefaultRateLimiter2.prototype.cubicThrottle = function(rateToUse) {
    return this.getPrecise(rateToUse * this.beta);
  };
  DefaultRateLimiter2.prototype.cubicSuccess = function(timestamp) {
    return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
  };
  DefaultRateLimiter2.prototype.enableTokenBucket = function() {
    this.enabled = true;
  };
  DefaultRateLimiter2.prototype.updateTokenBucketRate = function(newRate) {
    this.refillTokenBucket();
    this.fillRate = Math.max(newRate, this.minFillRate);
    this.maxCapacity = Math.max(newRate, this.minCapacity);
    this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
  };
  DefaultRateLimiter2.prototype.updateMeasuredRate = function() {
    var t = this.getCurrentTimeInSeconds();
    var timeBucket = Math.floor(t * 2) / 2;
    this.requestCount++;
    if (timeBucket > this.lastTxRateBucket) {
      var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
      this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
      this.requestCount = 0;
      this.lastTxRateBucket = timeBucket;
    }
  };
  DefaultRateLimiter2.prototype.getPrecise = function(num) {
    return parseFloat(num.toFixed(8));
  };
  return DefaultRateLimiter2;
}();

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/parse.js
function parse4(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse4;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/v4.js
function v42(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v42;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/@aws-sdk/client-location/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/constants.js
var DEFAULT_RETRY_DELAY_BASE2 = 100;
var MAXIMUM_RETRY_DELAY2 = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE2 = 500;
var INITIAL_RETRY_TOKENS2 = 500;
var RETRY_COST2 = 5;
var TIMEOUT_RETRY_COST2 = 10;
var NO_RETRY_INCREMENT2 = 1;
var INVOCATION_ID_HEADER2 = "amz-sdk-invocation-id";
var REQUEST_HEADER2 = "amz-sdk-request";

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js
var getDefaultRetryQuota2 = function(initialRetryTokens, options) {
  var _a, _b, _c;
  var MAX_CAPACITY = initialRetryTokens;
  var noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : NO_RETRY_INCREMENT2;
  var retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : RETRY_COST2;
  var timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : TIMEOUT_RETRY_COST2;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js
var defaultDelayDecider2 = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY2, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js
var defaultRetryDecider2 = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait2(error) || isClockSkewError2(error) || isThrottlingError2(error) || isTransientError2(error);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js
var StandardRetryStrategy2 = function() {
  function StandardRetryStrategy3(maxAttemptsProvider, options) {
    var _a, _b, _c;
    this.maxAttemptsProvider = maxAttemptsProvider;
    this.mode = RETRY_MODES.STANDARD;
    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider2;
    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider2;
    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota2(INITIAL_RETRY_TOKENS2);
  }
  StandardRetryStrategy3.prototype.shouldRetry = function(error, attempts, maxAttempts) {
    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
  };
  StandardRetryStrategy3.prototype.getMaxAttempts = function() {
    return __awaiter9(this, void 0, void 0, function() {
      var maxAttempts, error_1;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, this.maxAttemptsProvider()];
          case 1:
            maxAttempts = _a.sent();
            return [3, 3];
          case 2:
            error_1 = _a.sent();
            maxAttempts = DEFAULT_MAX_ATTEMPTS2;
            return [3, 3];
          case 3:
            return [2, maxAttempts];
        }
      });
    });
  };
  StandardRetryStrategy3.prototype.retry = function(next, args, options) {
    return __awaiter9(this, void 0, void 0, function() {
      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            attempts = 0;
            totalDelay = 0;
            return [4, this.getMaxAttempts()];
          case 1:
            maxAttempts = _a.sent();
            request = args.request;
            if (HttpRequest2.isInstance(request)) {
              request.headers[INVOCATION_ID_HEADER2] = v4_default();
            }
            _loop_1 = function() {
              var _b, response, output, e_1, err, delay_1;
              return __generator9(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    _c.trys.push([0, 4, , 7]);
                    if (HttpRequest2.isInstance(request)) {
                      request.headers[REQUEST_HEADER2] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                    }
                    if (!(options === null || options === void 0 ? void 0 : options.beforeRequest))
                      return [3, 2];
                    return [4, options.beforeRequest()];
                  case 1:
                    _c.sent();
                    _c.label = 2;
                  case 2:
                    return [4, next(args)];
                  case 3:
                    _b = _c.sent(), response = _b.response, output = _b.output;
                    if (options === null || options === void 0 ? void 0 : options.afterRequest) {
                      options.afterRequest(response);
                    }
                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                    output.$metadata.attempts = attempts + 1;
                    output.$metadata.totalRetryDelay = totalDelay;
                    return [2, { value: { response, output } }];
                  case 4:
                    e_1 = _c.sent();
                    err = asSdkError(e_1);
                    attempts++;
                    if (!this_1.shouldRetry(err, attempts, maxAttempts))
                      return [3, 6];
                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err);
                    delay_1 = this_1.delayDecider(isThrottlingError2(err) ? THROTTLING_RETRY_DELAY_BASE2 : DEFAULT_RETRY_DELAY_BASE2, attempts);
                    totalDelay += delay_1;
                    return [4, new Promise(function(resolve) {
                      return setTimeout(resolve, delay_1);
                    })];
                  case 5:
                    _c.sent();
                    return [2, "continue"];
                  case 6:
                    if (!err.$metadata) {
                      err.$metadata = {};
                    }
                    err.$metadata.attempts = attempts;
                    err.$metadata.totalRetryDelay = totalDelay;
                    throw err;
                  case 7:
                    return [2];
                }
              });
            };
            this_1 = this;
            _a.label = 2;
          case 2:
            if (false)
              return [3, 4];
            return [5, _loop_1()];
          case 3:
            state_1 = _a.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            return [3, 2];
          case 4:
            return [2];
        }
      });
    });
  };
  return StandardRetryStrategy3;
}();
var asSdkError = function(error) {
  if (error instanceof Error)
    return error;
  if (error instanceof Object)
    return Object.assign(new Error(), error);
  if (typeof error === "string")
    return new Error(error);
  return new Error("AWS SDK error wrapper for " + error);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js
var AdaptiveRetryStrategy = function(_super) {
  __extends5(AdaptiveRetryStrategy2, _super);
  function AdaptiveRetryStrategy2(maxAttemptsProvider, options) {
    var _this = this;
    var _a = options !== null && options !== void 0 ? options : {}, rateLimiter = _a.rateLimiter, superOptions = __rest3(_a, ["rateLimiter"]);
    _this = _super.call(this, maxAttemptsProvider, superOptions) || this;
    _this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter();
    _this.mode = RETRY_MODES.ADAPTIVE;
    return _this;
  }
  AdaptiveRetryStrategy2.prototype.retry = function(next, args) {
    return __awaiter9(this, void 0, void 0, function() {
      var _this = this;
      return __generator9(this, function(_a) {
        return [2, _super.prototype.retry.call(this, next, args, {
          beforeRequest: function() {
            return __awaiter9(_this, void 0, void 0, function() {
              return __generator9(this, function(_a2) {
                return [2, this.rateLimiter.getSendToken()];
              });
            });
          },
          afterRequest: function(response) {
            _this.rateLimiter.updateClientSendingRate(response);
          }
        })];
      });
    });
  };
  return AdaptiveRetryStrategy2;
}(StandardRetryStrategy2);

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js
var resolveRetryConfig2 = function(input) {
  var maxAttempts = normalizeMaxAttempts2(input.maxAttempts);
  return __assign9(__assign9({}, input), { maxAttempts, retryStrategy: function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      var retryMode;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (input.retryStrategy) {
              return [2, input.retryStrategy];
            }
            return [4, getRetryMode(input.retryMode)];
          case 1:
            retryMode = _a.sent();
            if (retryMode === RETRY_MODES.ADAPTIVE) {
              return [2, new AdaptiveRetryStrategy(maxAttempts)];
            }
            return [2, new StandardRetryStrategy2(maxAttempts)];
        }
      });
    });
  } });
};
var getRetryMode = function(retryMode) {
  return __awaiter9(void 0, void 0, void 0, function() {
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (typeof retryMode === "string") {
            return [2, retryMode];
          }
          return [4, retryMode()];
        case 1:
          return [2, _a.sent()];
      }
    });
  });
};
var normalizeMaxAttempts2 = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS2;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js
var retryMiddleware2 = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter9(void 0, void 0, void 0, function() {
        var retryStrategy;
        return __generator9(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, options.retryStrategy()];
            case 1:
              retryStrategy = _a.sent();
              if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
                context.userAgent = __spreadArray(__spreadArray([], __read10(context.userAgent || [])), [["cfg/retry-mode", retryStrategy.mode]]);
              return [2, retryStrategy.retry(next, args)];
          }
        });
      });
    };
  };
};
var retryMiddlewareOptions2 = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware2(options), retryMiddlewareOptions2);
    }
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js
var ProviderError2 = function(_super) {
  __extends5(ProviderError4, _super);
  function ProviderError4(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    return _this;
  }
  ProviderError4.from = function(error, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    Object.defineProperty(error, "tryNextLink", {
      value: tryNextLink,
      configurable: false,
      enumerable: false,
      writable: false
    });
    return error;
  };
  return ProviderError4;
}(Error);
var CredentialsProviderError = function(_super) {
  __extends5(CredentialsProviderError3, _super);
  function CredentialsProviderError3(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    _this.name = "CredentialsProviderError";
    return _this;
  }
  CredentialsProviderError3.from = function(error, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    Object.defineProperty(error, "tryNextLink", {
      value: tryNextLink,
      configurable: false,
      enumerable: false,
      writable: false
    });
    return error;
  };
  return CredentialsProviderError3;
}(Error);

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/property-provider/dist-es/memoize.js
var memoize = function(provider, isExpired, requiresRefresh) {
  var resolved;
  var pending;
  var hasResult;
  var coalesceProvider = function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!pending) {
              pending = provider();
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, , 3, 4]);
            return [4, pending];
          case 2:
            resolved = _a.sent();
            hasResult = true;
            return [3, 4];
          case 3:
            pending = void 0;
            return [7];
          case 4:
            return [2, resolved];
        }
      });
    });
  };
  if (isExpired === void 0) {
    return function() {
      return __awaiter9(void 0, void 0, void 0, function() {
        return __generator9(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!hasResult)
                return [3, 2];
              return [4, coalesceProvider()];
            case 1:
              resolved = _a.sent();
              _a.label = 2;
            case 2:
              return [2, resolved];
          }
        });
      });
    };
  }
  var isConstant = false;
  return function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!hasResult)
              return [3, 2];
            return [4, coalesceProvider()];
          case 1:
            resolved = _a.sent();
            _a.label = 2;
          case 2:
            if (isConstant) {
              return [2, resolved];
            }
            if (requiresRefresh && !requiresRefresh(resolved)) {
              isConstant = true;
              return [2, resolved];
            }
            if (!isExpired(resolved))
              return [3, 4];
            return [4, coalesceProvider()];
          case 3:
            _a.sent();
            return [2, resolved];
          case 4:
            return [2, resolved];
        }
      });
    });
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js
var SHORT_TO_HEX2 = {};
var HEX_TO_SHORT2 = {};
for (i = 0; i < 256; i++) {
  encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX2[i] = encodedByte;
  HEX_TO_SHORT2[encodedByte] = i;
}
var encodedByte;
var i;
function toHex2(bytes) {
  var out = "";
  for (var i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX2[bytes[i]];
  }
  return out;
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/constants.js
var ALGORITHM_QUERY_PARAM2 = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM2 = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM2 = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM2 = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM2 = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM2 = "X-Amz-Signature";
var TOKEN_QUERY_PARAM2 = "X-Amz-Security-Token";
var AUTH_HEADER2 = "authorization";
var AMZ_DATE_HEADER2 = AMZ_DATE_QUERY_PARAM2.toLowerCase();
var DATE_HEADER2 = "date";
var GENERATED_HEADERS2 = [AUTH_HEADER2, AMZ_DATE_HEADER2, DATE_HEADER2];
var SIGNATURE_HEADER2 = SIGNATURE_QUERY_PARAM2.toLowerCase();
var SHA256_HEADER2 = "x-amz-content-sha256";
var TOKEN_HEADER2 = TOKEN_QUERY_PARAM2.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS2 = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN2 = /^proxy-/;
var SEC_HEADER_PATTERN2 = /^sec-/;
var ALGORITHM_IDENTIFIER2 = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER2 = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD2 = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE2 = 50;
var KEY_TYPE_IDENTIFIER2 = "aws4_request";
var MAX_PRESIGNED_TTL2 = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js
var signingKeyCache2 = {};
var cacheQueue2 = [];
var createScope2 = function(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER2;
};
var getSigningKey2 = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter9(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator9(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac2(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex2(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache2) {
            return [2, signingKeyCache2[cacheKey]];
          }
          cacheQueue2.push(cacheKey);
          while (cacheQueue2.length > MAX_CACHE_SIZE2) {
            delete signingKeyCache2[cacheQueue2.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values4([shortDate, region, service, KEY_TYPE_IDENTIFIER2]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac2(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 9:
          return [2, signingKeyCache2[cacheKey] = key];
      }
    });
  });
};
var hmac2 = function(ctor, secret, data) {
  var hash2 = new ctor(secret);
  hash2.update(data);
  return hash2.digest();
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js
var getCanonicalHeaders2 = function(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values4(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS2 || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN2.test(canonicalHeaderName) || SEC_HEADER_PATTERN2.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js
var escapeUri2 = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode2);
};
var hexEncode2 = function(c) {
  return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js
var getCanonicalQuery2 = function(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER2) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri2(key2) + "=" + escapeUri2(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri2(key2) + "=" + escapeUri2(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values4(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/is-array-buffer/dist-es/index.js
var isArrayBuffer2 = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js
var getPayloadHash2 = function(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter9(void 0, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator9(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER2) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer2(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex2;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD2];
      }
    });
  });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js
var hasHeader2 = function(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js
var cloneRequest2 = function(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest3(_a, ["headers", "query"]);
  return __assign9(__assign9({}, rest), { headers: __assign9({}, headers), query: query ? cloneQuery4(query) : void 0 });
};
var cloneQuery4 = function(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign9(__assign9({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spreadArray([], __read10(param)) : param, _a));
  }, {});
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js
var moveHeadersToQuery2 = function(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest2(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values4(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name = _f.value;
      var lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign9(__assign9({}, request), { headers, query });
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/normalizeProvider.js
var normalizeRegionProvider2 = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider2 = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js
var prepareRequest2 = function(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest2(request);
  try {
    for (var _b = __values4(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS2.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js
var iso86012 = function(time) {
  return toDate2(time).toISOString().replace(/\.\d{3}Z$/, "Z");
};
var toDate2 = function(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js
var SignatureV42 = function() {
  function SignatureV43(_a) {
    var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
    this.service = service;
    this.sha256 = sha256;
    this.uriEscapePath = uriEscapePath;
    this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
    this.regionProvider = normalizeRegionProvider2(region);
    this.credentialProvider = normalizeCredentialsProvider2(credentials);
  }
  SignatureV43.prototype.presign = function(originalRequest, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter9(this, void 0, void 0, function() {
      var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
      return __generator9(this, function(_l) {
        switch (_l.label) {
          case 0:
            _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
            return [4, this.credentialProvider()];
          case 1:
            credentials = _l.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _c = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _c = _l.sent();
            _l.label = 4;
          case 4:
            region = _c;
            _d = formatDate2(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
            if (expiresIn > MAX_PRESIGNED_TTL2) {
              return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
            }
            scope = createScope2(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request = moveHeadersToQuery2(prepareRequest2(originalRequest), { unhoistableHeaders });
            if (credentials.sessionToken) {
              request.query[TOKEN_QUERY_PARAM2] = credentials.sessionToken;
            }
            request.query[ALGORITHM_QUERY_PARAM2] = ALGORITHM_IDENTIFIER2;
            request.query[CREDENTIAL_QUERY_PARAM2] = credentials.accessKeyId + "/" + scope;
            request.query[AMZ_DATE_QUERY_PARAM2] = longDate;
            request.query[EXPIRES_QUERY_PARAM2] = expiresIn.toString(10);
            canonicalHeaders = getCanonicalHeaders2(request, unsignableHeaders, signableHeaders);
            request.query[SIGNED_HEADERS_QUERY_PARAM2] = getCanonicalHeaderList2(canonicalHeaders);
            _e = request.query;
            _f = SIGNATURE_QUERY_PARAM2;
            _g = this.getSignature;
            _h = [
              longDate,
              scope,
              this.getSigningKey(credentials, region, shortDate, signingService)
            ];
            _j = this.createCanonicalRequest;
            _k = [request, canonicalHeaders];
            return [4, getPayloadHash2(originalRequest, this.sha256)];
          case 5:
            return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
          case 6:
            _e[_f] = _l.sent();
            return [2, request];
        }
      });
    });
  };
  SignatureV43.prototype.sign = function(toSign, options) {
    return __awaiter9(this, void 0, void 0, function() {
      return __generator9(this, function(_a) {
        if (typeof toSign === "string") {
          return [2, this.signString(toSign, options)];
        } else if (toSign.headers && toSign.payload) {
          return [2, this.signEvent(toSign, options)];
        } else {
          return [2, this.signRequest(toSign, options)];
        }
        return [2];
      });
    });
  };
  SignatureV43.prototype.signEvent = function(_a, _b) {
    var headers = _a.headers, payload = _a.payload;
    var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter9(this, void 0, void 0, function() {
      var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash2, hashedHeaders, _f, stringToSign;
      return __generator9(this, function(_g) {
        switch (_g.label) {
          case 0:
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 1];
            _d = signingRegion;
            return [3, 3];
          case 1:
            return [4, this.regionProvider()];
          case 2:
            _d = _g.sent();
            _g.label = 3;
          case 3:
            region = _d;
            _e = formatDate2(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
            scope = createScope2(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            return [4, getPayloadHash2({ headers: {}, body: payload }, this.sha256)];
          case 4:
            hashedPayload = _g.sent();
            hash2 = new this.sha256();
            hash2.update(headers);
            _f = toHex2;
            return [4, hash2.digest()];
          case 5:
            hashedHeaders = _f.apply(void 0, [_g.sent()]);
            stringToSign = [
              EVENT_ALGORITHM_IDENTIFIER2,
              longDate,
              scope,
              priorSignature,
              hashedHeaders,
              hashedPayload
            ].join("\n");
            return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
        }
      });
    });
  };
  SignatureV43.prototype.signString = function(stringToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter9(this, void 0, void 0, function() {
      var credentials, region, _d, shortDate, hash2, _e, _f, _g;
      return __generator9(this, function(_h) {
        switch (_h.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _h.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _h.sent();
            _h.label = 4;
          case 4:
            region = _d;
            shortDate = formatDate2(signingDate).shortDate;
            _f = (_e = this.sha256).bind;
            return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
          case 5:
            hash2 = new (_f.apply(_e, [void 0, _h.sent()]))();
            hash2.update(stringToSign);
            _g = toHex2;
            return [4, hash2.digest()];
          case 6:
            return [2, _g.apply(void 0, [_h.sent()])];
        }
      });
    });
  };
  SignatureV43.prototype.signRequest = function(requestToSign, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
    return __awaiter9(this, void 0, void 0, function() {
      var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
      return __generator9(this, function(_f) {
        switch (_f.label) {
          case 0:
            return [4, this.credentialProvider()];
          case 1:
            credentials = _f.sent();
            if (!(signingRegion !== null && signingRegion !== void 0))
              return [3, 2];
            _d = signingRegion;
            return [3, 4];
          case 2:
            return [4, this.regionProvider()];
          case 3:
            _d = _f.sent();
            _f.label = 4;
          case 4:
            region = _d;
            request = prepareRequest2(requestToSign);
            _e = formatDate2(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
            scope = createScope2(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
            request.headers[AMZ_DATE_HEADER2] = longDate;
            if (credentials.sessionToken) {
              request.headers[TOKEN_HEADER2] = credentials.sessionToken;
            }
            return [4, getPayloadHash2(request, this.sha256)];
          case 5:
            payloadHash = _f.sent();
            if (!hasHeader2(SHA256_HEADER2, request.headers) && this.applyChecksum) {
              request.headers[SHA256_HEADER2] = payloadHash;
            }
            canonicalHeaders = getCanonicalHeaders2(request, unsignableHeaders, signableHeaders);
            return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
          case 6:
            signature = _f.sent();
            request.headers[AUTH_HEADER2] = ALGORITHM_IDENTIFIER2 + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList2(canonicalHeaders) + ", ") + ("Signature=" + signature);
            return [2, request];
        }
      });
    });
  };
  SignatureV43.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
    var sortedHeaders = Object.keys(canonicalHeaders).sort();
    return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery2(request) + "\n" + sortedHeaders.map(function(name) {
      return name + ":" + canonicalHeaders[name];
    }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
  };
  SignatureV43.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
    return __awaiter9(this, void 0, void 0, function() {
      var hash2, hashedRequest;
      return __generator9(this, function(_a) {
        switch (_a.label) {
          case 0:
            hash2 = new this.sha256();
            hash2.update(canonicalRequest);
            return [4, hash2.digest()];
          case 1:
            hashedRequest = _a.sent();
            return [2, ALGORITHM_IDENTIFIER2 + "\n" + longDate + "\n" + credentialScope + "\n" + toHex2(hashedRequest)];
        }
      });
    });
  };
  SignatureV43.prototype.getCanonicalPath = function(_a) {
    var path = _a.path;
    if (this.uriEscapePath) {
      var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
      return "/" + doubleEncoded.replace(/%2F/g, "/");
    }
    return path;
  };
  SignatureV43.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
    return __awaiter9(this, void 0, void 0, function() {
      var stringToSign, hash2, _a, _b, _c;
      return __generator9(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
          case 1:
            stringToSign = _d.sent();
            _b = (_a = this.sha256).bind;
            return [4, keyPromise];
          case 2:
            hash2 = new (_b.apply(_a, [void 0, _d.sent()]))();
            hash2.update(stringToSign);
            _c = toHex2;
            return [4, hash2.digest()];
          case 3:
            return [2, _c.apply(void 0, [_d.sent()])];
        }
      });
    });
  };
  SignatureV43.prototype.getSigningKey = function(credentials, region, shortDate, service) {
    return getSigningKey2(this.sha256, credentials, shortDate, region, service || this.service);
  };
  return SignatureV43;
}();
var formatDate2 = function(now) {
  var longDate = iso86012(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList2 = function(headers) {
  return Object.keys(headers).sort().join(";");
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js
var CREDENTIAL_EXPIRE_WINDOW = 3e5;
var resolveAwsAuthConfig2 = function(input) {
  var normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider2(input.signer);
  } else {
    signer = function() {
      return normalizeProvider2(input.region)().then(function(region) {
        return __awaiter9(void 0, void 0, void 0, function() {
          var _a2, _b2, _c;
          var _d;
          return __generator9(this, function(_e) {
            switch (_e.label) {
              case 0:
                _b2 = (_a2 = input).regionInfoProvider;
                _c = [region];
                _d = {};
                return [4, input.useFipsEndpoint()];
              case 1:
                _d.useFipsEndpoint = _e.sent();
                return [4, input.useDualstackEndpoint()];
              case 2:
                return [4, _b2.apply(_a2, _c.concat([(_d.useDualstackEndpoint = _e.sent(), _d)]))];
              case 3:
                return [2, [
                  _e.sent() || {},
                  region
                ]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read10(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        var params = __assign9(__assign9({}, input), { credentials: normalizedCreds, region: input.signingRegion, service: input.signingName, sha256, uriEscapePath: signingEscapePath });
        var signerConstructor = input.signerConstructor || SignatureV42;
        return new signerConstructor(params);
      });
    };
  }
  return __assign9(__assign9({}, input), { systemClockOffset, signingEscapePath, credentials: normalizedCreds, signer });
};
var normalizeProvider2 = function(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
};
var normalizeCredentialProvider = function(credentials) {
  if (typeof credentials === "function") {
    return memoize(credentials, function(credentials2) {
      return credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW;
    }, function(credentials2) {
      return credentials2.expiration !== void 0;
    });
  }
  return normalizeProvider2(credentials);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate2 = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js
var isClockSkewed2 = function(clockTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate2(systemClockOffset).getTime() - clockTime) >= 3e5;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset = function(clockTime, currentSystemClockOffset) {
  var clockTimeInMs = Date.parse(clockTime);
  if (isClockSkewed2(clockTimeInMs, currentSystemClockOffset)) {
    return clockTimeInMs - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js
var awsAuthMiddleware2 = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter9(this, void 0, void 0, function() {
        var signer, output, _a, _b, dateHeader;
        var _c;
        return __generator9(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!HttpRequest2.isInstance(args.request))
                return [2, next(args)];
              return [4, options.signer()];
            case 1:
              signer = _d.sent();
              _a = next;
              _b = [__assign9({}, args)];
              _c = {};
              return [4, signer.sign(args.request, {
                signingDate: getSkewCorrectedDate2(options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 2:
              return [4, _a.apply(void 0, [__assign9.apply(void 0, _b.concat([(_c.request = _d.sent(), _c)]))]).catch(function(error) {
                var _a2;
                var serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
                if (serverTime) {
                  options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);
                }
                throw error;
              })];
            case 3:
              output = _d.sent();
              dateHeader = getDateHeader(output.response);
              if (dateHeader) {
                options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
              }
              return [2, output];
          }
        });
      });
    };
  };
};
var getDateHeader = function(response) {
  var _a, _b, _c;
  return HttpResponse2.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
};
var awsAuthMiddlewareOptions2 = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin2 = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware2(options), awsAuthMiddlewareOptions2);
    }
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
function resolveUserAgentConfig2(input) {
  return __assign9(__assign9({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT2 = "user-agent";
var X_AMZ_USER_AGENT2 = "x-amz-user-agent";
var SPACE2 = " ";
var UA_ESCAPE_REGEX2 = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware2 = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter9(void 0, void 0, void 0, function() {
        var request, headers, userAgent, defaultUserAgent3, customUserAgent, sdkUserAgentValue, normalUAValue;
        var _a, _b;
        return __generator9(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest2.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent2)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent3 = _c.sent().map(escapeUserAgent2);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent2)) || [];
              sdkUserAgentValue = __spreadArray(__spreadArray(__spreadArray([], __read10(defaultUserAgent3)), __read10(userAgent)), __read10(customUserAgent)).join(SPACE2);
              normalUAValue = __spreadArray(__spreadArray([], __read10(defaultUserAgent3.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }))), __read10(customUserAgent)).join(SPACE2);
              if (options.runtime !== "browser") {
                if (normalUAValue) {
                  headers[X_AMZ_USER_AGENT2] = headers[X_AMZ_USER_AGENT2] ? headers[USER_AGENT2] + " " + normalUAValue : normalUAValue;
                }
                headers[USER_AGENT2] = sdkUserAgentValue;
              } else {
                headers[X_AMZ_USER_AGENT2] = sdkUserAgentValue;
              }
              return [2, next(__assign9(__assign9({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent2 = function(_a) {
  var _b = __read10(_a, 2), name = _b[0], version2 = _b[1];
  var prefixSeparatorIndex = name.indexOf("/");
  var prefix = name.substring(0, prefixSeparatorIndex);
  var uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version2].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX2, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions2 = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin2 = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware2(config), getUserAgentMiddlewareOptions2);
    }
  };
};

// node_modules/@aws-sdk/client-location/package.json
var package_default3 = {
  name: "@aws-sdk/client-location",
  description: "AWS SDK for JavaScript Location Client for Node.js, Browser and React Native",
  version: "3.48.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "tsc -p tsconfig.cjs.json",
    "build:docs": "typedoc",
    "build:es": "tsc -p tsconfig.es.json",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-*"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "2.0.0",
    "@aws-crypto/sha256-js": "2.0.0",
    "@aws-sdk/client-sts": "3.48.0",
    "@aws-sdk/config-resolver": "3.47.2",
    "@aws-sdk/credential-provider-node": "3.48.0",
    "@aws-sdk/fetch-http-handler": "3.47.2",
    "@aws-sdk/hash-node": "3.47.2",
    "@aws-sdk/invalid-dependency": "3.47.2",
    "@aws-sdk/middleware-content-length": "3.47.2",
    "@aws-sdk/middleware-host-header": "3.47.2",
    "@aws-sdk/middleware-logger": "3.47.2",
    "@aws-sdk/middleware-retry": "3.47.2",
    "@aws-sdk/middleware-serde": "3.47.2",
    "@aws-sdk/middleware-signing": "3.47.2",
    "@aws-sdk/middleware-stack": "3.47.2",
    "@aws-sdk/middleware-user-agent": "3.47.2",
    "@aws-sdk/node-config-provider": "3.47.2",
    "@aws-sdk/node-http-handler": "3.47.2",
    "@aws-sdk/protocol-http": "3.47.2",
    "@aws-sdk/smithy-client": "3.47.2",
    "@aws-sdk/types": "3.47.1",
    "@aws-sdk/url-parser": "3.47.2",
    "@aws-sdk/util-base64-browser": "3.47.1",
    "@aws-sdk/util-base64-node": "3.47.2",
    "@aws-sdk/util-body-length-browser": "3.47.1",
    "@aws-sdk/util-body-length-node": "3.47.1",
    "@aws-sdk/util-defaults-mode-browser": "3.47.2",
    "@aws-sdk/util-defaults-mode-node": "3.47.2",
    "@aws-sdk/util-user-agent-browser": "3.47.2",
    "@aws-sdk/util-user-agent-node": "3.47.2",
    "@aws-sdk/util-utf8-browser": "3.47.1",
    "@aws-sdk/util-utf8-node": "3.47.2",
    tslib: "^2.3.0"
  },
  devDependencies: {
    "@aws-sdk/service-client-documentation-generator": "3.47.1",
    "@types/node": "^12.7.5"
  },
  engines: {
    node: ">=12.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-location",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-location"
  }
};

// node_modules/@aws-sdk/client-location/dist-es/runtimeConfig.browser.js
var import_sha256_browser3 = __toESM(require_build11());

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/querystring-builder/dist-es/index.js
function buildQueryString2(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values4(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri2(key);
      if (Array.isArray(value)) {
        for (var i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(key + "=" + escapeUri2(value[i]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri2(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js
function requestTimeout2(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js
var FetchHttpHandler2 = function() {
  function FetchHttpHandler3(options) {
    var _this = this;
    if (typeof options === "function") {
      this.configProvider = function() {
        return __awaiter9(_this, void 0, void 0, function() {
          return __generator9(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, options()];
              case 1:
                return [2, _a.sent() || {}];
            }
          });
        });
      };
    } else {
      this.config = options !== null && options !== void 0 ? options : {};
    }
  }
  FetchHttpHandler3.prototype.destroy = function() {
  };
  FetchHttpHandler3.prototype.handle = function(request, _a) {
    var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
    return __awaiter9(this, void 0, void 0, function() {
      var _c, requestTimeoutInMs, abortError, path, queryString, port, method, url, body, requestOptions, fetchRequest, raceOfPromises;
      return __generator9(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!(!this.config && this.configProvider))
              return [3, 2];
            _c = this;
            return [4, this.configProvider()];
          case 1:
            _c.config = _d.sent();
            _d.label = 2;
          case 2:
            requestTimeoutInMs = this.config.requestTimeout;
            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
              abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              return [2, Promise.reject(abortError)];
            }
            path = request.path;
            if (request.query) {
              queryString = buildQueryString2(request.query);
              if (queryString) {
                path += "?" + queryString;
              }
            }
            port = request.port, method = request.method;
            url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
            body = method === "GET" || method === "HEAD" ? void 0 : request.body;
            requestOptions = {
              body,
              headers: new Headers(request.headers),
              method
            };
            if (typeof AbortController !== "undefined") {
              requestOptions["signal"] = abortSignal;
            }
            fetchRequest = new Request(url, requestOptions);
            raceOfPromises = [
              fetch(fetchRequest).then(function(response) {
                var e_1, _a2;
                var fetchHeaders = response.headers;
                var transformedHeaders = {};
                try {
                  for (var _b2 = __values4(fetchHeaders.entries()), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
                    var pair = _c2.value;
                    transformedHeaders[pair[0]] = pair[1];
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (_c2 && !_c2.done && (_a2 = _b2.return))
                      _a2.call(_b2);
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                }
                var hasReadableStream = response.body !== void 0;
                if (!hasReadableStream) {
                  return response.blob().then(function(body2) {
                    return {
                      response: new HttpResponse2({
                        headers: transformedHeaders,
                        statusCode: response.status,
                        body: body2
                      })
                    };
                  });
                }
                return {
                  response: new HttpResponse2({
                    headers: transformedHeaders,
                    statusCode: response.status,
                    body: response.body
                  })
                };
              }),
              requestTimeout2(requestTimeoutInMs)
            ];
            if (abortSignal) {
              raceOfPromises.push(new Promise(function(resolve, reject) {
                abortSignal.onabort = function() {
                  var abortError2 = new Error("Request aborted");
                  abortError2.name = "AbortError";
                  reject(abortError2);
                };
              }));
            }
            return [2, Promise.race(raceOfPromises)];
        }
      });
    });
  };
  return FetchHttpHandler3;
}();

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-base64-browser/dist-es/index.js
var alphabetByEncoding2 = {};
var alphabetByValue2 = new Array(64);
for (i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  alphabetByEncoding2[char] = i;
  alphabetByValue2[i] = char;
}
var char;
var i;
var start;
var limit;
for (i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  index = i + 26;
  alphabetByEncoding2[char] = index;
  alphabetByValue2[index] = char;
}
var char;
var index;
var i;
var start;
var limit;
for (i = 0; i < 10; i++) {
  alphabetByEncoding2[i.toString(10)] = i + 52;
  char = i.toString(10);
  index = i + 52;
  alphabetByEncoding2[char] = index;
  alphabetByValue2[index] = char;
}
var char;
var index;
var i;
alphabetByEncoding2["+"] = 62;
alphabetByValue2[62] = "+";
alphabetByEncoding2["/"] = 63;
alphabetByValue2[63] = "/";
var bitsPerLetter2 = 6;
var bitsPerByte2 = 8;
var maxLetterValue2 = 63;
function fromBase642(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i = 0; i < input.length; i += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = i + 3; j <= limit; j++) {
      if (input[j] !== "=") {
        if (!(input[j] in alphabetByEncoding2)) {
          throw new TypeError("Invalid character " + input[j] + " in base64 string.");
        }
        bits |= alphabetByEncoding2[input[j]] << (limit - j) * bitsPerLetter2;
        bitLength += bitsPerLetter2;
      } else {
        bits >>= bitsPerLetter2;
      }
    }
    var chunkOffset = i / 4 * 3;
    bits >>= bitLength % bitsPerByte2;
    var byteLength = Math.floor(bitLength / bitsPerByte2);
    for (var k = 0; k < byteLength; k++) {
      var offset = (byteLength - k - 1) * bitsPerByte2;
      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase642(input) {
  var str = "";
  for (var i = 0; i < input.length; i += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
      bits |= input[j] << (limit - j - 1) * bitsPerByte2;
      bitLength += bitsPerByte2;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter2);
    bits <<= bitClusterCount * bitsPerLetter2 - bitLength;
    for (var k = 1; k <= bitClusterCount; k++) {
      var offset = (bitClusterCount - k) * bitsPerLetter2;
      str += alphabetByValue2[(bits & maxLetterValue2 << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js
var streamCollector2 = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob2(stream);
  }
  return collectStream2(stream);
};
function collectBlob2(blob) {
  return __awaiter9(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase642(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase642(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream2(stream) {
  return __awaiter9(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator9(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase642(blob) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js
var invalidProvider2 = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js
function calculateBodyLength2(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i = len - 1; i >= 0; i--) {
      var code = body.charCodeAt(i);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var defaultUserAgent2 = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator9(this, function(_h) {
        parsedUA = typeof window !== "undefined" && ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
        sections = [
          ["aws-sdk-js", clientVersion],
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          ["lang/js"],
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-location/dist-es/runtimeConfig.browser.js
init_dist_es2();

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/querystring-parser/dist-es/index.js
function parseQueryString2(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values4(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read10(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/url-parser/dist-es/index.js
var parseUrl2 = function(url) {
  var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString2(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-location/dist-es/endpoints.js
var regionHash = {};
var partitionHash = {
  aws: {
    regions: [
      "af-south-1",
      "ap-east-1",
      "ap-northeast-1",
      "ap-northeast-2",
      "ap-northeast-3",
      "ap-south-1",
      "ap-southeast-1",
      "ap-southeast-2",
      "ap-southeast-3",
      "ca-central-1",
      "eu-central-1",
      "eu-north-1",
      "eu-south-1",
      "eu-west-1",
      "eu-west-2",
      "eu-west-3",
      "me-south-1",
      "sa-east-1",
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2"
    ],
    regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "geo.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "geo-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "geo-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "geo.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-cn": {
    regions: ["cn-north-1", "cn-northwest-1"],
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "geo.{region}.amazonaws.com.cn",
        tags: []
      },
      {
        hostname: "geo-fips.{region}.amazonaws.com.cn",
        tags: ["fips"]
      },
      {
        hostname: "geo-fips.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "geo.{region}.api.amazonwebservices.com.cn",
        tags: ["dualstack"]
      }
    ]
  },
  "aws-iso": {
    regions: ["us-iso-east-1", "us-iso-west-1"],
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "geo.{region}.c2s.ic.gov",
        tags: []
      },
      {
        hostname: "geo-fips.{region}.c2s.ic.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-iso-b": {
    regions: ["us-isob-east-1"],
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "geo.{region}.sc2s.sgov.gov",
        tags: []
      },
      {
        hostname: "geo-fips.{region}.sc2s.sgov.gov",
        tags: ["fips"]
      }
    ]
  },
  "aws-us-gov": {
    regions: ["us-gov-east-1", "us-gov-west-1"],
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    variants: [
      {
        hostname: "geo.{region}.amazonaws.com",
        tags: []
      },
      {
        hostname: "geo-fips.{region}.amazonaws.com",
        tags: ["fips"]
      },
      {
        hostname: "geo-fips.{region}.api.aws",
        tags: ["dualstack", "fips"]
      },
      {
        hostname: "geo.{region}.api.aws",
        tags: ["dualstack"]
      }
    ]
  }
};
var defaultRegionInfoProvider3 = function(region, options) {
  return __awaiter9(void 0, void 0, void 0, function() {
    return __generator9(this, function(_a) {
      return [2, getRegionInfo(region, __assign9(__assign9({}, options), { signingService: "geo", regionHash, partitionHash }))];
    });
  });
};

// node_modules/@aws-sdk/client-location/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = function(config) {
  var _a, _b, _c, _d, _e;
  return {
    apiVersion: "2020-11-19",
    disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
    logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
    regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : defaultRegionInfoProvider3,
    serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "Location",
    urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : parseUrl2
  };
};

// node_modules/@aws-sdk/util-defaults-mode-browser/node_modules/tslib/tslib.es6.js
var extendStatics5 = function(d, b) {
  extendStatics5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics5(d, b);
};
function __extends6(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics5(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter10(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator10(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/util-defaults-mode-browser/node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js
var ProviderError3 = function(_super) {
  __extends6(ProviderError4, _super);
  function ProviderError4(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    return _this;
  }
  ProviderError4.from = function(error, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    Object.defineProperty(error, "tryNextLink", {
      value: tryNextLink,
      configurable: false,
      enumerable: false,
      writable: false
    });
    return error;
  };
  return ProviderError4;
}(Error);
var CredentialsProviderError2 = function(_super) {
  __extends6(CredentialsProviderError3, _super);
  function CredentialsProviderError3(message, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    var _this = _super.call(this, message) || this;
    _this.tryNextLink = tryNextLink;
    _this.name = "CredentialsProviderError";
    return _this;
  }
  CredentialsProviderError3.from = function(error, tryNextLink) {
    if (tryNextLink === void 0) {
      tryNextLink = true;
    }
    Object.defineProperty(error, "tryNextLink", {
      value: tryNextLink,
      configurable: false,
      enumerable: false,
      writable: false
    });
    return error;
  };
  return CredentialsProviderError3;
}(Error);

// node_modules/@aws-sdk/util-defaults-mode-browser/node_modules/@aws-sdk/property-provider/dist-es/memoize.js
var memoize2 = function(provider, isExpired, requiresRefresh) {
  var resolved;
  var pending;
  var hasResult;
  var coalesceProvider = function() {
    return __awaiter10(void 0, void 0, void 0, function() {
      return __generator10(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!pending) {
              pending = provider();
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, , 3, 4]);
            return [4, pending];
          case 2:
            resolved = _a.sent();
            hasResult = true;
            return [3, 4];
          case 3:
            pending = void 0;
            return [7];
          case 4:
            return [2, resolved];
        }
      });
    });
  };
  if (isExpired === void 0) {
    return function() {
      return __awaiter10(void 0, void 0, void 0, function() {
        return __generator10(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!hasResult)
                return [3, 2];
              return [4, coalesceProvider()];
            case 1:
              resolved = _a.sent();
              _a.label = 2;
            case 2:
              return [2, resolved];
          }
        });
      });
    };
  }
  var isConstant = false;
  return function() {
    return __awaiter10(void 0, void 0, void 0, function() {
      return __generator10(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!!hasResult)
              return [3, 2];
            return [4, coalesceProvider()];
          case 1:
            resolved = _a.sent();
            _a.label = 2;
          case 2:
            if (isConstant) {
              return [2, resolved];
            }
            if (requiresRefresh && !requiresRefresh(resolved)) {
              isConstant = true;
              return [2, resolved];
            }
            if (!isExpired(resolved))
              return [3, 4];
            return [4, coalesceProvider()];
          case 3:
            _a.sent();
            return [2, resolved];
          case 4:
            return [2, resolved];
        }
      });
    });
  };
};

// node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js
var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];

// node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js
var resolveDefaultsModeConfig = function(_a) {
  var _b = _a === void 0 ? {} : _a, defaultsMode = _b.defaultsMode;
  return memoize2(function() {
    return __awaiter10(void 0, void 0, void 0, function() {
      var mode, _a2;
      return __generator10(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            if (!(typeof defaultsMode === "function"))
              return [3, 2];
            return [4, defaultsMode()];
          case 1:
            _a2 = _b2.sent();
            return [3, 3];
          case 2:
            _a2 = defaultsMode;
            _b2.label = 3;
          case 3:
            mode = _a2;
            switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
              case "auto":
                return [2, Promise.resolve(isMobileBrowser() ? "mobile" : "standard")];
              case "mobile":
              case "in-region":
              case "cross-region":
              case "standard":
              case "legacy":
                return [2, Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase())];
              case void 0:
                return [2, Promise.resolve("legacy")];
              default:
                throw new Error('Invalid parameter for "defaultsMode", expect ' + DEFAULTS_MODE_OPTIONS.join(", ") + ", got " + mode);
            }
            return [2];
        }
      });
    });
  });
};
var isMobileBrowser = function() {
  var _a, _b;
  var parsedUA = typeof window !== "undefined" && ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
  var platform = (_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.platform) === null || _b === void 0 ? void 0 : _b.type;
  return platform === "tablet" || platform === "mobile";
};

// node_modules/@aws-sdk/client-location/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = function(config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  var defaultsMode = resolveDefaultsModeConfig(config);
  var defaultConfigProvider = function() {
    return defaultsMode().then(loadConfigsForDefaultMode);
  };
  var clientSharedValues = getRuntimeConfig(config);
  return __assign9(__assign9(__assign9({}, clientSharedValues), config), { runtime: "browser", defaultsMode, base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : fromBase642, base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : toBase642, bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : calculateBodyLength2, credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : function(_) {
    return function() {
      return Promise.reject(new Error("Credential is missing"));
    };
  }, defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : defaultUserAgent2({ serviceId: clientSharedValues.serviceId, clientVersion: package_default3.version }), maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : DEFAULT_MAX_ATTEMPTS2, region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : invalidProvider2("Region is missing"), requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new FetchHttpHandler2(defaultConfigProvider), retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : function() {
    return __awaiter9(void 0, void 0, void 0, function() {
      return __generator9(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, defaultConfigProvider()];
          case 1:
            return [2, _a2.sent().retryMode || DEFAULT_RETRY_MODE2];
        }
      });
    });
  }, sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : import_sha256_browser3.Sha256, streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : streamCollector2, useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : function() {
    return Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT);
  }, useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : function() {
    return Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT);
  }, utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : fromUtf89, utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : toUtf89 });
};

// node_modules/@aws-sdk/client-location/dist-es/LocationClient.js
var LocationClient = function(_super) {
  __extends5(LocationClient2, _super);
  function LocationClient2(configuration) {
    var _this = this;
    var _config_0 = getRuntimeConfig2(configuration);
    var _config_1 = resolveRegionConfig2(_config_0);
    var _config_2 = resolveEndpointsConfig2(_config_1);
    var _config_3 = resolveRetryConfig2(_config_2);
    var _config_4 = resolveHostHeaderConfig2(_config_3);
    var _config_5 = resolveAwsAuthConfig2(_config_4);
    var _config_6 = resolveUserAgentConfig2(_config_5);
    _this = _super.call(this, _config_6) || this;
    _this.config = _config_6;
    _this.middlewareStack.use(getRetryPlugin2(_this.config));
    _this.middlewareStack.use(getContentLengthPlugin2(_this.config));
    _this.middlewareStack.use(getHostHeaderPlugin2(_this.config));
    _this.middlewareStack.use(getLoggerPlugin2(_this.config));
    _this.middlewareStack.use(getAwsAuthPlugin2(_this.config));
    _this.middlewareStack.use(getUserAgentPlugin2(_this.config));
    return _this;
  }
  LocationClient2.prototype.destroy = function() {
    _super.prototype.destroy.call(this);
  };
  return LocationClient2;
}(Client2);

// node_modules/@aws-sdk/client-location/dist-es/Location.js
var Location = function(_super) {
  __extends5(Location2, _super);
  function Location2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Location2.prototype.associateTrackerConsumer = function(args, optionsOrCb, cb) {
    var command = new AssociateTrackerConsumerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.batchDeleteDevicePositionHistory = function(args, optionsOrCb, cb) {
    var command = new BatchDeleteDevicePositionHistoryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.batchDeleteGeofence = function(args, optionsOrCb, cb) {
    var command = new BatchDeleteGeofenceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.batchEvaluateGeofences = function(args, optionsOrCb, cb) {
    var command = new BatchEvaluateGeofencesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.batchGetDevicePosition = function(args, optionsOrCb, cb) {
    var command = new BatchGetDevicePositionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.batchPutGeofence = function(args, optionsOrCb, cb) {
    var command = new BatchPutGeofenceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.batchUpdateDevicePosition = function(args, optionsOrCb, cb) {
    var command = new BatchUpdateDevicePositionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.calculateRoute = function(args, optionsOrCb, cb) {
    var command = new CalculateRouteCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.calculateRouteMatrix = function(args, optionsOrCb, cb) {
    var command = new CalculateRouteMatrixCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.createGeofenceCollection = function(args, optionsOrCb, cb) {
    var command = new CreateGeofenceCollectionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.createMap = function(args, optionsOrCb, cb) {
    var command = new CreateMapCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.createPlaceIndex = function(args, optionsOrCb, cb) {
    var command = new CreatePlaceIndexCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.createRouteCalculator = function(args, optionsOrCb, cb) {
    var command = new CreateRouteCalculatorCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.createTracker = function(args, optionsOrCb, cb) {
    var command = new CreateTrackerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.deleteGeofenceCollection = function(args, optionsOrCb, cb) {
    var command = new DeleteGeofenceCollectionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.deleteMap = function(args, optionsOrCb, cb) {
    var command = new DeleteMapCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.deletePlaceIndex = function(args, optionsOrCb, cb) {
    var command = new DeletePlaceIndexCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.deleteRouteCalculator = function(args, optionsOrCb, cb) {
    var command = new DeleteRouteCalculatorCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.deleteTracker = function(args, optionsOrCb, cb) {
    var command = new DeleteTrackerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.describeGeofenceCollection = function(args, optionsOrCb, cb) {
    var command = new DescribeGeofenceCollectionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.describeMap = function(args, optionsOrCb, cb) {
    var command = new DescribeMapCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.describePlaceIndex = function(args, optionsOrCb, cb) {
    var command = new DescribePlaceIndexCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.describeRouteCalculator = function(args, optionsOrCb, cb) {
    var command = new DescribeRouteCalculatorCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.describeTracker = function(args, optionsOrCb, cb) {
    var command = new DescribeTrackerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.disassociateTrackerConsumer = function(args, optionsOrCb, cb) {
    var command = new DisassociateTrackerConsumerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getDevicePosition = function(args, optionsOrCb, cb) {
    var command = new GetDevicePositionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getDevicePositionHistory = function(args, optionsOrCb, cb) {
    var command = new GetDevicePositionHistoryCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getGeofence = function(args, optionsOrCb, cb) {
    var command = new GetGeofenceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getMapGlyphs = function(args, optionsOrCb, cb) {
    var command = new GetMapGlyphsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getMapSprites = function(args, optionsOrCb, cb) {
    var command = new GetMapSpritesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getMapStyleDescriptor = function(args, optionsOrCb, cb) {
    var command = new GetMapStyleDescriptorCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.getMapTile = function(args, optionsOrCb, cb) {
    var command = new GetMapTileCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listDevicePositions = function(args, optionsOrCb, cb) {
    var command = new ListDevicePositionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listGeofenceCollections = function(args, optionsOrCb, cb) {
    var command = new ListGeofenceCollectionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listGeofences = function(args, optionsOrCb, cb) {
    var command = new ListGeofencesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listMaps = function(args, optionsOrCb, cb) {
    var command = new ListMapsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listPlaceIndexes = function(args, optionsOrCb, cb) {
    var command = new ListPlaceIndexesCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listRouteCalculators = function(args, optionsOrCb, cb) {
    var command = new ListRouteCalculatorsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listTagsForResource = function(args, optionsOrCb, cb) {
    var command = new ListTagsForResourceCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listTrackerConsumers = function(args, optionsOrCb, cb) {
    var command = new ListTrackerConsumersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.listTrackers = function(args, optionsOrCb, cb) {
    var command = new ListTrackersCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.putGeofence = function(args, optionsOrCb, cb) {
    var command = new PutGeofenceCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.searchPlaceIndexForPosition = function(args, optionsOrCb, cb) {
    var command = new SearchPlaceIndexForPositionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.searchPlaceIndexForSuggestions = function(args, optionsOrCb, cb) {
    var command = new SearchPlaceIndexForSuggestionsCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.searchPlaceIndexForText = function(args, optionsOrCb, cb) {
    var command = new SearchPlaceIndexForTextCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.tagResource = function(args, optionsOrCb, cb) {
    var command = new TagResourceCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.untagResource = function(args, optionsOrCb, cb) {
    var command = new UntagResourceCommand2(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.updateGeofenceCollection = function(args, optionsOrCb, cb) {
    var command = new UpdateGeofenceCollectionCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.updateMap = function(args, optionsOrCb, cb) {
    var command = new UpdateMapCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.updatePlaceIndex = function(args, optionsOrCb, cb) {
    var command = new UpdatePlaceIndexCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.updateRouteCalculator = function(args, optionsOrCb, cb) {
    var command = new UpdateRouteCalculatorCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  Location2.prototype.updateTracker = function(args, optionsOrCb, cb) {
    var command = new UpdateTrackerCommand(args);
    if (typeof optionsOrCb === "function") {
      this.send(command, optionsOrCb);
    } else if (typeof cb === "function") {
      if (typeof optionsOrCb !== "object")
        throw new Error("Expect http options but get " + typeof optionsOrCb);
      this.send(command, optionsOrCb || {}, cb);
    } else {
      return this.send(command, optionsOrCb);
    }
  };
  return Location2;
}(LocationClient);

// node_modules/@turf/helpers/dist/es/index.js
var earthRadius = 63710088e-1;
var factors = {
  centimeters: earthRadius * 100,
  centimetres: earthRadius * 100,
  degrees: earthRadius / 111325,
  feet: earthRadius * 3.28084,
  inches: earthRadius * 39.37,
  kilometers: earthRadius / 1e3,
  kilometres: earthRadius / 1e3,
  meters: earthRadius,
  metres: earthRadius,
  miles: earthRadius / 1609.344,
  millimeters: earthRadius * 1e3,
  millimetres: earthRadius * 1e3,
  nauticalmiles: earthRadius / 1852,
  radians: 1,
  yards: earthRadius * 1.0936
};
var unitsFactors = {
  centimeters: 100,
  centimetres: 100,
  degrees: 1 / 111325,
  feet: 3.28084,
  inches: 39.37,
  kilometers: 1 / 1e3,
  kilometres: 1 / 1e3,
  meters: 1,
  metres: 1,
  miles: 1 / 1609.344,
  millimeters: 1e3,
  millimetres: 1e3,
  nauticalmiles: 1 / 1852,
  radians: 1 / earthRadius,
  yards: 1.0936133
};
function feature(geom, properties, options) {
  if (options === void 0) {
    options = {};
  }
  var feat = { type: "Feature" };
  if (options.id === 0 || options.id) {
    feat.id = options.id;
  }
  if (options.bbox) {
    feat.bbox = options.bbox;
  }
  feat.properties = properties || {};
  feat.geometry = geom;
  return feat;
}
function point(coordinates, properties, options) {
  if (options === void 0) {
    options = {};
  }
  if (!coordinates) {
    throw new Error("coordinates is required");
  }
  if (!Array.isArray(coordinates)) {
    throw new Error("coordinates must be an Array");
  }
  if (coordinates.length < 2) {
    throw new Error("coordinates must be at least 2 numbers long");
  }
  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {
    throw new Error("coordinates must contain numbers");
  }
  var geom = {
    type: "Point",
    coordinates
  };
  return feature(geom, properties, options);
}
function polygon(coordinates, properties, options) {
  if (options === void 0) {
    options = {};
  }
  for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
    var ring = coordinates_1[_i];
    if (ring.length < 4) {
      throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
    }
    for (var j = 0; j < ring[ring.length - 1].length; j++) {
      if (ring[ring.length - 1][j] !== ring[0][j]) {
        throw new Error("First and last Position are not equivalent.");
      }
    }
  }
  var geom = {
    type: "Polygon",
    coordinates
  };
  return feature(geom, properties, options);
}
function lineString(coordinates, properties, options) {
  if (options === void 0) {
    options = {};
  }
  if (coordinates.length < 2) {
    throw new Error("coordinates must be an array of two or more positions");
  }
  var geom = {
    type: "LineString",
    coordinates
  };
  return feature(geom, properties, options);
}
function radiansToLength(radians, units) {
  if (units === void 0) {
    units = "kilometers";
  }
  var factor = factors[units];
  if (!factor) {
    throw new Error(units + " units is invalid");
  }
  return radians * factor;
}
function lengthToRadians(distance, units) {
  if (units === void 0) {
    units = "kilometers";
  }
  var factor = factors[units];
  if (!factor) {
    throw new Error(units + " units is invalid");
  }
  return distance / factor;
}
function radiansToDegrees(radians) {
  var degrees = radians % (2 * Math.PI);
  return degrees * 180 / Math.PI;
}
function degreesToRadians(degrees) {
  var radians = degrees % 360;
  return radians * Math.PI / 180;
}
function isNumber(num) {
  return !isNaN(num) && num !== null && !Array.isArray(num);
}

// node_modules/@turf/invariant/dist/es/index.js
function getCoord(coord) {
  if (!coord) {
    throw new Error("coord is required");
  }
  if (!Array.isArray(coord)) {
    if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
      return coord.geometry.coordinates;
    }
    if (coord.type === "Point") {
      return coord.coordinates;
    }
  }
  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
    return coord;
  }
  throw new Error("coord must be GeoJSON Point or an Array of numbers");
}
function getCoords(coords) {
  if (Array.isArray(coords)) {
    return coords;
  }
  if (coords.type === "Feature") {
    if (coords.geometry !== null) {
      return coords.geometry.coordinates;
    }
  } else {
    if (coords.coordinates) {
      return coords.coordinates;
    }
  }
  throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array");
}
function getGeom(geojson) {
  if (geojson.type === "Feature") {
    return geojson.geometry;
  }
  return geojson;
}

// node_modules/@turf/boolean-clockwise/dist/es/index.js
function booleanClockwise(line) {
  var ring = getCoords(line);
  var sum = 0;
  var i = 1;
  var prev;
  var cur;
  while (i < ring.length) {
    prev = cur || ring[0];
    cur = ring[i];
    sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);
    i++;
  }
  return sum > 0;
}

// node_modules/@aws-amplify/geo/lib-esm/util.js
var __read11 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function validateCoordinates(lng, lat) {
  if (!Number.isFinite(lng) || !Number.isFinite(lat)) {
    throw new Error("Invalid coordinates: [" + lng + "," + lat + "]");
  }
  if (lat < -90 || 90 < lat) {
    throw new Error("Latitude must be between -90 and 90 degrees inclusive.");
  } else if (lng < -180 || 180 < lng) {
    throw new Error("Longitude must be between -180 and 180 degrees inclusive.");
  }
}
function validateGeofenceId(geofenceId) {
  var geofenceIdRegex = /^[-._\p{L}\p{N}]+$/iu;
  if (!geofenceIdRegex.test(geofenceId)) {
    throw new Error("Invalid geofenceId: '" + geofenceId + "' - IDs can only contain alphanumeric characters, hyphens, underscores and periods.");
  }
}
function validateLinearRing(linearRing, geofenceId) {
  var errorPrefix = geofenceId ? geofenceId + ": " : "";
  if (linearRing.length < 4) {
    throw new Error(errorPrefix + "LinearRing must contain 4 or more coordinates.");
  }
  var badCoordinates = [];
  linearRing.forEach(function(coordinates) {
    try {
      validateCoordinates(coordinates[0], coordinates[1]);
    } catch (error) {
      badCoordinates.push({ coordinates, error: error.message });
    }
  });
  if (badCoordinates.length > 0) {
    throw new Error(errorPrefix + "One or more of the coordinates in the Polygon LinearRing are not valid: " + JSON.stringify(badCoordinates));
  }
  var _a = __read11(linearRing[0], 2), lngA = _a[0], latA = _a[1];
  var _b = __read11(linearRing[linearRing.length - 1], 2), lngB = _b[0], latB = _b[1];
  if (lngA !== lngB || latA !== latB) {
    throw new Error(errorPrefix + "LinearRing's first and last coordinates are not the same");
  }
  if (booleanClockwise(linearRing)) {
    throw new Error(errorPrefix + "LinearRing coordinates must be wound counterclockwise");
  }
}
function validatePolygon(polygon2, geofenceId) {
  var errorPrefix = geofenceId ? geofenceId + ": " : "";
  if (!Array.isArray(polygon2)) {
    throw new Error(errorPrefix + "Polygon is of incorrect structure. It should be an array of LinearRings");
  }
  if (polygon2.length < 1) {
    throw new Error(errorPrefix + "Polygon must have a single LinearRing array.");
  }
  if (polygon2.length > 1) {
    throw new Error(errorPrefix + "Polygon must have a single LinearRing array. Note: We do not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian.");
  }
  var verticesCount = polygon2.reduce(function(prev, linearRing) {
    return prev + linearRing.length;
  }, 0);
  if (verticesCount > 1e3) {
    throw new Error(errorPrefix + "Polygon has more than the maximum 1000 vertices.");
  }
  polygon2.forEach(function(linearRing) {
    validateLinearRing(linearRing, geofenceId);
  });
}
function validateGeofencesInput(geofences) {
  var geofenceIds = {};
  geofences.forEach(function(geofence) {
    if (!geofence.geofenceId) {
      throw new Error("Geofence '" + geofence + "' is missing geofenceId");
    }
    var geofenceId = geofence.geofenceId;
    validateGeofenceId(geofenceId);
    if (geofenceIds[geofenceId]) {
      throw new Error("Duplicate geofenceId: " + geofenceId);
    } else {
      geofenceIds[geofenceId] = true;
    }
    if (!geofence.geometry) {
      throw new Error("Geofence '" + geofenceId + "' is missing geometry");
    }
    var geometry = geofence.geometry;
    if (!geometry.polygon) {
      throw new Error("Geofence '" + geofenceId + "' is missing geometry.polygon");
    }
    var polygon2 = geometry.polygon;
    try {
      validatePolygon(polygon2, geofenceId);
    } catch (error) {
      if (error.message.includes("Polygon has more than the maximum 1000 vertices.")) {
        throw new Error("Geofence '" + geofenceId + "' has more than the maximum of 1000 vertices");
      }
    }
    var _a = __read11(polygon2, 1), linearRing = _a[0];
    validateLinearRing(linearRing, geofenceId);
  });
}

// node_modules/@aws-amplify/geo/lib-esm/Providers/AmazonLocationServiceProvider.js
var __awaiter11 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator11 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read12 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread8 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read12(arguments[i]));
  return ar;
};
var logger13 = new ConsoleLogger("AmazonLocationServiceProvider");
var AmazonLocationServiceProvider = function() {
  function AmazonLocationServiceProvider2(config) {
    this._config = config ? config : {};
    logger13.debug("Geo Options", this._config);
  }
  AmazonLocationServiceProvider2.prototype.getCategory = function() {
    return AmazonLocationServiceProvider2.CATEGORY;
  };
  AmazonLocationServiceProvider2.prototype.getProviderName = function() {
    return AmazonLocationServiceProvider2.PROVIDER_NAME;
  };
  AmazonLocationServiceProvider2.prototype.configure = function(config) {
    logger13.debug("configure Amazon Location Service Provider", config);
    if (!config)
      return this._config;
    this._config = Object.assign({}, this._config, config);
    return this._config;
  };
  AmazonLocationServiceProvider2.prototype.getAvailableMaps = function() {
    this._verifyMapResources();
    var mapStyles = [];
    var availableMaps = this._config.maps.items;
    var region = this._config.region;
    for (var mapName in availableMaps) {
      var style = availableMaps[mapName].style;
      mapStyles.push({ mapName, style, region });
    }
    return mapStyles;
  };
  AmazonLocationServiceProvider2.prototype.getDefaultMap = function() {
    this._verifyMapResources();
    var mapName = this._config.maps.default;
    var style = this._config.maps.items[mapName].style;
    var region = this._config.region;
    return { mapName, style, region };
  };
  AmazonLocationServiceProvider2.prototype.searchByText = function(text, options) {
    return __awaiter11(this, void 0, void 0, function() {
      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error("No credentials");
            }
            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);
            locationServiceInput = {
              Text: text,
              IndexName: this._config.search_indices.default
            };
            if (options) {
              locationServiceInput.FilterCountries = options.countries;
              locationServiceInput.MaxResults = options.maxResults;
              if (options.searchIndexName) {
                locationServiceInput.IndexName = options.searchIndexName;
              }
              if (options["biasPosition"] && options["searchAreaConstraints"]) {
                throw new Error("BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object");
              }
              if (options["biasPosition"]) {
                locationServiceInput.BiasPosition = options["biasPosition"];
              }
              if (options["searchAreaConstraints"]) {
                locationServiceInput.FilterBBox = options["searchAreaConstraints"];
              }
            }
            client = new LocationClient({
              credentials: this._config.credentials,
              region: this._config.region,
              customUserAgent: getAmplifyUserAgent()
            });
            command = new SearchPlaceIndexForTextCommand(locationServiceInput);
            _a.label = 2;
          case 2:
            _a.trys.push([2, 4, , 5]);
            return [4, client.send(command)];
          case 3:
            response = _a.sent();
            return [3, 5];
          case 4:
            error_1 = _a.sent();
            logger13.debug(error_1);
            throw error_1;
          case 5:
            PascalResults = response.Results.map(function(result) {
              return result.Place;
            });
            results = (0, import_camelcase_keys.default)(PascalResults, {
              deep: true
            });
            return [2, results];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype.searchByCoordinates = function(coordinates, options) {
    return __awaiter11(this, void 0, void 0, function() {
      var credentialsOK, locationServiceInput, client, command, response, error_2, PascalResults, results;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error("No credentials");
            }
            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);
            locationServiceInput = {
              Position: coordinates,
              IndexName: this._config.search_indices.default
            };
            if (options) {
              if (options.searchIndexName) {
                locationServiceInput.IndexName = options.searchIndexName;
              }
              locationServiceInput.MaxResults = options.maxResults;
            }
            client = new LocationClient({
              credentials: this._config.credentials,
              region: this._config.region,
              customUserAgent: getAmplifyUserAgent()
            });
            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);
            _a.label = 2;
          case 2:
            _a.trys.push([2, 4, , 5]);
            return [4, client.send(command)];
          case 3:
            response = _a.sent();
            return [3, 5];
          case 4:
            error_2 = _a.sent();
            logger13.debug(error_2);
            throw error_2;
          case 5:
            PascalResults = response.Results.map(function(result) {
              return result.Place;
            });
            results = (0, import_camelcase_keys.default)(PascalResults[0], {
              deep: true
            });
            return [2, results];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype.saveGeofences = function(geofences, options) {
    return __awaiter11(this, void 0, void 0, function() {
      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;
      var _this = this;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (geofences.length < 1) {
              throw new Error("Geofence input array is empty");
            }
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error("No credentials");
            }
            try {
              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);
            } catch (error) {
              logger13.debug(error);
              throw error;
            }
            validateGeofencesInput(geofences);
            PascalGeofences = geofences.map(function(_a2) {
              var geofenceId = _a2.geofenceId, polygon2 = _a2.geometry.polygon;
              return {
                GeofenceId: geofenceId,
                Geometry: {
                  Polygon: polygon2
                }
              };
            });
            results = {
              successes: [],
              errors: []
            };
            geofenceBatches = [];
            while (PascalGeofences.length > 0) {
              apiLimit = 10;
              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));
            }
            return [4, Promise.all(geofenceBatches.map(function(batch) {
              return __awaiter11(_this, void 0, void 0, function() {
                var response, error_3;
                return __generator11(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      _a2.trys.push([0, 2, , 3]);
                      return [4, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];
                    case 1:
                      response = _a2.sent();
                      return [3, 3];
                    case 2:
                      error_3 = _a2.sent();
                      batch.forEach(function(geofence) {
                        results.errors.push({
                          geofenceId: geofence.GeofenceId,
                          error: {
                            code: "APIConnectionError",
                            message: error_3.message
                          }
                        });
                      });
                      return [2];
                    case 3:
                      response.Successes.forEach(function(success) {
                        var GeofenceId = success.GeofenceId, CreateTime = success.CreateTime, UpdateTime = success.UpdateTime;
                        results.successes.push({
                          geofenceId: GeofenceId,
                          createTime: CreateTime,
                          updateTime: UpdateTime
                        });
                      });
                      response.Errors.forEach(function(error) {
                        var _a3 = error.Error, Code = _a3.Code, Message = _a3.Message, GeofenceId = error.GeofenceId;
                        results.errors.push({
                          error: {
                            code: Code,
                            message: Message
                          },
                          geofenceId: GeofenceId
                        });
                      });
                      return [2];
                  }
                });
              });
            }))];
          case 2:
            _a.sent();
            return [2, results];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype.getGeofence = function(geofenceId, options) {
    return __awaiter11(this, void 0, void 0, function() {
      var credentialsOK, client, commandInput, command, response, error_4, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error("No credentials");
            }
            try {
              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);
            } catch (error) {
              logger13.debug(error);
              throw error;
            }
            validateGeofenceId(geofenceId);
            client = new LocationClient({
              credentials: this._config.credentials,
              region: this._config.region,
              customUserAgent: getAmplifyUserAgent()
            });
            commandInput = {
              GeofenceId: geofenceId,
              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default
            };
            command = new GetGeofenceCommand(commandInput);
            _a.label = 2;
          case 2:
            _a.trys.push([2, 4, , 5]);
            return [4, client.send(command)];
          case 3:
            response = _a.sent();
            return [3, 5];
          case 4:
            error_4 = _a.sent();
            logger13.debug(error_4);
            throw error_4;
          case 5:
            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;
            geofence = {
              createTime: CreateTime,
              geofenceId: GeofenceId,
              geometry: {
                polygon: Geometry.Polygon
              },
              status: Status,
              updateTime: UpdateTime
            };
            return [2, geofence];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype.listGeofences = function(options) {
    return __awaiter11(this, void 0, void 0, function() {
      var credentialsOK, client, listGeofencesInput, command, response, error_5, NextToken, Entries, results;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error("No credentials");
            }
            try {
              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);
            } catch (error) {
              logger13.debug(error);
              throw error;
            }
            client = new LocationClient({
              credentials: this._config.credentials,
              region: this._config.region,
              customUserAgent: getAmplifyUserAgent()
            });
            listGeofencesInput = {
              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,
              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default
            };
            command = new ListGeofencesCommand(listGeofencesInput);
            _a.label = 2;
          case 2:
            _a.trys.push([2, 4, , 5]);
            return [4, client.send(command)];
          case 3:
            response = _a.sent();
            return [3, 5];
          case 4:
            error_5 = _a.sent();
            logger13.debug(error_5);
            throw error_5;
          case 5:
            NextToken = response.NextToken, Entries = response.Entries;
            results = {
              entries: Entries.map(function(_a2) {
                var GeofenceId = _a2.GeofenceId, CreateTime = _a2.CreateTime, UpdateTime = _a2.UpdateTime, Status = _a2.Status, Polygon = _a2.Geometry.Polygon;
                return {
                  geofenceId: GeofenceId,
                  createTime: CreateTime,
                  updateTime: UpdateTime,
                  status: Status,
                  geometry: {
                    polygon: Polygon
                  }
                };
              }),
              nextToken: NextToken
            };
            return [2, results];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype.deleteGeofences = function(geofenceIds, options) {
    return __awaiter11(this, void 0, void 0, function() {
      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;
      var _this = this;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (geofenceIds.length < 1) {
              throw new Error("GeofenceId input array is empty");
            }
            return [4, this._ensureCredentials()];
          case 1:
            credentialsOK = _a.sent();
            if (!credentialsOK) {
              throw new Error("No credentials");
            }
            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);
            badGeofenceIds = geofenceIds.filter(function(geofenceId) {
              try {
                validateGeofenceId(geofenceId);
              } catch (error) {
                return true;
              }
            });
            if (badGeofenceIds.length > 0) {
              throw new Error("Invalid geofence ids: " + badGeofenceIds.join(", "));
            }
            results = {
              successes: [],
              errors: []
            };
            geofenceIdBatches = [];
            count = 0;
            while (count < geofenceIds.length) {
              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));
            }
            return [4, Promise.all(geofenceIdBatches.map(function(batch) {
              return __awaiter11(_this, void 0, void 0, function() {
                var response, error_6, badGeofenceIds2;
                var _a2;
                return __generator11(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      _b.trys.push([0, 2, , 3]);
                      return [4, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];
                    case 1:
                      response = _b.sent();
                      return [3, 3];
                    case 2:
                      error_6 = _b.sent();
                      batch.forEach(function(geofenceId) {
                        var errorObject = {
                          geofenceId,
                          error: {
                            code: error_6.message,
                            message: error_6.message
                          }
                        };
                        results.errors.push(errorObject);
                      });
                      return [2];
                    case 3:
                      badGeofenceIds2 = response.Errors.map(function(_a3) {
                        var geofenceId = _a3.geofenceId;
                        return geofenceId;
                      });
                      (_a2 = results.successes).push.apply(_a2, __spread8(batch.filter(function(Id) {
                        return !badGeofenceIds2.includes(Id);
                      })));
                      return [2];
                  }
                });
              });
            }))];
          case 2:
            _a.sent();
            return [2, results];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype._ensureCredentials = function() {
    return __awaiter11(this, void 0, void 0, function() {
      var credentials, cred, error_7;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, Credentials.get()];
          case 1:
            credentials = _a.sent();
            if (!credentials)
              return [2, false];
            cred = Credentials.shear(credentials);
            logger13.debug("Set credentials for storage. Credentials are:", cred);
            this._config.credentials = cred;
            return [2, true];
          case 2:
            error_7 = _a.sent();
            logger13.debug("Ensure credentials error. Credentials are:", error_7);
            return [2, false];
          case 3:
            return [2];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype._verifyMapResources = function() {
    if (!this._config.maps) {
      var errorString = "No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after";
      logger13.debug(errorString);
      throw new Error(errorString);
    }
    if (!this._config.maps.default) {
      var errorString = "No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after";
      logger13.debug(errorString);
      throw new Error(errorString);
    }
  };
  AmazonLocationServiceProvider2.prototype._verifySearchIndex = function(optionalSearchIndex) {
    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {
      var errorString = "No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.";
      logger13.debug(errorString);
      throw new Error(errorString);
    }
  };
  AmazonLocationServiceProvider2.prototype._verifyGeofenceCollections = function(optionalGeofenceCollectionName) {
    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {
      var errorString = "No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.";
      logger13.debug(errorString);
      throw new Error(errorString);
    }
  };
  AmazonLocationServiceProvider2.prototype._AmazonLocationServiceBatchPutGeofenceCall = function(PascalGeofences, collectionName) {
    return __awaiter11(this, void 0, void 0, function() {
      var geofenceInput, client, command, response, error_8;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            geofenceInput = {
              Entries: PascalGeofences,
              CollectionName: collectionName || this._config.geofenceCollections.default
            };
            client = new LocationClient({
              credentials: this._config.credentials,
              region: this._config.region,
              customUserAgent: getAmplifyUserAgent()
            });
            command = new BatchPutGeofenceCommand(geofenceInput);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, client.send(command)];
          case 2:
            response = _a.sent();
            return [3, 4];
          case 3:
            error_8 = _a.sent();
            throw error_8;
          case 4:
            return [2, response];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function(geofenceIds, collectionName) {
    return __awaiter11(this, void 0, void 0, function() {
      var deleteGeofencesInput, client, command, response, error_9;
      return __generator11(this, function(_a) {
        switch (_a.label) {
          case 0:
            deleteGeofencesInput = {
              GeofenceIds: geofenceIds,
              CollectionName: collectionName || this._config.geofenceCollections.default
            };
            client = new LocationClient({
              credentials: this._config.credentials,
              region: this._config.region,
              customUserAgent: getAmplifyUserAgent()
            });
            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, client.send(command)];
          case 2:
            response = _a.sent();
            return [3, 4];
          case 3:
            error_9 = _a.sent();
            throw error_9;
          case 4:
            return [2, response];
        }
      });
    });
  };
  AmazonLocationServiceProvider2.CATEGORY = "Geo";
  AmazonLocationServiceProvider2.PROVIDER_NAME = "AmazonLocationService";
  return AmazonLocationServiceProvider2;
}();

// node_modules/@aws-amplify/geo/lib-esm/Geo.js
var __awaiter12 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator12 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read13 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var logger14 = new ConsoleLogger("Geo");
var DEFAULT_PROVIDER = "AmazonLocationService";
var GeoClass = function() {
  function GeoClass2() {
    this._config = {};
    this._pluggables = [];
    logger14.debug("Geo Options", this._config);
  }
  GeoClass2.prototype.getModuleName = function() {
    return GeoClass2.MODULE;
  };
  GeoClass2.prototype.addPluggable = function(pluggable) {
    if (pluggable && pluggable.getCategory() === "Geo") {
      this._pluggables.push(pluggable);
      var config = pluggable.configure(this._config[pluggable.getProviderName()]);
      return config;
    }
  };
  GeoClass2.prototype.getPluggable = function(providerName) {
    var pluggable = this._pluggables.find(function(pluggable2) {
      return pluggable2.getProviderName() === providerName;
    });
    if (pluggable === void 0) {
      logger14.debug("No plugin found with providerName", providerName);
      throw new Error("No plugin found in Geo for the provider");
    } else
      return pluggable;
  };
  GeoClass2.prototype.removePluggable = function(providerName) {
    this._pluggables = this._pluggables.filter(function(pluggable) {
      return pluggable.getProviderName() !== providerName;
    });
    return;
  };
  GeoClass2.prototype.configure = function(config) {
    var _this = this;
    logger14.debug("configure Geo");
    if (!config)
      return this._config;
    var amplifyConfig = parseMobileHubConfig(config);
    this._config = Object.assign({}, this._config, amplifyConfig.Geo, config);
    this._pluggables.forEach(function(pluggable) {
      pluggable.configure(_this._config[pluggable.getProviderName()]);
    });
    if (this._pluggables.length === 0) {
      this.addPluggable(new AmazonLocationServiceProvider());
    }
    return this._config;
  };
  GeoClass2.prototype.getAvailableMaps = function(provider) {
    if (provider === void 0) {
      provider = DEFAULT_PROVIDER;
    }
    var prov = this.getPluggable(provider);
    return prov.getAvailableMaps();
  };
  GeoClass2.prototype.getDefaultMap = function(provider) {
    if (provider === void 0) {
      provider = DEFAULT_PROVIDER;
    }
    var prov = this.getPluggable(provider);
    return prov.getDefaultMap();
  };
  GeoClass2.prototype.searchByText = function(text, options) {
    return __awaiter12(this, void 0, void 0, function() {
      var _a, providerName, prov, error_1;
      return __generator12(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;
            prov = this.getPluggable(providerName);
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, prov.searchByText(text, options)];
          case 2:
            return [2, _b.sent()];
          case 3:
            error_1 = _b.sent();
            logger14.debug(error_1);
            throw error_1;
          case 4:
            return [2];
        }
      });
    });
  };
  GeoClass2.prototype.searchByCoordinates = function(coordinates, options) {
    return __awaiter12(this, void 0, void 0, function() {
      var _a, providerName, prov, _b, lng, lat, error_2;
      return __generator12(this, function(_c) {
        switch (_c.label) {
          case 0:
            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;
            prov = this.getPluggable(providerName);
            _b = __read13(coordinates, 2), lng = _b[0], lat = _b[1];
            _c.label = 1;
          case 1:
            _c.trys.push([1, 3, , 4]);
            validateCoordinates(lng, lat);
            return [4, prov.searchByCoordinates(coordinates, options)];
          case 2:
            return [2, _c.sent()];
          case 3:
            error_2 = _c.sent();
            logger14.debug(error_2);
            throw error_2;
          case 4:
            return [2];
        }
      });
    });
  };
  GeoClass2.prototype.saveGeofences = function(geofences, options) {
    return __awaiter12(this, void 0, void 0, function() {
      var _a, providerName, prov, geofenceInputArray, error_3;
      return __generator12(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;
            prov = this.getPluggable(providerName);
            if (!Array.isArray(geofences)) {
              geofenceInputArray = [geofences];
            } else {
              geofenceInputArray = geofences;
            }
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, prov.saveGeofences(geofenceInputArray, options)];
          case 2:
            return [2, _b.sent()];
          case 3:
            error_3 = _b.sent();
            logger14.debug(error_3);
            throw error_3;
          case 4:
            return [2];
        }
      });
    });
  };
  GeoClass2.prototype.getGeofence = function(geofenceId, options) {
    return __awaiter12(this, void 0, void 0, function() {
      var _a, providerName, prov, error_4;
      return __generator12(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;
            prov = this.getPluggable(providerName);
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, prov.getGeofence(geofenceId, options)];
          case 2:
            return [2, _b.sent()];
          case 3:
            error_4 = _b.sent();
            logger14.debug(error_4);
            throw error_4;
          case 4:
            return [2];
        }
      });
    });
  };
  GeoClass2.prototype.listGeofences = function(options) {
    return __awaiter12(this, void 0, void 0, function() {
      var _a, providerName, prov, error_5;
      return __generator12(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;
            prov = this.getPluggable(providerName);
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, prov.listGeofences(options)];
          case 2:
            return [2, _b.sent()];
          case 3:
            error_5 = _b.sent();
            logger14.debug(error_5);
            throw error_5;
          case 4:
            return [2];
        }
      });
    });
  };
  GeoClass2.prototype.deleteGeofences = function(geofenceIds, options) {
    return __awaiter12(this, void 0, void 0, function() {
      var _a, providerName, prov, geofenceIdsInputArray, error_6;
      return __generator12(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;
            prov = this.getPluggable(providerName);
            if (!Array.isArray(geofenceIds)) {
              geofenceIdsInputArray = [geofenceIds];
            } else {
              geofenceIdsInputArray = geofenceIds;
            }
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, prov.deleteGeofences(geofenceIdsInputArray, options)];
          case 2:
            return [2, _b.sent()];
          case 3:
            error_6 = _b.sent();
            logger14.debug(error_6);
            throw error_6;
          case 4:
            return [2];
        }
      });
    });
  };
  GeoClass2.MODULE = "Geo";
  return GeoClass2;
}();
var Geo = new GeoClass();
Amplify.register(Geo);

export {
  ConsoleLogger,
  AmplifyClass,
  Amplify,
  Platform,
  getAmplifyUserAgent,
  ClientDevice,
  Hub,
  I18n2 as I18n,
  isWebWorker,
  browserOrNode,
  JS,
  require_tslib,
  fromHex,
  toHex,
  require_url,
  NonRetryableError,
  retry,
  jitteredBackoff,
  jitteredExponentialRetry,
  Mutex_default,
  bundle_esm_default,
  Reachability_default,
  DateUtils,
  urlSafeEncode,
  urlSafeDecode,
  Signer,
  Parser,
  fromUtf86 as fromUtf8,
  toUtf86 as toUtf8,
  es_exports2 as es_exports,
  init_es2 as init_es,
  dist_es_exports,
  init_dist_es,
  require_build2 as require_build,
  require_build6 as require_build2,
  __assign4 as __assign,
  __rest,
  __awaiter3 as __awaiter,
  __generator3 as __generator,
  __values2 as __values,
  __read6 as __read,
  __await,
  __asyncGenerator,
  __asyncValues,
  HttpResponse,
  HttpRequest,
  buildQueryString,
  FetchHttpHandler,
  fromBase64,
  toBase64,
  streamCollector,
  invalidProvider,
  getRetryPlugin,
  require_uuid,
  DEFAULT_MAX_ATTEMPTS,
  resolveRetryConfig,
  calculateBodyLength,
  bowser_default,
  defaultUserAgent,
  parseUrl,
  resolveEndpointsConfig,
  resolveRegionConfig,
  getContentLengthPlugin,
  resolveHostHeaderConfig,
  getHostHeaderPlugin,
  getLoggerPlugin,
  isArrayBuffer,
  SignatureV4,
  resolveAwsAuthConfig,
  getAwsAuthPlugin,
  resolveUserAgentConfig,
  getUserAgentPlugin,
  Client,
  Command,
  extendedEncodeURIComponent,
  getArrayIfSingleItem,
  getValueFromTextNode,
  LazyJsonString,
  dateToUtcString,
  SENSITIVE_STRING,
  getSerdePlugin,
  AWSCloudWatchProvider,
  StorageHelper,
  Credentials,
  ServiceWorkerClass,
  UniversalStorage,
  INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER,
  INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,
  USER_AGENT_HEADER,
  Constants,
  require_events,
  feature,
  point,
  polygon,
  lineString,
  radiansToLength,
  lengthToRadians,
  radiansToDegrees,
  degreesToRadians,
  getCoord,
  getGeom,
  Geo
};
/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! https://mths.be/punycode v1.3.2 by @mathias */
//# sourceMappingURL=chunk-YLPAGW6Z.js.map
